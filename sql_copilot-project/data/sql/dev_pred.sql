SELECT COUNT(*) FROM department WHERE age > 56;
SELECT name, born_state, age FROM heads_of_departments ORDER BY age;
SELECT year, name, budget FROM departments;
SELECT MAX(budget) AS max_budget, MIN(budget) AS min_budget FROM departments;
SELECT AVG(num_employees) FROM departments WHERE rank BETWEEN 10 AND 15;
SELECT name FROM heads WHERE state <> 'California';
SELECT DISTINCT YEAR(department_creation_date) FROM departments WHERE secretary_name = 'Alabama' AND department_manager_name = 'Secretary';
SELECT state FROM births WHERE heads >= 3;
SELECT YEAR(department_created_date) AS year, COUNT(*) AS count FROM departments GROUP BY year ORDER BY count DESC LIMIT 1;
SELECT department_name, COUNT(*) FROM employees WHERE temporary_acting_value = 'Yes' GROUP BY department_name;
SELECT COUNT(*) FROM acting_status;
SELECT COUNT(DISTINCT department_head) FROM department_head WHERE department_head NOT IN (SELECT department_head FROM department);
SELECT DISTINCT age FROM heads WHERE occupation = 'Actor';
SELECT state FROM states WHERE secretary_of_treasury_department = 'John' AND secretary_of_homeland_security = 'Jane';
SELECT department_id, department_name, COUNT(*) as num_heads FROM employees WHERE department_id IN () SELECT department_id FROM head GROUP BY department_id HAVING COUNT(*) > 1;
SELECT id, name FROM head WHERE name LIKE 'Ha%';
SELECT COUNT(*) FROM farms;
SELECT COUNT(*) FROM farms;
SELECT COUNT(*) FROM farms WHERE type = 'horse' ORDER BY count(*) ASC;
SELECT farm, SUM(horses) FROM records GROUP BY farm ORDER BY SUM(horses) ASC;
SELECT host FROM competitions WHERE theme!= 'Aliens';
SELECT hosts FROM competitions WHERE theme!= 'Aliens';
SELECT theme, year FROM farm_competitions ORDER BY year ASC;
SELECT theme FROM farm_competitions ORDER BY year ASC;
SELECT AVG(horses) FROM farms WHERE total_horses > 5000;
SELECT AVG(horses) FROM farms WHERE total_horses > 5000;
SELECT MAX(number_of_cows) AS max_cows, MIN(number_of_cows) AS min_cows FROM farms;
SELECT MAX(cows) AS max_cows, MIN(cows) AS min_cows FROM farms;
SELECT COUNT(DISTINCT status) FROM cities;
SELECT COUNT(DISTINCT status) FROM users;
SELECT name FROM cities ORDER BY population DESC;
SELECT name FROM cities ORDER BY population DESC;
SELECT name, status FROM city WHERE population = (SELECT MAX(population) FROM city);
The official name and status of the city with the most residents is "New York City" and "Metropolitan Statistical Area".;
SELECT YEAR(competition_date) AS year, official_name(city) AS city_name FROM competitions WHERE year IN (SELECT YEAR(competition_date) FROM competitions) ORDER BY year ASC;
SELECT year, name FROM cities WHERE competition = 'Olympics';
SELECT city_name FROM cities WHERE city_name IN (SELECT city_name FROM competitions GROUP BY city_name HAVING COUNT(*) > 1);
SELECT name FROM cities WHERE name IN (SELECT name FROM cities WHERE host_competition > 1);
SELECT city, COUNT(*) as num_competitions FROM competitions WHERE city = (SELECT city FROM competitions GROUP BY city ORDER BY COUNT(*) DESC LIMIT 1) GROUP;
SELECT city, COUNT(*) as num_competitions FROM competitions GROUP BY city ORDER BY num_competitions DESC LIMIT 1;
SELECT theme FROM competitions WHERE host_city_population > 1000;
SELECT theme, host_city FROM competitions WHERE host_city_population > 1000;
SELECT status, AVG(population) FROM cities GROUP BY status;
SELECT city, status, AVG(population) FROM cities GROUP BY city;
SELECT status, COUNT(city) as num_cities FROM cities GROUP BY status ORDER BY num_cities DESC;
SELECT status, COUNT(*) as frequency FROM city_status GROUP BY status ORDER BY frequency ASC;
SELECT city, COUNT(status) as count FROM status GROUP BY city ORDER BY count DESC LIMIT 1;
SELECT city, COUNT(status) as count FROM users GROUP BY city ORDER BY count DESC LIMIT 1;
SELECT city_name FROM cities WHERE competition_status = 'Not Held';
SELECT name FROM cities WHERE competition_hosted = NULL;
SELECT status FROM cities WHERE population > 1500 AND population < 500;
SELECT status FROM cities WHERE population > 1500 AND population < 500;
SELECT name FROM cities WHERE population > 1500 OR population < 500;
SELECT name FROM cities WHERE population > 1500 OR population < 500;
SELECT * FROM cities WHERE status!= 'Village' ORDER BY rank ASC;
SELECT * FROM cities WHERE status!= 'Village' ORDER BY rank ASC;
SELECT course_name, COUNT(*) as num_students FROM enrollments GROUP BY course_name ORDER BY num_students DESC LIMIT 1;
SELECT name FROM courses WHERE registration_count = (SELECT MAX(registration_count) FROM courses);
SELECT id, COUNT(*) as num_courses FROM students WHERE courses_taken > 0 GROUP BY id ORDER BY num_courses ASC LIMIT 1;
SELECT id FROM students WHERE id IN (SELECT MIN(id) FROM students WHERE courses > 0);
SELECT first_name, last_name FROM candidates;
SELECT first_name, last_name FROM candidates;
SELECT id FROM students WHERE attendance = 0;
SELECT id FROM students WHERE attendance = 0;
SELECT id FROM students WHERE id IN (SELECT student_id FROM courses);
SELECT id FROM students WHERE id IN (SELECT student_id FROM courses);
SELECT student_id, course_name FROM students INNER JOIN courses ON students.course_id = courses.id;
SELECT * FROM students WHERE registration_date = (SELECT MAX(registration_date) FROM students);
SELECT * FROM students WHERE registration_date = (SELECT MAX(registration_date) FROM students);
SELECT COUNT(*) FROM students WHERE course = 'English';
SELECT COUNT(*) FROM students WHERE course = 'English';
SELECT COUNT(*) FROM courses WHERE student_id = 171;
SELECT COUNT(*) FROM courses WHERE student_id = 171;
SELECT id FROM candidates WHERE email ='stanley.monahan@example.org';
SELECT id FROM candidates WHERE email ='stanley.monahan@example.org';
SELECT id FROM candidates WHERE access_date = (SELECT MAX(access_date) FROM candidates);
SELECT id FROM candidates WHERE access_date = (SELECT MAX(access_date) FROM candidates);
SELECT * FROM students WHERE courses_taken = (SELECT MAX(courses_taken) FROM students);
SELECT student_name, COUNT(course_id) AS num_courses FROM student_courses GROUP BY student_name ORDER BY num_courses DESC LIMIT 1;
SELECT id, COUNT(*) FROM students WHERE courses > 0 GROUP BY id;
SELECT student_id, COUNT(course_id) FROM student_course GROUP BY student_id;
SELECT course_name, COUNT(student_id) FROM students GROUP BY course_name;
SELECT course_id, COUNT(student_id) AS num_students, course_name FROM students GROUP BY course_id;
SELECT id FROM candidates WHERE assessment_code = 'Pass';
SELECT id FROM candidates WHERE outcome_code = 'Pass';
SELECT mobile_number FROM candidates WHERE assessment_code = 'Fail';
SELECT cell_phone_number FROM candidates WHERE assessment_code = 'Fail';
SELECT id FROM students WHERE course_id = 301;
SELECT id FROM students WHERE course_id = 301;
SELECT id FROM students WHERE course_id = 301 ORDER BY registration_date DESC LIMIT 1;
SELECT id FROM students WHERE course_id = 301 ORDER BY registration_date DESC LIMIT 1;
SELECT DISTINCT city FROM addresses;
SELECT city FROM people;
SELECT DISTINCT city FROM students;
SELECT city FROM students;
SELECT course_name FROM courses ORDER BY course_name ASC;
SELECT course_name FROM courses ORDER BY course_name ASC;
SELECT first_name FROM people ORDER BY first_name ASC;
SELECT first_name FROM people ORDER BY first_name ASC;
SELECT id FROM students WHERE (courses_registered = 1 OR courses_attended = 1);
SELECT student_id FROM students WHERE student_id IN (SELECT student_id FROM registrations OR student_id FROM attendance);
SELECT id FROM courses WHERE id IN (SELECT id FROM student WHERE student_id = 121) OR id IN (SELECT id FROM student WHERE student_id = 121);
SELECT id FROM courses WHERE id IN (SELECT id FROM registrations WHERE student_id = 121) OR id IN (SELECT id FROM attendance WHERE student_id = 121);
SELECT * FROM students WHERE students.registered_courses IS NOT NULL AND students.attended_courses IS NULL;
SELECT * FROM students WHERE registration_date IS NULL AND attendance_date IS NULL;
SELECT id FROM students WHERE course_statistics_registered = 1 ORDER BY registration_date;
SELECT id FROM students WHERE course_statistics_date IS NULL ORDER BY registration_date;
SELECT id FROM students WHERE course_id ='statistics' ORDER BY attendance_date;
SELECT id FROM students WHERE department ='statistics' ORDER BY attendance_date ASC;
SELECT DATE_FORMAT(date, '%Y-%m-%d') as date, MAX(temperature) as max_temp FROM weather_data WHERE temperature > 85 GROUP BY date ORDER BY date;
SELECT date, MAX(temperature) FROM weather WHERE temperature > 85;
SELECT name FROM stations WHERE latitude < 37.5;
SELECT name FROM stations WHERE latitude < 37.5;
SELECT city, MAX(latitude) FROM stations GROUP BY city;
SELECT city, MAX(latitude) FROM stations GROUP BY city;
SELECT start_station, end_station FROM trips ORDER BY trip_id ASC LIMIT 3;
SELECT station, end_station FROM trips ORDER BY id ASC LIMIT 3;
SELECT AVG(latitude), AVG(longitude) FROM stations WHERE city = 'San Jose';
SELECT AVG(latitude), AVG(longitude) FROM cities WHERE city_name = 'San Jose';
SELECT id FROM trips WHERE duration = (SELECT MIN(duration) FROM trips);
SELECT id FROM trips WHERE length = (SELECT MIN(length) FROM trips);
SELECT SUM(duration) AS total_duration, MAX(duration) AS max_duration FROM trips WHERE bike_id = 636;
SELECT SUM(duration) AS total_duration, MAX(duration) AS max_duration FROM trips WHERE bike_id = 636;
SELECT zip_code, AVG(mean_temperature) FROM zip_code_data WHERE month = 'August' GROUP BY zip_code;
SELECT zip_code, AVG(mean_temperature) FROM weather_data WHERE date LIKE '8%' GROUP BY zip_code;
SELECT COUNT(DISTINCT bike_id) FROM trip_record;
SELECT COUNT(DISTINCT bike_id) FROM bikes;
SELECT COUNT(DISTINCT city) FROM stations;
SELECT COUNT(DISTINCT city) FROM stations;
SELECT COUNT(*) FROM stations WHERE city = 'Mountain View';
SELECT COUNT(*) FROM stations WHERE city = 'Mountain View';
SELECT DISTINCT name FROM stations WHERE bikes_available = 7;
SELECT name FROM stations WHERE bikes = 7;
SELECT name, id FROM start_station WHERE month = 'August' GROUP BY name, id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT name, id FROM start_station WHERE name = 'Start Station' AND id = (SELECT MAX(id) FROM start_station WHERE month = 'August');
SELECT bike_id, COUNT(*) as count FROM bike_data WHERE zip_code = '94002' GROUP BY bike_id ORDER BY count DESC LIMIT 1;
SELECT id FROM bikes WHERE distance_traveled = 94002;
SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility > 8;
SELECT COUNT(*) FROM weather WHERE hum > 50 AND vis > 8;
SELECT latitude, longitude, city FROM stations WHERE trip_length = (SELECT MIN(trip_length) FROM trips);
SELECT latitude, longitude, city FROM trips WHERE duration = (SELECT MIN(duration) FROM trips);
SELECT id FROM stations WHERE city = 'San Francisco' AND avg_bike_availability > 10;
SELECT id FROM stations WHERE city = 'San Francisco' AND bikes > 10;
SELECT name, id FROM stations WHERE (avg_bikes > 14 OR month(install_date) = 12);
SELECT name, id FROM stations WHERE (avg_bikes > 14 OR bikes_installed_in_december = 1);
SELECT COUNT(*) FROM weather_data WHERE zipcode = 94107 GROUP BY cloud_cover ORDER BY COUNT(*) DESC LIMIT 3;
SELECT COUNT(*) FROM cloud_cover WHERE zipcode = 94107 GROUP BY cloud_cover ORDER BY COUNT(*) DESC LIMIT 3;
SELECT zip_code FROM weather_data WHERE mean_sea_level_pressure = (SELECT MIN(mean_sea_level_pressure) FROM weather_data);
SELECT zip_code, AVG(mean_sea_level_pressure) AS avg_pressure FROM weather_data WHERE mean_sea_level_pressure IS NOT NULL GROUP BY zip_code ORDER BY avg_pressure ASC LIMIT 1;
SELECT AVG(availability) FROM stations WHERE location!= 'Palo Alto';
SELECT AVG(bike_availability) FROM stations WHERE city!= 'Palo Alto';
SELECT AVG(longitude) FROM stations WHERE bike_availability <= 10;
SELECT AVG(longitude) FROM stations WHERE bikes_available <= 10;
SELECT date, zip_code FROM weather WHERE max_temp = 80;
SELECT zip_code, MAX(temperature) AS max_temp, MIN(date) AS min_date FROM station WHERE temperature >= 80 GROUP BY zip_code ORDER BY max_temp DESC;
SELECT id FROM trips WHERE zipcode = '12345' AND avg_temp > 60;
SELECT zip_code, trip_id FROM trips WHERE AVG(mean_temperature) > 60;
SELECT zip_code, COUNT(*) FROM weather_data WHERE max_wind_speed >= 25 GROUP BY zip_code;
SELECT zip_code, COUNT(*) FROM weather_data WHERE wind_speed = 25 GROUP BY zip_code;
SELECT day, zip_code FROM dew_point WHERE zip_code = 94107 AND day = (SELECT MIN(day) FROM dew_point WHERE zip_code = 94107);
SELECT DISTINCT day, zipcode FROM dewpoint WHERE dewpoint < (SELECT MIN(dewpoint) FROM dewpoint WHERE zipcode = 94107);
SELECT trip_id, ending_station_id, ending_station_install_date FROM trips WHERE ending_station_id IS NOT NULL ORDER BY ending_station_install_date DESC;
SELECT ending_station, installation_date FROM trips;
SELECT trip_id FROM trips WHERE dock_count = (SELECT MAX(dock_count) FROM trips);
SELECT id FROM trips WHERE start_station = (SELECT MAX(start_station) FROM trips);
SELECT COUNT(*) FROM trips WHERE destination = 'San Francisco';
SELECT COUNT(*) FROM trips WHERE destination!= 'San Francisco';
Monday SQL Query: SELECT DATE_FORMAT(date, '%A') FROM weather WHERE zipcode = 94107 AND (Fog = 0 OR Rain = 0);
SELECT DISTINCT day FROM weather WHERE zipcode = 94107 AND (foggy = 0 OR rain = 0);
SELECT id FROM stations WHERE latitude > 37.4 AND bike_availability < 7;
SELECT id FROM stations WHERE latitude > 37.4 AND (num_bikes >= 7 AND num_bikes > 0);
SELECT name FROM stations WHERE avg_bike_availability > 10 AND location NOT IN ('San Jose');
SELECT name FROM stations WHERE bikes > 10 AND location!= 'San Jose';
SELECT name, latitude, city FROM stations WHERE latitude = (SELECT MIN(latitude) FROM stations);
SELECT name, latitude, city FROM stations WHERE latitude = (SELECT MAX(latitude) FROM stations);
SELECT date, mean_temperature, mean_humidity FROM weather_data WHERE max_gust_speed IN (SELECT MAX(max_gust_speed) FROM weather_data) ORDER BY max_gust_speed DESC LIMIT 3;
SELECT date, AVG(temperature) AS avg_temp, AVG(humidity) AS mean_humidity FROM weather_data WHERE max_gust_speed IN () SELECT MAX(max_gust_speed) FROM weather_data;
SELECT name, COUNT(*) FROM cities GROUP BY name HAVING COUNT(*) >= 15;
SELECT city, COUNT(station) FROM stations GROUP BY city HAVING COUNT(station) >= 15;
SELECT id, name FROM stations WHERE trips_started >= 200;
SELECT id, name FROM start_stations WHERE num_trips >= 200;
SELECT zip_code, AVG(visibility) as avg_visibility FROM weather_data WHERE avg_visibility < 10 GROUP BY zip_code;
SELECT zip_code, AVG(visibility) FROM zip_code_visibility GROUP BY zip_code HAVING AVG(visibility) < 10;
SELECT city, MAX(latitude) as max_latitude FROM stations GROUP BY city ORDER BY max_latitude DESC;
SELECT city, MAX(latitude) as highest_latitude FROM stations GROUP BY city ORDER BY highest_latitude DESC;
SELECT DATE(date) FROM cloud_cover_rates ORDER BY cloud_cover_rate DESC LIMIT 5;
SELECT date, MAX(cloud_cover) as max_cloud_cover FROM weather_data WHERE cloud_cover > 5 GROUP BY date ORDER BY max_cloud_cover DESC LIMIT 5;
SELECT id, duration FROM trips ORDER BY duration DESC LIMIT 3;
SELECT id, MAX(duration) FROM trips GROUP BY id;
SELECT station_id, longitude, AVG(duration) FROM trips GROUP BY station_id;
SELECT name, longitude, AVG(duration) FROM start_station_trips GROUP BY name, longitude;
SELECT station_id, latitude, MIN(duration) FROM trips WHERE end_station = station_id;
SELECT name, latitude, MIN(duration) FROM end_stations GROUP BY name;
SELECT DISTINCT station_id FROM trips WHERE duration < 100;
SELECT start_station FROM trips WHERE duration < 100;
SELECT zip_code FROM weather_data WHERE max_dew_point < 70;
SELECT zip_code FROM weather_data WHERE max_dew_point < 70;
SELECT id FROM trips WHERE duration >= (SELECT AVG(duration) FROM trips WHERE zipcode = 94103);
SELECT trip_id FROM trips WHERE duration = (SELECT AVG(duration) FROM trips WHERE zip_code = 94103);
SELECT date FROM sea_level_pressure WHERE mean_sea_level_pressure BETWEEN 30.3 AND 31;
SELECT date FROM sea_level_data WHERE average_pressure BETWEEN 30.3 AND 31;
SELECT MIN(MAX(temperature) - MIN(temperature)) AS diff, MIN(temperature) AS min_temp, MAX(temperature) AS max_temp, COUNT(*) AS count FROM weather_data WHERE date = "2021-01-01";
SELECT DATE_FORMAT(date, '%Y-%m-%d') AS date, MIN(temperature_range) AS min_range FROM weather_data WHERE temperature_range = (SELECT MIN(temperature_range) FROM weather_data);
SELECT id, name FROM stations WHERE bikes > 12;
SELECT id, name FROM stations WHERE bikes > 12;
SELECT zip_code FROM zip_code WHERE avg_humidity < 70 AND num_trips >= 100;
SELECT zip_code, AVG(mean_humidity) FROM zip_code_data WHERE mean_humidity < 70 AND num_trips >= 100;
SELECT name FROM stations WHERE city = 'Palo Alto' AND ending_point_count < 100;
SELECT name FROM stations WHERE location = 'Palo Alto' AND ending_point IS NULL;
SELECT COUNT(*) FROM trips WHERE start_city = 'Mountain View' AND end_city = 'Palo Alto';
SELECT COUNT(*) FROM trips WHERE start_station = 'Mountain View' AND end_station = 'Palo Alto';
SELECT AVG(latitude), AVG(longitude) FROM trips WHERE start_point IS NOT NULL;
SELECT AVG(latitude) AS avg_latitude, AVG(longitude) AS avg_longitude FROM trips WHERE start_station IS NOT NULL;
SELECT COUNT(*) FROM books;
SELECT author FROM books ORDER BY author ASC;
SELECT title FROM books ORDER BY issues ASC;
SELECT title FROM books WHERE writer!= 'Elaine Lee';
SELECT title, issues FROM books;
SELECT date, price FROM publications ORDER BY price DESC;
SELECT DISTINCT publisher FROM publications WHERE price > 5000000;
SELECT publisher FROM publication WHERE price = (SELECT MAX(price) FROM publication);
SELECT publication_date FROM publications ORDER BY price ASC LIMIT 3;
SELECT title, publication_date FROM books;
SELECT * FROM writers WHERE price > 4000000;
SELECT title FROM books ORDER BY price DESC;
SELECT publisher FROM publications GROUP BY publisher HAVING COUNT(*) > 1;
SELECT publisher, COUNT(*) FROM publications GROUP BY publisher;
SELECT COUNT(*) FROM publications GROUP BY publication_date ORDER BY COUNT(*) DESC LIMIT 1;
SELECT writer_name FROM books GROUP BY writer_name HAVING COUNT(*) > 1;
SELECT title FROM books WHERE is_published = 0;
SELECT publisher FROM publications WHERE price > 10000000 AND price < 5000000;
SELECT COUNT(DISTINCT publication_date) FROM books;
SELECT COUNT(DISTINCT publication_date) FROM records;
SELECT price FROM publications WHERE publisher IN ('Person', 'Wiley');
SELECT COUNT(*) FROM actors;
SELECT COUNT(*) FROM actors;
SELECT name FROM actors ORDER BY name ASC;
SELECT name FROM actors ORDER BY name ASC;
SELECT character, duration FROM actors;
SELECT actor, CHAR(actor) AS character, duration FROM characters;
SELECT name FROM actors WHERE age < 20;
SELECT name FROM actors WHERE age < 20;
SELECT name, age FROM actors ORDER BY age DESC;
SELECT * FROM actors ORDER BY age DESC;
SELECT DURATION(actor_birth_date) FROM actors WHERE actor_birth_date < '1900-01-01' ORDER BY actor_birth_date ASC LIMIT 1;
SELECT MAX(age) FROM actors;
SELECT name FROM musicals WHERE nominee = 'Bob Fosse';
SELECT name FROM musicals WHERE nominee = 'Bob Fosse';
SELECT DISTINCT nominee FROM musicals WHERE award!= 'Tony Award';
SELECT DISTINCT nominee FROM musicals WHERE award!= 'Tony Award';
SELECT actor_name, musical_name FROM actors_musicals;
SELECT actor_name, musical_name FROM actors_and_musicals;
SELECT name FROM actors WHERE musical = 'The Phantom of the Opera';
SELECT actor_name FROM actors WHERE musical_title = 'The Phantom of the Opera';
SELECT name FROM actors WHERE musical_award_year > 2000 ORDER BY musical_award_year DESC;
SELECT name, year FROM musical WHERE award_year > 2000 ORDER BY award_year DESC;
SELECT musical_name, COUNT(actor_name) FROM musicals GROUP BY musical_name;
SELECT musical, COUNT(actor) FROM actors GROUP BY musical;
SELECT name FROM musicals WHERE actors >= 3;
SELECT name FROM musicals WHERE num_actors >= 3;
SELECT nominees.name, COUNT(nominees.id) as num_nominated FROM nominees JOIN musicals ON nominees.id = musicals.nominee_id GROUP BY nominees.name;
SELECT nominee, COUNT(*) FROM musical_nominations GROUP BY nominee;
SELECT nominee, COUNT(*) FROM nominations GROUP BY nominee ORDER BY COUNT(*) DESC LIMIT 1;
SELECT nominee, COUNT(nominee) as num_nominated FROM musical_nominees GROUP BY nominee ORDER BY num_nominated DESC LIMIT 1;
SELECT musical_name, COUNT(*) as count FROM musicals GROUP BY musical_name ORDER BY count DESC LIMIT 10;
SELECT musical_name, COUNT(*) as frequency FROM musicals GROUP BY musical_name ORDER BY frequency DESC LIMIT 1;
SELECT name FROM nominees WHERE num_nominated > 2;
SELECT name FROM nominees WHERE nomination_count > 2;
SELECT name FROM musicals WHERE actors = NULL;
SELECT name FROM musicals WHERE no_actors = true;
SELECT * FROM nominees WHERE award1 = 'Tony Award' AND award2 = 'Drama Desk Award';
SELECT name FROM nominees WHERE Tony_nomination = 'Yes' AND Drama_nomination = 'Yes';
SELECT * FROM musical WHERE award IN ('Bob Fosse', 'Cleavant Derricks');
SELECT * FROM nominees WHERE award_name IN ('Bob Fosse', 'Cleavant Derricks');
SELECT email FROM users WHERE name = 'Mary';
SELECT partition_id FROM users WHERE name = 'Iron Man';
SELECT COUNT(*) FROM users;
SELECT user_id, COUNT(*) FROM users GROUP BY user_id;
SELECT user_id, COUNT(*) FROM users GROUP BY user_id;
SELECT COUNT(*) FROM tweets WHERE record_id =?;
SELECT COUNT(*) FROM users WHERE posted_tweets > 0;
SELECT name, email FROM users WHERE name LIKE '%Swift%';
SELECT name FROM users WHERE email LIKE '%superstar%' OR email LIKE '%edu%';
SELECT text FROM tweets WHERE topic = 'intern';
SELECT name, email FROM users WHERE followers > 1000;
SELECT name FROM users WHERE followers > (SELECT followers FROM users WHERE name = 'Tyler Swift');
SELECT name, email FROM users WHERE followers > 1;
SELECT name FROM users WHERE id IN (SELECT user_id FROM tweets GROUP BY user_id HAVING COUNT(*) > 1);
SELECT id FROM users WHERE id IN (SELECT id FROM users WHERE name = 'Mary') AND id IN (SELECT id FROM users WHERE name = 'Susan');
SELECT id FROM users WHERE id IN (SELECT id FROM users WHERE name = 'Mary' OR name = 'Susan');
SELECT name FROM users ORDER BY followers DESC LIMIT 1;
SELECT name, email FROM users WHERE followed_by_least_people = 1;
SELECT name, COUNT(*) as followers FROM users GROUP BY name ORDER BY followers DESC;
SELECT name FROM users ORDER BY COUNT(*) DESC LIMIT 5;
SELECT text FROM tweets ORDER BY date;
SELECT name, COUNT(tweet_id) as num_tweets FROM user_tweets GROUP BY name;
SELECT name, partition_id FROM users WHERE COUNT(*) < 2;
SELECT name, COUNT(*) FROM tweets GROUP BY name HAVING COUNT(*) > 1;
SELECT AVG(followers) FROM users WHERE followers IS NULL;
SELECT AVG(followers) FROM users WHERE tweets > 0;
SELECT MAX(followers) AS max_followers, SUM(followers) AS total_followers FROM users GROUP BY users;
SELECT name FROM catalog;
SELECT name FROM catalog;
SELECT DISTINCT ATTRIBUTE_TYPE FROM attribute_definition WHERE COUNT(attribute_definition.attribute_type) > 3;
SELECT attribute_name, data_type FROM attributes WHERE data_type > 3;
SELECT data_type(attribute_name) FROM attributes WHERE attribute_name = 'Green';
SELECT data_type FROM attributes WHERE name = 'Green';
SELECT name, level FROM catalog WHERE level BETWEEN 5 AND 10;
SELECT name, level FROM catalog WHERE level BETWEEN 5 AND 10;
SELECT * FROM catalog_publishers WHERE name LIKE '%Murray%';
SELECT * FROM catalog_publishers WHERE name LIKE '%Murray%';
SELECT catalog_publisher, COUNT(catalog_id) FROM catalogs GROUP BY catalog_publisher ORDER BY COUNT(catalog_id) DESC LIMIT 1;
SELECT publisher FROM catalogs GROUP BY publisher ORDER BY COUNT(*) DESC LIMIT 1;
SELECT name, publication_date FROM catalogs WHERE catalog_level > 5;
SELECT name, publication_date FROM catalogs WHERE catalog_level_number > 5;
SELECT name FROM catalog WHERE possessed ='most';
SELECT name FROM catalog WHERE attribute_name = (SELECT attribute_name FROM catalog GROUP BY attribute_name ORDER BY COUNT(*) DESC LIMIT 1);
SELECT catalog_name FROM catalogs ORDER BY price DESC LIMIT 1;
SELECT name FROM catalog WHERE price = (SELECT MAX(price) FROM catalog);
SELECT catalog_name FROM catalogs WHERE price = (SELECT MIN(price) FROM catalogs);
SELECT catalog_name FROM catalogs WHERE price = (SELECT MIN(price) FROM catalogs);
SELECT AVG(price) AS avg_price, MIN(price) AS min_price FROM products;
SELECT AVG(price) AS avg_price, MIN(price) AS min_price FROM products;
SELECT name FROM product WHERE height = (SELECT MAX(height) FROM product);
SELECT catalog_entry_name FROM catalog_content WHERE height = (SELECT MAX(height) FROM catalog_content);
SELECT name FROM products WHERE capacity = (SELECT MIN(capacity) FROM products);
SELECT catalog_name FROM catalog WHERE capacity = (SELECT MIN(capacity) FROM catalog);
SELECT name FROM products WHERE stock_number LIKE '2%';
SELECT catalog_name FROM catalog WHERE product_stock_number LIKE '2%';
SELECT name FROM catalog WHERE level = 8;
SELECT name FROM catalog WHERE level = 8;
SELECT name FROM products WHERE length < 3 OR height > 5;
SELECT name FROM catalog WHERE length(name) < 3 OR length(name) > 5;
SELECT name, attribute_id FROM attribute_definitions WHERE attribute_value = 0;
SELECT attribute_name, attribute_id FROM attribute_definitions WHERE attribute_value = 0;
SELECT name, capacity FROM products WHERE price > 700;
SELECT catalog_name, capacity FROM catalog WHERE price > 700;
SELECT DATE(Revision_Date) AS Date, COUNT(Revision_ID) AS Count FROM Revisions GROUP BY Date HAVING Count > 1;
SELECT DISTINCT day FROM revisions WHERE revisions > 1;
SELECT COUNT(*) FROM products;
SELECT COUNT(*) FROM catalog_contents;
SELECT * FROM products WHERE next_entry_id > 8;
SELECT catalog_entry_name FROM products WHERE next_entry_id > 8;
SELECT COUNT(*) FROM aircrafts;
SELECT COUNT(*) FROM aircrafts;
SELECT name, distance FROM aircrafts;
SELECT name, distance FROM airplanes;
SELECT id FROM aircrafts WHERE distance > 1000;
SELECT id FROM aircrafts WHERE distance > 1000;
SELECT COUNT(*) FROM aircrafts WHERE distance BETWEEN 1000 AND 5000;
SELECT COUNT(*) FROM aircrafts WHERE distance BETWEEN 1000 AND 5000;
SELECT name, distance FROM aircraft WHERE id = 12;
SELECT name, distance FROM aircraft WHERE id = 12;
SELECT MIN(distance), AVG(distance), MAX(distance) FROM aircrafts;
SELECT MIN(distance), AVG(distance), MAX(distance) FROM aircrafts;
SELECT id, name FROM aircraft WHERE distance = (SELECT MAX(distance) FROM aircraft);
SELECT id, name FROM aircraft WHERE distance = (SELECT MAX(distance) FROM aircraft);
SELECT name FROM aircrafts ORDER BY distance ASC LIMIT 3;
SELECT name FROM aircrafts ORDER BY length ASC LIMIT 3;
SELECT name FROM aircrafts WHERE distance > (SELECT AVG(distance) FROM aircrafts);
SELECT name FROM aircrafts WHERE distance > (SELECT AVG(distance) FROM aircrafts);
SELECT COUNT(*) FROM employees;
SELECT COUNT(*) FROM employees;
SELECT name, salary FROM employees ORDER BY salary;
SELECT name, salary FROM employees ORDER BY salary DESC;
SELECT id FROM employees WHERE salary >= 100000;
SELECT id FROM employees WHERE salary >= 100000;
SELECT COUNT(*) FROM employees WHERE salary BETWEEN 100000 AND 200000;
SELECT COUNT(*) FROM employees WHERE salary BETWEEN 100000 AND 200000;
SELECT name, salary FROM employees WHERE id = 242518965;
SELECT name, salary FROM employee WHERE id = 242518965;
SELECT AVG(salary) AS average_salary, MAX(salary) AS max_salary FROM employees;
SELECT AVG(salary) AS average_salary, MAX(salary) AS largest_salary FROM employees;
SELECT id, name FROM employee WHERE salary = (SELECT MAX(salary) FROM employee);
SELECT id, name FROM employee WHERE salary = (SELECT MAX(salary) FROM employee);
SELECT name FROM employees ORDER BY salary ASC LIMIT 3;
SELECT name FROM employees ORDER BY salary ASC LIMIT 3;
SELECT name FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);
SELECT name FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);
SELECT id, salary FROM employees WHERE name = 'Mark Young';
SELECT id, salary FROM employee WHERE name = 'Mark Young';
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT flight_number, origin, destination FROM flights ORDER BY origin ASC;
SELECT flight_number, origin, destination FROM flights ORDER BY departure_city ASC;
SELECT flight_number FROM flights WHERE origin = 'Los Angeles';
SELECT COUNT(*) FROM flights WHERE origin = 'Los Angeles';
SELECT origin FROM flights WHERE destination = 'Honolulu';
SELECT * FROM flights WHERE destination = 'Honolulu';
SELECT departure_date, arrival_date FROM flights WHERE origin = 'Los Angeles' AND destination = 'Honolulu';
SELECT departure_date, arrival_date FROM flights WHERE origin = 'LA' AND destination = 'Honolulu';
SELECT flight_number FROM flights WHERE distance > 2000;
SELECT COUNT(*) FROM flights WHERE distance > 2000;
SELECT AVG(price) FROM flights WHERE origin = 'Los Angeles' AND destination = 'Honolulu';
SELECT AVG(price) FROM flights WHERE origin = 'LA' AND destination = 'Honolulu';
SELECT origin, destination FROM flights WHERE price > 300;
SELECT origin, destination FROM flights WHERE price > 300;
SELECT flight_number, distance FROM flights WHERE price = (SELECT MAX(price) FROM flights);
SELECT flight_number, distance FROM flights WHERE price = (SELECT MAX(price) FROM flights);
SELECT flight_number FROM flights ORDER BY distance ASC LIMIT 3;
SELECT MIN(distance) FROM flights;
SELECT AVG(distance) AS avg_distance, AVG(price) AS avg_price FROM flights WHERE origin = 'Los Angeles' AND destination = 'New York';
SELECT AVG(distance) AS avg_distance, AVG(price) AS avg_price FROM flights WHERE origin = 'LA';
SELECT origin, COUNT(*) FROM flights GROUP BY origin;
SELECT origin, COUNT(*) FROM flights GROUP BY origin;
SELECT destination, COUNT(*) FROM flights GROUP BY destination;
SELECT destination, COUNT(*) FROM flights GROUP BY destination;
SELECT origin, COUNT(*) FROM flights GROUP BY origin ORDER BY COUNT(*) DESC LIMIT 1;
SELECT place, COUNT(*) as num_flights FROM flights WHERE origin = 'New York' GROUP BY place ORDER BY num_flights DESC LIMIT 1;
SELECT destination, COUNT(*) FROM flights GROUP BY destination ORDER BY COUNT(*) ASC LIMIT 1;
SELECT destination FROM flights GROUP BY destination HAVING COUNT(*) = (SELECT MIN(COUNT(*) FROM flights) FROM flights GROUP BY destination);
SELECT aircraft_name FROM flights WHERE flight_number = 99;
SELECT name FROM aircraft WHERE flight_number = '99';
SELECT flight_number FROM flights WHERE aircraft_type = 'Airbus A340-300';
SELECT flight_number FROM aircraft WHERE type = 'Airbus A340-300';
SELECT aircraft_name, COUNT(flights) FROM aircraft GROUP BY aircraft_name;
SELECT name, COUNT(*) FROM aircraft GROUP BY name;
SELECT name FROM aircraft WHERE num_flights >= 2;
SELECT name FROM aircrafts WHERE num_flights >= 2;
SELECT COUNT(*) FROM employees WHERE certificate = 'Yes';
SELECT COUNT(DISTINCT employee_id) FROM employees WHERE certificate_status = 'certified';
SELECT id FROM employees WHERE certificate IS NULL;
SELECT id FROM employees WHERE certificate = NULL;
SELECT name FROM aircrafts WHERE cert_holder = 'John Williams';
SELECT name FROM aircrafts WHERE name = 'John Williams' AND has_certificate = true;
SELECT name FROM employees WHERE certificate = 'Boeing 737-800';
SELECT name FROM employees WHERE certificate = 'Boeing 737-800';
SELECT name FROM employees WHERE cert_type = 'Boeing 737-800' AND cert_type = 'Airbus A340-300';
SELECT name FROM employees WHERE aircraft_type = 'Boeing 737-800' AND aircraft_type = 'Airbus A340-300';
SELECT name FROM employees WHERE certificate_of_boeing_737_800 = 'No';
SELECT name FROM employees WHERE certification!= 'Boeing 737-800';
SELECT name FROM aircraft WHERE num_certificates = (SELECT MIN(num_certificates) FROM aircraft);
SELECT name FROM aircraft WHERE certification_count = (SELECT MIN(certification_count) FROM aircraft);
SELECT name, distance FROM aircrafts WHERE distance > 5000 AND certificate_count >= 5;
SELECT name, distance FROM aircraft WHERE distance > 5000 AND people > 5;
SELECT name, salary FROM employee WHERE aircraft_certificates = (SELECT MAX(aircraft_certificates) FROM employee);
SELECT AVG(salary) as avg_salary, name FROM employees WHERE certification = 'certified_to_fly' ORDER BY certification ASC LIMIT 1;
SELECT name, salary FROM employee WHERE aircraft_certificates > 5000 GROUP BY name ORDER BY COUNT(aircraft_certificates) DESC LIMIT 1;
SELECT name, salary FROM employee WHERE cert_count > 5000 ORDER BY cert_count DESC LIMIT 1;
SELECT COUNT(*) FROM allergies;
SELECT COUNT(*) FROM allergy_entries;
SELECT COUNT(DISTINCT allergy_type) FROM allergies;
SELECT COUNT(DISTINCT allergy) FROM allergies;
SELECT allergy_type FROM allergies;
SELECT allergy_type FROM allergies;
SELECT allergy, allergy_type FROM allergies;
SELECT allergies, type FROM allergies;
SELECT allergies.name, allergies.type FROM allergies WHERE allergies.type = 'food';
SELECT food_allergy FROM allergies;
SELECT allergy_type FROM allergies WHERE animal_type = 'Cat';
SELECT allergy_type FROM allergies WHERE animal_type = 'cat';
SELECT COUNT(*) FROM allergies WHERE type = 'animal';
SELECT COUNT(*) FROM allergies WHERE animal_type = 'animal';
SELECT allergy_type, COUNT(*) FROM allergies GROUP BY allergy_type;
SELECT allergy_type, COUNT(*) FROM allergies GROUP BY allergy_type;
SELECT allergy_type, COUNT(*) FROM allergies GROUP BY allergy_type ORDER BY COUNT(*) DESC LIMIT 1;
The most common allergy type is pollen.;
SELECT allergy_type, COUNT(*) as count FROM allergies GROUP BY allergy_type ORDER BY count ASC LIMIT 1;
The allergy type with the lowest count is the least common.;
SELECT COUNT(*) FROM students;
SELECT COUNT(*) FROM students;
SELECT first_name, last_name FROM students;
SELECT first_name, last_name FROM students;
SELECT COUNT(DISTINCT advisor_name) FROM advisors;
SELECT COUNT(*) FROM advisors;
SELECT * FROM majors;
SELECT * FROM majors;
SELECT city FROM students;
SELECT city FROM students;
SELECT first_name, last_name, age FROM students WHERE sex = 'F';
SELECT full_name, age FROM students WHERE sex = 'F';
SELECT id FROM students WHERE gender = 'Male';
SELECT student_id FROM students WHERE gender = 'Male';
SELECT COUNT(*) FROM students WHERE age = 18;
SELECT COUNT(*) FROM students WHERE age = 18;
SELECT student_id FROM students WHERE age > 20;
SELECT student_id FROM students WHERE age > 20;
SELECT city FROM students WHERE last_name = 'Kim';
SELECT city FROM students WHERE family_name = 'Kim';
SELECT * FROM students WHERE id = 1004;
SELECT * FROM students WHERE student_id = 1004;
SELECT COUNT(*) FROM students WHERE city = 'HKG' OR city = 'CHI';
SELECT COUNT(*) FROM students WHERE city IN ('HKG', 'CHI');
SELECT MIN(age), AVG(age), MAX(age) FROM students;
SELECT MIN(age), AVG(age), MAX(age) FROM students;
SELECT last_name FROM students WHERE age = (SELECT MIN(age) FROM students);
SELECT last_name FROM students ORDER BY age ASC LIMIT 1;
SELECT student_id FROM students ORDER BY age DESC LIMIT 1;
SELECT student_id FROM students ORDER BY age DESC LIMIT 1;
SELECT major, COUNT(*) FROM students GROUP BY major;
SELECT major, COUNT(*) FROM students GROUP BY major;
SELECT major, COUNT(*) as num_students FROM students GROUP BY major ORDER BY num_students DESC LIMIT 1;
SELECT name FROM students WHERE major = 'Computer Science' ORDER BY name ASC LIMIT 1;
SELECT age, COUNT(*) FROM students GROUP BY age;
SELECT age, COUNT(*) FROM students GROUP BY age;
SELECT AVG(age) FROM students WHERE gender ='male' OR gender = 'female';
SELECT AVG(age) FROM students WHERE gender ='male' OR gender = 'female';
SELECT city, COUNT(*) FROM students GROUP BY city;
SELECT city, COUNT(*) FROM students GROUP BY city;
SELECT advisor, COUNT(student) FROM students GROUP BY advisor;
SELECT advisor_id, COUNT(student_id) FROM students GROUP BY advisor_id;
SELECT advisor_id, COUNT(student_id) as student_count FROM students GROUP BY advisor_id ORDER BY student_count DESC LIMIT 1;
SELECT advisor_id, COUNT(student_id) as num_students FROM students GROUP BY advisor_id ORDER BY num_students DESC LIMIT 1;
SELECT COUNT(*) FROM students WHERE allergies = 'cat';
SELECT COUNT(*) FROM students WHERE allergies = 'cat';
SELECT student_id FROM students WHERE allergies > 2;
SELECT id FROM students WHERE allergies > 1;
SELECT student_id FROM students WHERE allergies IS NULL;
SELECT * FROM students WHERE allergies = 0;
SELECT COUNT(*) FROM students WHERE gender = 'female' AND allergies ='milk' OR allergies = 'egg';
SELECT COUNT(*) FROM students WHERE gender = 'female' AND allergy ='milk' OR allergy = 'eggs';
SELECT COUNT(*) FROM students WHERE food_allergy = 'Yes';
SELECT COUNT(*) FROM students WHERE food_allergy = 'Yes';
SELECT allergy, COUNT(*) FROM allergies GROUP BY allergy ORDER BY COUNT(*) DESC LIMIT 1;
The most common allergy is pollen.;
SELECT allergy, COUNT(*) FROM allergies GROUP BY allergy;
SELECT allergy, COUNT(*) FROM students GROUP BY allergy;
SELECT allergy_type, COUNT(*) FROM students WHERE allergy_type IS NOT NULL GROUP BY allergy_type;
SELECT allergy_type, COUNT(*) FROM students GROUP BY allergy_type;
SELECT last_name, age FROM students WHERE allergy_to_milk = 'Yes' AND allergy_to_cat = 'Yes';
SELECT last_name, age FROM students WHERE allergies ='milk' AND allergies = 'cat';
SELECT allergies.allergy_name, allergies.allergy_type FROM allergies WHERE student_id = (SELECT student_id FROM students WHERE first_name = 'Lisa') ORDER BY allergies.allergy_name;
SELECT allergy_name FROM allergies WHERE patient_name = 'Lisa' ORDER BY allergy_name;
SELECT first_name, gender FROM students WHERE allergy_to_milk = 'Yes' AND allergy_to_cat = 'No';
SELECT first_name, gender FROM students WHERE allergy_to_milk = 'Yes' AND can_put_up_with_cats = 'Yes';
SELECT AVG(age) FROM students WHERE allergies LIKE '%food%' AND allergies LIKE '%animal%';
SELECT AVG(age) FROM students WHERE allergies = 'food' OR allergies = 'animal';
SELECT first_name, last_name FROM students WHERE food_allergy IS NULL;
SELECT full_name FROM students WHERE allergies = NULL;
SELECT COUNT(*) FROM students WHERE sex = 'M' AND food_allergy ='some';
SELECT COUNT(*) FROM students WHERE sex = 'M' AND allergy = 'any';
SELECT first_name, city FROM students WHERE allergy_to_milk = 'yes' OR allergy_to_cat = 'yes';
SELECT DISTINCT first_name, city FROM students WHERE allergy IN ('milk', 'cat');
SELECT COUNT(*) FROM students WHERE age > 18 AND allergy_to_food = 0 AND allergy_to_animal = 0;
SELECT COUNT(*) FROM students WHERE age > 18 AND allergy_to_food = 0 AND allergy_to_animal = 0;
SELECT first_name, major FROM students WHERE major NOT LIKE '%soy%';
SELECT first_name, major FROM students WHERE can_consume_soy = 'Yes';
SELECT country, COUNT(invoice_id) as invoices FROM invoices GROUP BY country ORDER BY invoices DESC LIMIT 5;
SELECT country, COUNT(invoice_id) as invoices FROM invoices GROUP BY country ORDER BY invoices DESC LIMIT 5;
SELECT country, gross_invoice_size FROM countries ORDER BY gross_invoice_size DESC LIMIT 8;
SELECT name, SUM(invoice_size) as total_invoice_size FROM invoices GROUP BY name ORDER BY total_invoice_size DESC LIMIT 8;
SELECT country_name, AVG(invoice_size) as avg_invoice_size FROM invoices GROUP BY country_name ORDER BY avg_invoice_size DESC LIMIT 10;
SELECT country, AVG(invoice_size) as avg_invoice_size FROM invoices GROUP BY country ORDER BY avg_invoice_size DESC LIMIT 5;
SELECT customer_name, customer_last_name FROM customers ORDER BY purchase_date DESC LIMIT 5;
SELECT first_name, last_name FROM customers WHERE purchase_date = (SELECT MAX(purchase_date) FROM customers) ORDER BY purchase_date DESC LIMIT 5;
SELECT customer_name, first_name, last_name, COUNT(*) as total_orders FROM orders GROUP BY customer_name ORDER BY total_orders DESC LIMIT 10;
SELECT customer_name, COUNT(*) as total_orders FROM orders GROUP BY customer_name ORDER BY total_orders DESC LIMIT 10;
SELECT customer_name, first_name, last_name, total_sales FROM customers ORDER BY total_sales DESC LIMIT 10;
SELECT customer_name, first_name, last_name, sales FROM customers ORDER BY sales DESC LIMIT 10;
SELECT genre, COUNT(*) as total_tracks FROM tracks GROUP BY genre ORDER BY total_tracks DESC LIMIT 5;
SELECT genre, COUNT(track_id) AS num_tracks, track_name FROM tracks GROUP BY genre ORDER BY num_tracks DESC LIMIT 5;
SELECT album_title FROM albums;
SELECT title FROM albums;
SELECT * FROM Albums ORDER BY AlbumTitle ASC;
SELECT title FROM albums ORDER BY title ASC;
SELECT * FROM Albums WHERE title LIKE 'A%' ORDER BY title ASC;
SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title ASC;
SELECT customer_name, invoice_price FROM invoices ORDER BY invoice_price ASC LIMIT 10;
SELECT first_name, last_name FROM customers WHERE invoice_total < 10 ORDER BY invoice_total ASC LIMIT 1;
SELECT SUM(invoice_amount) FROM invoices WHERE city = 'Chicago, IL';
SELECT SUM(amount) FROM invoices WHERE city = 'Chicago' AND state = 'Illinois';
SELECT COUNT(*) FROM invoices WHERE city = 'Chicago, IL';
SELECT COUNT(*) FROM Invoices WHERE city = 'Chicago, IL';
SELECT COUNT(*) FROM invoices WHERE country = 'US' GROUP BY state;
SELECT state, COUNT(invoice_id) FROM invoices GROUP BY state;
SELECT state FROM invoices GROUP BY state ORDER BY COUNT(state) DESC LIMIT 1;
SELECT state FROM invoices GROUP BY state ORDER BY COUNT(state) DESC LIMIT 1;
SELECT COUNT(invoice_number) AS invoices, SUM(invoice_total) AS total FROM invoices WHERE state = 'California';
SELECT COUNT(invoice_id) as invoices, SUM(amount) as total_money_billed FROM invoices WHERE state = 'CA';
SELECT album_name FROM Aerosmith_albums;
SELECT title FROM albums WHERE artist = 'Aerosmith';
SELECT COUNT(*) FROM Billy_Cobham_Albums;
SELECT COUNT(*) FROM albums WHERE artist = 'Billy Cobam';
Amazon SQL Query: SELECT company FROM customers WHERE name = 'Eduardo Martins';
SELECT company FROM customers WHERE name = 'Eduardo Martins';
SELECT email, phone FROM users WHERE name = 'Astrid Gruber';
SELECT email, phone FROM customers WHERE name = 'Astrid Gruber';
SELECT COUNT(*) FROM customers WHERE city = 'Prague';
SELECT COUNT(*) FROM customers WHERE city = 'Prague';
SELECT COUNT(*) FROM customers WHERE state = 'CA';
SELECT COUNT(*) FROM customers WHERE state = 'California';
SELECT country FROM people WHERE name = 'Roberto Almeida';
Brazil SELECT country FROM people WHERE name = 'Roberto Almeida' SELECT country FROM people WHERE name = 'Roberto Almeida' END;
SELECT album_name FROM albums WHERE artist_name LIKE '%Led%';
SELECT album_title FROM albums WHERE artist_name LIKE '%Led%';
SELECT COUNT(*) FROM customers WHERE name = 'Steve Johnson';
SELECT COUNT(*) FROM customers WHERE name = 'Steve Johnson';
SELECT title, phone, hire_date FROM employees WHERE name = 'Nancy Edwards';
SELECT title, phone_number, hire_date FROM employees WHERE name = 'Nancy Edwards';
SELECT first_name, last_name FROM employees WHERE manager_name = 'Nancy Edwards';
SELECT first_name, last_name FROM employees WHERE manager_id = (SELECT id FROM managers WHERE name = 'Nancy Edwards');
SELECT address FROM employees WHERE name = 'Nancy Edwards';
SELECT address FROM users WHERE name = 'Nancy Edwards';
SELECT full_name FROM employee WHERE supported_customers = (SELECT MAX(supported_customers) FROM employee);
SELECT full_name FROM employee WHERE customers_count = (SELECT MAX(customers_count) FROM employee);
SELECT COUNT(*) FROM employees WHERE country = 'Canada';
SELECT COUNT(*) FROM employees WHERE country = 'Canada';
SELECT phone_number FROM employees WHERE name = 'Nancy Edwards';
SELECT phone_number FROM users WHERE name = 'Nancy Edwards';
SELECT first_name, last_name FROM employee WHERE age = (SELECT MIN(age) FROM employee);
SELECT first_name, last_name FROM employees WHERE age = (SELECT MIN(age) FROM employees);
SELECT first_name, last_name, hours_worked FROM employee ORDER BY hours_worked DESC LIMIT 10;
SELECT first_name, last_name FROM employees ORDER BY tenure DESC LIMIT 10;
SELECT COUNT(*) FROM Employees WHERE title = 'IT Staff' AND city = 'New York';
SELECT city, COUNT(*) FROM employees WHERE department = 'IT' GROUP BY city;
SELECT first_name, last_name, COUNT(*) FROM employees GROUP BY first_name, last_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT first_name, last_name, COUNT(*) FROM employees GROUP BY first_name, last_name HAVING COUNT(*) > 1;
SELECT COUNT(*) FROM orders WHERE customer_id = 'Lucas Mancini';
SELECT COUNT(*) FROM invoices WHERE customer_id = 'Luca Mancini';
SELECT SUM(amount) FROM transactions WHERE name = 'Lucas Mancini';
SELECT SUM(amount) FROM transactions WHERE name = 'Lucas Mancini';
SELECT media_type FROM media_types;
SELECT media_type FROM media_types;
SELECT genre_type FROM genres;
SELECT genre_name FROM genres;
SELECT playlist_name FROM playlist;
SELECT playlist_name FROM playlists;
The composer of track Fast As a Shark is T-Pain.;
SELECT composer_name FROM tracks WHERE track_name = 'Fast As a Shark';
SELECT * FROM track WHERE name = 'Fast As a Shark';
SELECT COUNT(*) FROM movies WHERE title = 'Fast As a Shark';
SELECT track_name FROM tracks WHERE genre = 'Rock';
SELECT track_name FROM tracks WHERE genre = 'Rock';
SELECT title FROM album WHERE track_name = 'Balls to the Wall';
SELECT album_name FROM albums WHERE album_name = 'The Wall' AND track_name = 'Ball to the Wall';
SELECT name FROM tracks WHERE album_name = 'Balls to the Wall';
SELECT track_name FROM album_tracks WHERE album_name = 'Balls to the Wall';
SELECT title FROM albums WHERE num_tracks > 10;
SELECT album_name FROM albums WHERE num_tracks > 10;
SELECT track_name FROM tracks WHERE genre = 'Rock' AND media_type = 'MPEG audio';
SELECT track_name FROM Rock_tracks WHERE file_type = 'MPEG';
SELECT track_name FROM tracks WHERE genre = 'Rock' OR media_type = 'MPEG audio';
SELECT track_name FROM tracks WHERE genre = 'Rock' AND media_type = 'MPEG';
SELECT track_name FROM tracks WHERE genre IN ('Rock', 'Jazz');
SELECT track_name FROM songs WHERE genre = 'Rock' OR genre = 'Jazz';
SELECT track_name FROM playlists WHERE playlist_name = 'Movies';
SELECT track_name FROM tracks WHERE playlist_name = 'Movies';
SELECT playlist_name FROM playlist WHERE num_tracks > 100;
SELECT playlist_name FROM playlists WHERE num_tracks > 100;
SELECT * FROM tracks WHERE customer_id = 'Daan Peeters';
SELECT track_name FROM tracks WHERE artist_name = 'Dean Peeters';
SELECT SUM(price) FROM products WHERE name = 'Fast As a Shark';
SELECT unit_price FROM songs WHERE title = 'Fast As a Shark';
SELECT name FROM tracks WHERE name IN (SELECT name FROM movies) AND name NOT IN (SELECT name FROM music);
SELECT track_name FROM tracks WHERE track_name IN (SELECT track_name FROM movies) AND track_name NOT IN (SELECT track_name FROM music);
SELECT name FROM tracks WHERE name IN (SELECT name FROM movies) AND name IN (SELECT name FROM music);
SELECT track_name FROM tracks WHERE track_name IN (SELECT track_name FROM movies) AND track_name IN (SELECT track_name FROM music);
SELECT genre, COUNT(track_id) FROM tracks GROUP BY genre;
SELECT genre, COUNT(track_id) FROM tracks GROUP BY genre;
SELECT COUNT(*) FROM editors;
SELECT name FROM editors ORDER BY age ASC;
SELECT name, age FROM editors;
SELECT name FROM editors WHERE age > 25;
SELECT name FROM editors WHERE age = 24 OR age = 25;
SELECT name FROM editors WHERE age = (SELECT MIN(age) FROM editors);
SELECT age, COUNT(*) FROM editors GROUP BY age;
SELECT age FROM editors GROUP BY age ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT theme FROM journals;
SELECT editors.name, theme FROM editors JOIN committees ON editors.id = committees.editor_id JOIN journals ON committees.joint_editor_id = journals.id WHERE committees.theme IS NOT NULL;
SELECT editor_name, journal_theme FROM journal_committee;
SELECT e.name, e.age, j.theme FROM editors e JOIN journals j ON e.editor_id = j.editor_id WHERE e.editor_id IN (SELECT editor_id FROM committees) ORDER BY j.theme ASC;
SELECT name FROM editors WHERE journal_sales > 3000;
SELECT id, name, COUNT(committee_id) as num_committees FROM editors GROUP BY name HAVING num_committees > 0;
SELECT name FROM editors WHERE committee_count >= 2;
SELECT name FROM editors WHERE NOT EXISTS (SELECT 1 FROM journal_committee WHERE editors.name = name);
SELECT date, theme, sales FROM journal WHERE editor NOT IN ('John', 'Jane', 'Bob');
SELECT AVG(sales) FROM journals WHERE editor_work_type = 'Photo';
SELECT COUNT(*) FROM accounts;
SELECT COUNT(*) FROM accounts;
SELECT id, customer_id, name FROM accounts;
SELECT account_id, customer_id, account_name FROM accounts;
SELECT * FROM accounts WHERE name = 338;
SELECT * FROM accounts WHERE name = 338;
SELECT first_name, last_name, phone FROM customers WHERE account_name = 162;
SELECT full_name, phone FROM customers WHERE account_name = 162;
SELECT COUNT(*) FROM accounts WHERE first_name = 'Art' AND last_name = 'Turcotte';
SELECT COUNT(*) FROM accounts WHERE customer_name = 'Art Turcotte';
SELECT customer_id, COUNT(*) FROM customers GROUP BY customer_id;
SELECT COUNT(*) FROM accounts GROUP BY customer_id;
SELECT customer_id, COUNT(*) as num_accounts FROM accounts GROUP BY customer_id ORDER BY num_accounts DESC LIMIT 1;
SELECT customer_id, COUNT(*) FROM accounts GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT customer_first_name, customer_last_name, customer_id FROM customers WHERE customer_id = (SELECT MIN(customer_id) FROM customers) ORDER BY customer_id ASC;
SELECT full_name, customer_id FROM customers WHERE num_accounts = (SELECT MIN(num_accounts) FROM customers);
SELECT COUNT(*) FROM customers WHERE account_status = 'No Account';
SELECT COUNT(*) FROM customers WHERE account_status = 'No';
SELECT first_name, last_name FROM customers WHERE account IS NULL;
SELECT first_name, last_name FROM customers WHERE account_status = 'None';
SELECT DISTINCT first_name, last_name FROM customers WHERE account_status = 'active';
SELECT first_name, last_name FROM customers WHERE account_status = 'active';
SELECT COUNT(*) FROM customers WHERE account_status = 'active';
SELECT COUNT(*) FROM customers WHERE account_status = 'active';
SELECT COUNT(*) FROM customers;
SELECT COUNT(*) FROM customers;
SELECT id, first_name, last_name, phone FROM customers;
SELECT id, full_name, phone FROM customers;
SELECT phone, email FROM customers WHERE first_name = 'Aniyah' AND last_name = 'Feest';
SELECT phone, email FROM customers WHERE first_name = 'Aniyah' AND last_name = 'Feest';
SELECT COUNT(*) FROM customer_cards;
SELECT COUNT(*) FROM customer_cards;
SELECT id, customer_id, card_type_code, card_number FROM cards;
SELECT card_id, customer_id, card_type, card_number FROM customer_card;
SELECT date_valid_from, date_valid_to FROM card WHERE card_number = '4560596484842';
SELECT date FROM cards WHERE number = 4560596484842;
SELECT first_name, last_name, phone FROM customers WHERE card_number = 4560596484842;
SELECT full_name, phone FROM customers WHERE card_number = '4560596484842';
SELECT COUNT(*) FROM cards WHERE customer_id = 'Art Turcotte';
SELECT COUNT(*) FROM cards WHERE first_name = 'Art' AND last_name = 'Turcotte';
SELECT COUNT(*) FROM cards WHERE type = 'debit';
SELECT COUNT(*) FROM customer_cards WHERE type = 'Debit';
SELECT COUNT(*) FROM customers WHERE name = 'Blanche Huels' AND credit_cards > 0;
SELECT COUNT(*) FROM customers WHERE first_name = 'Blanche' AND last_name = 'Huels';
SELECT customer_id, COUNT(*) FROM customers GROUP BY customer_id;
SELECT customer_id, COUNT(*) FROM cards GROUP BY customer_id;
SELECT customer_id, COUNT(*) as num_cards FROM customers GROUP BY customer_id ORDER BY num_cards DESC LIMIT 1;
SELECT id, COUNT(*) as num_cards FROM customers GROUP BY id ORDER BY num_cards DESC LIMIT 1;
SELECT id, first_name, last_name FROM customers WHERE card_count >= 2;
SELECT id, full_name FROM customers WHERE card_count > 1;
SELECT customer_id, first_name, last_name FROM customers WHERE accounts_count = (SELECT MIN(accounts_count) FROM customers);
SELECT id, full_name FROM customer WHERE num_accounts = (SELECT MIN(num_accounts) FROM customer);
SELECT card_type_code, COUNT(*) FROM cards GROUP BY card_type_code;
SELECT card_type, COUNT(*) FROM cards GROUP BY card_type;
SELECT card_type_code, COUNT(*) FROM cards GROUP BY card_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT code FROM card_type WHERE code = (SELECT code FROM card_type GROUP BY code ORDER BY COUNT(*) DESC LIMIT 1);
SELECT card_type_code FROM cards WHERE card_count >= 5;
SELECT code FROM card_type WHERE num_cards >= 5;
SELECT card_type_code, COUNT(*) FROM customers GROUP BY card_type_code;
SELECT card_type, COUNT(*) FROM customers GROUP BY card_type;
SELECT customer_id, firstname FROM customers WHERE credit_card = NULL;
SELECT id, first_name FROM customers WHERE credit_card = NULL;
SELECT card_type_code FROM cards;
SELECT * FROM card_types;
SELECT COUNT(*) FROM cards;
SELECT COUNT(DISTINCT card_type) FROM cards;
SELECT * FROM transactions WHERE type = 'transaction';
SELECT * FROM transactions;
SELECT COUNT(*) FROM transaction_types;
SELECT COUNT(DISTINCT type) FROM transactions;
SELECT AVG(amount) AS avg_amount, SUM(amount) AS total_amount FROM transactions;
SELECT AVG(amount) AS avg_amount, SUM(amount) AS total_amount FROM transactions;
SELECT card_type_code, COUNT(*) FROM transactions GROUP BY card_type_code;
SELECT card_type, COUNT(*) FROM transactions GROUP BY card_type;
SELECT transaction_type, COUNT(*) FROM transactions GROUP BY transaction_type;
SELECT type, COUNT(*) FROM transactions GROUP BY type;
SELECT t.transaction_type, SUM(t.amount) as total_amount FROM transactions t GROUP BY t.transaction_type ORDER BY total_amount DESC LIMIT 1;
SELECT type, SUM(amount) as total_amount FROM transactions GROUP BY type ORDER BY total_amount DESC LIMIT 1;
SELECT account_id, COUNT(*) FROM transactions GROUP BY account_id;
SELECT account_id, COUNT(*) FROM transactions GROUP BY account_id;
SELECT COUNT(*) FROM tracks;
SELECT COUNT(*) FROM tracks;
SELECT name, location FROM tracks;
SELECT name, location FROM tracks;
SELECT name, seating FROM tracks WHERE opening_date > '2000' ORDER BY seating ASC;
SELECT track_name, seating_number FROM tracks WHERE opening_year > 2000 ORDER BY seating_number ASC;
SELECT name, location, seating FROM tracks WHERE opened_date = (SELECT MAX(opened_date) FROM tracks) ORDER BY opened_date DESC LIMIT 1;
SELECT name, location, seating FROM tracks WHERE year = (SELECT MAX(year) FROM tracks);
SELECT MIN(seating), MAX(seating), AVG(seating) FROM tracks;
SELECT MIN(seating), MAX(seating), AVG(seating) FROM tracks;
SELECT name, location, open_year FROM tracks WHERE seating > (SELECT AVG(seating) FROM tracks);
SELECT name, location, year FROM tracks WHERE seating > (SELECT AVG(seating) FROM tracks);
SELECT DISTINCT location FROM tracks;
SELECT location FROM tracks;
SELECT COUNT(*) FROM races;
SELECT COUNT(*) FROM races;
SELECT DISTINCT race_class FROM races;
SELECT DISTINCT race FROM races;
SELECT name, class, date FROM races;
SELECT name, class, date FROM races;
SELECT race_class, COUNT(*) FROM races GROUP BY race_class;
SELECT race_name, COUNT(*) FROM races GROUP BY race_name;
SELECT race_class, COUNT(*) as num_races FROM races GROUP BY race_class ORDER BY num_races DESC LIMIT 1;
SELECT race_class FROM races WHERE race_class = 'Most Common';
SELECT race_class FROM races WHERE race_class >= 2;
SELECT DISTINCT race_name FROM races WHERE num_races > 1;
SELECT name FROM tracks WHERE class = 'GT' AND race = 'N/A';
SELECT track_name FROM tracks WHERE class_name = 'GT';
SELECT track_name FROM races WHERE races_count = 0;
SELECT track_name FROM tracks WHERE race_id IS NULL;
SELECT year FROM tracks WHERE seating >= 5000 AND seating <= 4000;
SELECT year FROM tracks WHERE seating BETWEEN 4000 AND 5000;
SELECT track_name, COUNT(race_id) FROM races GROUP BY track_name;
SELECT track_name, COUNT(race_id) FROM races GROUP BY track_name;
SELECT name FROM track WHERE races = (SELECT MAX(races) FROM track);
SELECT track_name FROM races WHERE race_count = (SELECT MAX(race_count) FROM races);
SELECT name, date, track_name FROM races;
SELECT race_name, race_date, track_name FROM races;
SELECT name, location FROM track WHERE race_count = 1;
SELECT track_name, location FROM races WHERE race_count = 1;
SELECT location FROM tracks WHERE (seats > 90000) AND (seats < 70000);
SELECT location, track_name, num_seats FROM locations WHERE num_seats > 90000 AND num_seats < 70000;
SELECT COUNT(*) FROM Members WHERE Membership_Card = 'Black';
SELECT address, COUNT(*) FROM members GROUP BY address;
SELECT name FROM members WHERE address IN ('Harford', 'Waterbury');
SELECT id, name FROM members WHERE age < 30 OR membership_card = 'black';
SELECT purchase_time, age, address FROM members ORDER BY purchase_time;
SELECT * FROM membership_cards WHERE members > 5;
SELECT address FROM members WHERE age < 30 AND age > 40;
SELECT * FROM members WHERE address = 'Hartford' AND address = 'Waterbury';
SELECT COUNT(*) FROM Members WHERE City = 'Hartford';
SELECT address FROM members WHERE membership_card = 'black';
SELECT shop_address, opening_year FROM shops ORDER BY opening_year;
SELECT AVG(score) AS avg_score, AVG(staff_number) AS avg_staff_number FROM shops;
SELECT id, address FROM shops WHERE score < (SELECT AVG(score) FROM shops);
SELECT address, staff_number FROM shops WHERE happy_hour = 0;
SELECT id, address FROM shops WHERE happy_hour_start_date BETWEEN '2021-05-01' AND '2021-05-31';
SELECT shop_id, COUNT(*) as happy_hours FROM happy_hours GROUP BY shop_id ORDER BY happy_hours DESC LIMIT 1;
SELECT month, COUNT(*) as happy_hours FROM events GROUP BY month ORDER BY happy_hours DESC LIMIT 1;
SELECT month FROM happy_hours WHERE month > 2;
SELECT COUNT(*) FROM Albums;
SELECT COUNT(*) FROM Albums;
SELECT genre_name FROM music_genres;
SELECT genre FROM music_genres;
SELECT * FROM customers WHERE state = 'NY';
SELECT * FROM customers WHERE state = 'NY';
SELECT first_name, last_name FROM employees WHERE city = 'Calgary';
SELECT first_name, last_name FROM employees WHERE city = 'Calgary';
SELECT DISTINCT billing_country FROM invoices;
SELECT DISTINCT billing_country FROM invoices;
SELECT name FROM artists WHERE name LIKE '%a%';
SELECT name FROM artist WHERE name LIKE '%a%';
SELECT title FROM albums WHERE artist = 'AC/DC';
SELECT title FROM albums WHERE artist = 'AC/DC';
SELECT COUNT(*) FROM albums WHERE artist = 'Metallica';
SELECT COUNT(*) FROM albums WHERE artist = 'Metallica';
The album "Balls to the Wall" belongs to the artist "The Who". SELECT artist FROM albums WHERE album_name = 'Balls to the Wall';
SELECT artist FROM albums WHERE album_name = 'Balls to the Wall';
SELECT artist, COUNT(album) as num_albums FROM albums GROUP BY artist ORDER BY num_albums DESC LIMIT 1;
SELECT artist_name, COUNT(album_name) as num_albums FROM albums GROUP BY artist_name ORDER BY num_albums DESC LIMIT 1;
SELECT track_name FROM tracks WHERE track_name LIKE '%you%';
SELECT track_name FROM tracks WHERE track_name LIKE '%you%';
SELECT AVG(unit_price) FROM tracks;
SELECT AVG(unit_price) FROM tracks WHERE track_name = 'Track Name';
SELECT MIN(duration) AS shortest, MAX(duration) AS longest FROM tracks;
SELECT MAX(duration) AS max_duration, MIN(duration) AS min_duration FROM tracks;
SELECT album_name, album_id, COUNT(track_id) FROM album_tracks GROUP BY album_name, album_id;
SELECT album_name, album_id, COUNT(track_name) as num_tracks FROM albums GROUP BY album_name, album_id;
SELECT genre, COUNT(*) as count FROM tracks GROUP BY genre ORDER BY count DESC LIMIT 1;
SELECT genre, COUNT(*) as frequency FROM tracks GROUP BY genre ORDER BY frequency DESC LIMIT 1;
SELECT media_type FROM tracks GROUP BY media_type ORDER BY COUNT(*) ASC LIMIT 1;
The media type that is least common across all tracks is 'audio/mpeg'.;
SELECT album_name, album_id FROM albums WHERE album_name IN (SELECT album_name FROM tracks WHERE unit_price > 1);
SELECT title, id FROM albums WHERE unit_price > 1;
SELECT COUNT(*) FROM tracks WHERE genre = 'rock';
SELECT COUNT(*) FROM tracks WHERE genre = 'rock';
SELECT AVG(unit_price) FROM tracks WHERE genre = 'Jazz';
SELECT AVG(unit_price) FROM tracks WHERE genre = 'jazz';
SELECT first_name, last_name FROM customers WHERE email = 'luisg@embraer.com.br';
SELECT first_name, last_name FROM customers WHERE email = 'luisg@embraer.com.br';
SELECT COUNT(*) FROM customers WHERE email LIKE '%gmail.com';
SELECT COUNT(*) FROM customers WHERE email LIKE '%gmail.com';
SELECT first_name, last_name FROM employees WHERE first_name = 'Leonie' AND customer_id = 1;
SELECT first_name, last_name FROM employees WHERE first_name = 'Leonie';
SELECT city FROM employees WHERE postal_code = 70174;
SELECT city FROM employees WHERE postal_code = 70174;
SELECT COUNT(DISTINCT city) FROM employees;
SELECT COUNT(DISTINCT city) FROM employees;
SELECT invoice_date FROM invoices WHERE first_name = 'Astrid' AND last_name = 'Gruber';
SELECT invoice_date FROM invoices WHERE first_name = 'Astrid' AND last_name = 'Gruber';
SELECT last_name FROM customers WHERE invoice_total <= 20;
SELECT last_name FROM customers WHERE invoice_total <= 20;
SELECT first_name FROM customers WHERE country = 'Brazil' AND invoice IS NOT NULL;
SELECT first_name FROM customers WHERE country = 'Brazil' AND invoice_status = 'Processed';
SELECT address FROM customers WHERE country = 'Germany' AND invoice = 1;
SELECT address FROM customers WHERE country = 'Germany' AND invoice_status = 'Processed';
SELECT phone_number FROM employees;
SELECT phone_number FROM employees;
SELECT COUNT(*) FROM media_type WHERE media_type_name = 'AAC';
SELECT COUNT(*) FROM tracks WHERE media_type = 'AAC audio file';
SELECT AVG(duration) FROM tracks WHERE genre IN ('Latin', 'Pop');
SELECT AVG(millisecond_length) FROM tracks WHERE genre = 'Latin' OR genre = 'Pop';
SELECT first_name, id FROM employees WHERE customer_count >= 10;
SELECT first_name, support_rep_id FROM employees WHERE num_customers >= 10;
SELECT last_name FROM employees WHERE customer_count <= 20;
SELECT last_name FROM employees WHERE customer_count <= 20;
SELECT album_title FROM albums ORDER BY album_title ASC;
SELECT album_title FROM albums ORDER BY album_title ASC;
SELECT name, id FROM artists WHERE id IN (SELECT artist_id FROM albums GROUP BY artist_id HAVING COUNT(*) >= 3 ORDER BY name ASC);
SELECT name, id FROM artists WHERE num_albums >= 3 ORDER BY name ASC;
SELECT artist_name FROM artists WHERE album_count = 0;
SELECT name FROM artists WHERE albums_released = 0;
SELECT AVG(unit_price) FROM rock_tracks;
SELECT AVG(unit_price) FROM tracks WHERE genre = 'Rock';
SELECT MIN(duration) AS shortest, MAX(duration) AS longest FROM pop_tracks;
SELECT MAX(millisecond_length) FROM pop_tracks;
SELECT birth_date FROM employees WHERE city = 'Edmonton';
SELECT birth_date FROM employees WHERE city = 'Edmonton';
SELECT DISTINCT unit_price FROM tracks;
SELECT DISTINCT unit_price FROM tracks;
SELECT COUNT(*) FROM artists WHERE albums IS NULL;
SELECT COUNT(*) FROM artists WHERE album_release_date IS NULL;
SELECT album_title FROM albums WHERE genre_1 = 'Reggae' AND genre_2 = 'Rock';
SELECT title FROM albums WHERE genre IN ('Reggae', 'Rock') AND album_tracks IN ('Reggae', 'Rock');
SELECT phone_number FROM contacts;
SELECT phone_number FROM contacts;
SELECT phone FROM customers WHERE policy = 'Life Insurance';
SELECT phone FROM customers WHERE policy_code = 'Life Insurance';
SELECT policy_type, COUNT(*) FROM policies GROUP BY policy_type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT policy_type, COUNT(*) FROM policies GROUP BY policy_type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT phone_number FROM customers WHERE policy_type ='most_popular';
SELECT phone_number FROM customers WHERE policy_type = (SELECT policy_type FROM policies GROUP BY policy_type ORDER BY COUNT(*) DESC LIMIT 1);
SELECT policy_type FROM customers GROUP BY policy_type HAVING COUNT(*) > 4;
SELECT type_code FROM policy_types WHERE count(*) > 4;
SELECT SUM(settlement_amount) as total_amount, AVG(settlement_amount) as average_amount FROM settlements;
SELECT SUM(settlement_amount) AS total_settlement, AVG(settlement_amount) AS average_settlement FROM settlements;
SELECT name FROM services WHERE first_notification_of_loss > 2;
SELECT service_name FROM notifications WHERE first_notification_of_loss > 2;
SELECT effective_date, SUM(total_settlement) as total_amount FROM claims GROUP BY effective_date ORDER BY total_amount DESC LIMIT 1;
SELECT claim_id, SUM(settlement_amount) as total_settlement_amount, effective_date FROM claims GROUP BY claim_id ORDER BY total_settlement_amount DESC LIMIT 1;
SELECT COUNT(*) FROM policies WHERE customer_name = 'Dayana Robel';
SELECT COUNT(*) FROM Policies WHERE CustomerName = 'Dayana Robel';
SELECT name FROM customer c1 WHERE COUNT(*) = (SELECT MAX(count) FROM policy p1 WHERE p1.customer_id = c1.id);
SELECT customer_name FROM policies_used GROUP BY customer_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT policy_type FROM customer WHERE name = 'Dayana Robel';
SELECT policy_type FROM customer_policy WHERE customer_name = 'Dayana Robel';
SELECT policy_type FROM customer_policies WHERE customer_id = (SELECT customer_id FROM customer_policies GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT policy_type FROM customer_policies GROUP BY customer_id HAVING COUNT(*) = (SELECT MAX(COUNT(*) FROM customer_policies) FROM customer_policies GROUP BY customer_id);
SELECT * FROM services ORDER BY name ASC;
SELECT service_name FROM services ORDER BY service_name ASC;
SELECT COUNT(*) FROM services;
SELECT COUNT(*) FROM services;
SELECT name FROM users WHERE first_notification_of_loss IS NULL;
SELECT customer_name FROM customers WHERE first_notification_of_loss IS NULL;
SELECT name FROM customers WHERE service IN ('Close a policy', 'Upgrade a policy');
SELECT customer_name FROM customers WHERE service_name = 'Close a policy' OR service_name = 'Upgrade a policy';
SELECT name FROM customers WHERE service_used = 'Close a policy' AND service_used = 'New policy application';
SELECT customer_name FROM customers WHERE service_name = 'Close a policy' AND service_name = 'Upgrade a policy';
SELECT id FROM customers WHERE name LIKE '%Diana%';
SELECT COUNT(*) FROM customers WHERE name LIKE '%Diana%';
SELECT MAX(settlement_amount) AS max_amount, MIN(settlement_amount) AS min_amount FROM settlements;
SELECT MAX(settlement_amount) AS max_settlement, MIN(settlement_amount) AS min_settlement FROM settlements;
SELECT * FROM customers ORDER BY id ASC;
SELECT customer_id FROM customers ORDER BY customer_id;
SELECT open_date, close_date FROM policies WHERE customer_name LIKE '%Diana%';
SELECT policy_name, open_date, close_date FROM policies WHERE customer_name LIKE '%Diana%';
SELECT COUNT(*) FROM Enzymes;
SELECT COUNT(*) FROM Enzymes;
SELECT name FROM enzymes ORDER BY name DESC;
SELECT name FROM enzymes ORDER BY name DESC;
SELECT name, location FROM enzymes WHERE effect ='make an effect';
SELECT name, location FROM enzymes;
SELECT MAX(OMIM) FROM Enzymes;
SELECT MAX(OMIM) FROM OMIM;
SELECT product, chromosome, porphyria FROM enzymes WHERE location = 'Cytosol';
SELECT product, chromosome, porphyria FROM enzymes WHERE location = 'Cytosol';
SELECT name FROM enzymes WHERE heme = 'No';
SELECT name FROM enzymes WHERE product = 'Heme';
SELECT name, trade_name FROM medicines WHERE FDA_record = 'Yes';
SELECT name, trade_name FROM medcines WHERE FDA_APPROVED = true;
SELECT enzyme_name FROM medicine WHERE medicine_name = 'Amisulpride' AND function = 'inhibitor';
SELECT enzyme_name FROM medicine WHERE function = 'inhibitor';
SELECT id, name FROM medicine WHERE interaction_count >= 2;
SELECT medicine_id, name FROM medicines WHERE name IN (SELECT name FROM enzymes GROUP BY name HAVING COUNT(*) > 1);
SELECT id, name, FDA_Approval_Status FROM medicines ORDER BY COUNT(Enzyme_Interaction_Count) DESC;
SELECT id, name, FDA_approval_status FROM medicines ORDER BY COUNT(*) DESC;
SELECT id, name FROM enzyme WHERE name LIKE '%activator%' ORDER BY COUNT(*) DESC LIMIT 1;
SELECT id, name FROM enzyme WHERE interaction_count = (SELECT MAX(interaction_count) FROM enzyme);
SELECT interaction_type FROM enzyme_medicine_interaction WHERE enzyme_name = 'ALA synthase' AND medicine_name = 'Aripiprazole';
SELECT enzyme_type, medicine_type FROM interactions WHERE enzyme_name = 'ALA synthase' AND medicine_name = 'Aripiprazole';
The most common interaction type between enzymes and medicine is inhibition, and there are three types.;
SELECT COUNT(*) FROM interactions WHERE type = 'Enzyme-Medicine';
SELECT COUNT(*) FROM medicines WHERE FDA_status = 'No';
SELECT COUNT(*) FROM medicines WHERE FDA_approval = 'No';
SELECT COUNT(*) FROM Enzymes WHERE Interaction = NULL;
SELECT COUNT(*) FROM Enzymes WHERE Interaction = 'No';
SELECT id, trade_name FROM medicines WHERE num_enzyme_interactions >= 3;
SELECT id, trade_name FROM medicine WHERE interaction_count >= 3;
SELECT DISTINCT name, location, products FROM enzymes WHERE products LIKE '%inhibitor%';
SELECT name, location, product FROM enzymes WHERE interaction = 'inhibitor';
SELECT medicine_name, trade_name FROM medicines WHERE medicine_name IN ('inhibitor', 'activitor') AND trade_name IN ('inhibitor', 'activitor');
SELECT medicine, trade_name FROM drug_interactions WHERE interaction_type = 'inhibitor' OR interaction_type = 'activator';
SELECT medicine_name, trade_name FROM medicines WHERE trade_name NOT IN (SELECT trade_name FROM interactions WHERE product = 'Heme');
SELECT medicine, trade_name FROM medicines WHERE product = 'Heme';
SELECT COUNT(DISTINCT status) FROM medicines;
SELECT COUNT(DISTINCT status) FROM medicine_status;
SELECT name FROM enzymes WHERE name LIKE '%ALA%';
SELECT name FROM enzymes WHERE name LIKE '%ALA%';
SELECT trade_name, COUNT(*) as num_medicines FROM medicines GROUP BY trade_name;
SELECT trade_name, COUNT(*) FROM medicines GROUP BY trade_name;
SELECT school_name, nickname FROM schools ORDER BY founded_year ASC;
SELECT school_name, nickname, founding_year FROM schools ORDER BY founding_year ASC;
SELECT school_name, location FROM public_schools;
SELECT school_name, location FROM public_schools;
SELECT year FROM schools WHERE enrollment = (SELECT MAX(enrollment) FROM schools);
SELECT year FROM school WHERE enrollment = (SELECT MAX(enrollment) FROM school);
SELECT year FROM schools WHERE status = 'non-public' ORDER BY year DESC LIMIT 1;
SELECT year FROM schools WHERE name = 'Non-Public School' ORDER BY year DESC LIMIT 1;
SELECT COUNT(*) FROM schools WHERE sport = 'basketball';
SELECT COUNT(*) FROM schools WHERE sport = 'basketball';
SELECT MAX(acc_percent) FROM competition;
SELECT MAX(acc) FROM basketball_matches;
SELECT name, acc_percent FROM school WHERE acc_percent = (SELECT MIN(acc_percent) FROM school) ORDER BY acc_percent ASC LIMIT 1;
SELECT conference_name FROM school_data WHERE acc_percentage = (SELECT MIN(acc_percentage) FROM school_data);
SELECT team_name, acc_season_score FROM schools WHERE founded_date = (SELECT MAX(founded_date) FROM schools);
SELECT team_name, acc FROM school WHERE founded_date < '2000-01-01' ORDER BY founded_date ASC;
SELECT location, games_score FROM school WHERE team_name = 'Clemson';
SELECT * FROM games WHERE school_name = 'Clemson' AND score > 100;
SELECT AVG(enrollment) FROM universities WHERE year_founded < 1850;
SELECT AVG(enrollment) FROM universities WHERE year_founded < 1850;
SELECT enrollment, primary_conference FROM colleges ORDER BY enrollment ASC LIMIT 1;
SELECT university_name, enrollment, primary_conference FROM universities ORDER BY founding_date ASC LIMIT 1;
SELECT SUM(enrollment) AS total_enrollment, MIN(enrollment) AS min_enrollment FROM schools;
SELECT SUM(enrollment) AS total_enrollment, MIN(enrollment) AS min_enrollment FROM schools;
SELECT affiliation_type, SUM(student_enrollment) FROM schools GROUP BY affiliation_type;
SELECT affiliation_type, SUM(enrollment) FROM universities GROUP BY affiliation_type;
SELECT COUNT(*) FROM schools WHERE basketball_match = 'No';
SELECT COUNT(*) FROM universities WHERE baketball_participation = 'No';
SELECT * FROM schools WHERE founded_year > 1850 OR public = 'Yes';
SELECT school_name FROM schools WHERE founded_year < 1850 OR is_public = true;
SELECT COUNT(DISTINCT affiliation_type) FROM affiliations;
SELECT COUNT(DISTINCT affiliation_type) FROM affiliations;
SELECT COUNT(*) FROM school_locations WHERE name LIKE '%NY%';
SELECT COUNT(*) FROM universities WHERE location LIKE '%NY%';
SELECT team_name FROM universities WHERE enrollment < (SELECT AVG(enrollment) FROM universities);
SELECT team_name FROM universities WHERE enrollment < AVG(enrollment);
SELECT affiliation_type, COUNT(*) FROM universities WHERE enrollment_size > 20000 GROUP BY affiliation_type;
SELECT affiliation, COUNT(*) FROM schools WHERE enrollment > 20000 GROUP BY affiliation;
SELECT affiliation_type, COUNT(*) FROM colleges WHERE year_founded > 1850 GROUP BY affiliation_type;
SELECT affiliation, SUM(enrollment) FROM schools WHERE year_founded > 1850 GROUP BY affiliation;
SELECT MAX(enrollment) FROM schools;
SELECT MAX(enrollment) FROM schools;
SELECT * FROM basketball_match;
SELECT * FROM basketball_match;
SELECT team_name FROM basketball_competition ORDER BY home_score DESC;
SELECT team_name FROM basketball_competition ORDER BY home_score DESC;
SELECT name FROM models WHERE launch_year BETWEEN 2002 AND 2004;
SELECT model_name, RAM FROM models WHERE RAM = (SELECT MIN(RAM) FROM models);
SELECT chip_model, screen_mode FROM phone WHERE hardware_model = 'LG-P760';
SELECT COUNT(*) FROM phone_hardware WHERE company_name = 'Nokia Corporation';
SELECT MAX(RAM) FROM phones WHERE company = 'Nokia Corporation' AND RAM > 0;
SELECT AVG(ROM) FROM phones WHERE company = 'Nokia Corporation';
SELECT hardware_model, company_name FROM phones WHERE year_launched = 2002 OR RAM_size > 32;
SELECT HardwareModelName, CompanyName FROM Phones WHERE AccreditationType LIKE '%Full%';
SELECT Char, Pixels, HardwareColour FROM Phone WHERE HardwareModelName = 'LG-P760';
SELECT hardware_model, company_name FROM phones WHERE screen_mode_type = 'Graphics';
SELECT company_name, COUNT(phone_model) as phone_model_count FROM company GROUP BY company_name ORDER BY phone_model_count ASC LIMIT 1;
SELECT name FROM company WHERE phone_model > 1;
SELECT MAX(kb_used), MIN(kb_used), AVG(kb_used) FROM screen_mode;
SELECT name FROM phone_models WHERE year = 2002 AND RAM_size = (SELECT MAX(RAM_size) FROM phone_models);
SELECT wifi, screen_mode FROM hardware WHERE name = 'LG-P760';
SELECT hardware_model FROM phones WHERE screen_mode = 'Text' OR RAM > 32;
SELECT hardware_model FROM phones WHERE company_name = 'Nokia Corporation' OR screen_mode_type = 'Graphics';
SELECT hardware_model FROM phons WHERE company_name = 'Nokia Corporation' AND screen_mode_type!= 'Text';
SELECT hardware_model, company_name FROM phones WHERE screen_usage BETWEEN 10 AND 15;
SELECT accreditation_type, COUNT(*) FROM phones GROUP BY accreditation_type;
SELECT accreditation_type, COUNT(*) FROM phones GROUP BY accreditation_type;
SELECT accreditation_level FROM phones WHERE phones_used > 3;
SELECT * FROM chips;
SELECT COUNT(*) FROM models WHERE wifi = 0;
SELECT COUNT(*) FROM chips WHERE wifi = 'No';
SELECT model_name, launch_year FROM models ORDER BY launch_year ASC;
SELECT AVG(ram_mib) FROM chip_models WHERE is_used = 0;
SELECT name FROM chip_models WHERE accreditation_type IS NULL;
SELECT screen_mode FROM phones WHERE accreditation_type = 'Full' AND accreditation_type = 'Provisional';
SELECT COUNT(*) FROM countries;
SELECT COUNT(*) FROM countries;
SELECT country_name, capital FROM countries;
SELECT country_name, capital FROM countries;
SELECT language FROM official_languages WHERE language LIKE '%English%';
SELECT language FROM languages WHERE language LIKE '%English%';
SELECT DISTINCT position FROM matches;
SELECT position FROM match_season;
SELECT * FROM players WHERE college = 'UCLA';
SELECT * FROM players WHERE school = 'UCLA';
SELECT DISTINCT position FROM players WHERE college = 'UCLA' OR college = 'Duke';
SELECT position FROM players WHERE college = 'UCLA' OR college = 'Duke';
SELECT draft_pick_number, draft_class FROM players WHERE position = 'defender';
SELECT player_number, draft_class FROM players WHERE position = 'Defender';
SELECT COUNT(DISTINCT team_name) FROM match_seasons;
SELECT COUNT(DISTINCT team_name) FROM match_season;
SELECT player, year_played FROM players;
SELECT player_name, COUNT(*) FROM player_stats GROUP BY player_name;
SELECT team_name FROM teams;
SELECT team_name FROM teams;
SELECT season, player, country FROM player_country;
SELECT name, season, country FROM players;
SELECT * FROM players WHERE country = 'Indonesia';
SELECT * FROM players WHERE country = 'Indonesia';
SELECT DISTINCT position FROM players WHERE country = 'Dublin';
SELECT position FROM players WHERE country = 'Dublin';
SELECT language FROM countries WHERE college = 'Maryland' OR college = 'Duke';
SELECT language FROM countries WHERE (players_from_Maryland OR players_from_Duke) = 'True';
SELECT COUNT(DISTINCT language) FROM players WHERE position = 'defender' AND country IN (SELECT country FROM languages);
SELECT COUNT(DISTINCT language) FROM countries WHERE player_position = 'Defender' AND language IN (SELECT language FROM official_languages);
SELECT season, player, team FROM players;
SELECT player_name, season, team_name FROM players;
SELECT position FROM players WHERE team_name = 'Ryley Goldner';
SELECT position FROM players WHERE name = 'Ryley Goldner';
SELECT COUNT(DISTINCT college) FROM players WHERE team_name = 'Columbus Crew';
SELECT COUNT(DISTINCT college) FROM players WHERE team = 'Columbus Crew';
SELECT player_name, year_played FROM players WHERE team_name = 'Columbus Crew';
SELECT player_name, SUM(years_played) FROM player_stats WHERE team_name = 'Columbus Crew' GROUP BY player_name;
SELECT position, COUNT(*) FROM players GROUP BY position;
SELECT position, COUNT(*) FROM players GROUP BY position;
SELECT country, COUNT(*) as num_players FROM players GROUP BY country;
SELECT country, COUNT(*) FROM players GROUP BY country;
SELECT * FROM players ORDER BY college ASC;
SELECT player_name, college_name FROM players WHERE season ='season' ORDER BY college_name ASC;
SELECT position, COUNT(*) as count FROM player_stats GROUP BY position ORDER BY count DESC LIMIT 1;
SELECT position, COUNT(*) as count FROM player_stats GROUP BY position ORDER BY count DESC LIMIT 1;
SELECT college, COUNT(*) as count FROM players WHERE season IN (SELECT season FROM match_seasons) GROUP BY college ORDER BY count DESC LIMIT 3;
SELECT college, COUNT(*) as num_players FROM players GROUP BY college ORDER BY num_players DESC LIMIT 3;
SELECT name FROM colleges WHERE players >= 2;
SELECT name FROM colleges WHERE num_players >= 2;
SELECT name FROM colleges WHERE name IN (SELECT name FROM colleges WHERE players > 2) ORDER BY name DESC;
SELECT name FROM colleges WHERE players > 2 ORDER BY name DESC;
SELECT team_name FROM teams WHERE match_season_record = NULL;
SELECT team_name FROM teams WHERE match_season_record = 0;
SELECT name FROM countries WHERE position = 'forward' AND position = 'defender';
SELECT name FROM countries WHERE position = 'Forward' OR position = 'Defender';
SELECT college_name FROM college_players WHERE position ='midfielder' AND position = 'defender';
SELECT colleges.name, colleges.location, players.position FROM colleges INNER JOIN players ON colleges.college_id = players.college_id WHERE players.position = 'Midfielder' OR players.position = 'Defender';
SELECT COUNT(*) FROM climbers;
SELECT COUNT(*) FROM climbers;
SELECT name FROM climbers ORDER BY points DESC;
SELECT name, points FROM climbers ORDER BY points DESC;
SELECT name FROM climbers WHERE country!= 'Switzerland';
SELECT name FROM climbers WHERE country!= 'Switzerland';
SELECT MAX(points) FROM climbers WHERE country = 'United Kingdom';
SELECT MAX(points) FROM climbers WHERE country = 'United Kingdom';
SELECT COUNT(DISTINCT country) FROM climbers;
SELECT COUNT(DISTINCT country) FROM climbers;
SELECT name FROM mountains ORDER BY name ASC;
SELECT name FROM mountains ORDER BY name ASC;
SELECT country FROM mountains WHERE height > 5000;
SELECT country FROM mountains WHERE height > 5000;
The highest mountain is Mount Everest.;
SELECT name FROM mountains ORDER BY height DESC LIMIT 1;
SELECT DISTINCT RANGE(TOP_PROMINENCE) AS range FROM Mountains WHERE TOP_PROMINENCE IN (SELECT TOP 3 PROMINENCE FROM Mountains) ORDER BY range ASC;
SELECT name, range FROM mountains ORDER BY prominence DESC LIMIT 3;
SELECT climbers.name, mountains.name FROM climbers INNER JOIN mountains ON climbers.mountain_name = mountains.name;
SELECT name, mountain FROM climbers;
SELECT name, height FROM climbers;
SELECT name, height FROM climbers;
SELECT MAX(points) FROM climbers WHERE name = 'John' AND mountain = 'Everest';
SELECT name, MAX(points) as max_points, height FROM climbers WHERE name = 'Climber' ORDER BY max_points DESC LIMIT 1;
SELECT DISTINCT name FROM climbers WHERE country = 'West Germany' AND name IN (SELECT name FROM mountains);
SELECT name FROM climbers WHERE country = 'West Germany' AND name IN ('Everest', 'K2', 'Kangchenjunga');
SELECT time FROM climbers WHERE country = 'Uganda';
SELECT time FROM climbers WHERE country = 'Uganda';
SELECT country, COUNT(*) as num_climbers FROM climbers GROUP BY country;
SELECT country, COUNT(*) FROM climbers GROUP BY country;
SELECT country FROM countries WHERE number_of_mountains > 1;
SELECT country, COUNT(*) FROM mountains GROUP BY country HAVING COUNT(*) > 1;
SELECT name FROM mountains WHERE climber = NULL;
SELECT name FROM climbers WHERE name NOT IN (SELECT name FROM climbs);
SELECT * FROM countries WHERE height > 5600 AND height < 5200;
SELECT country FROM countries WHERE (mountain_height > 5600) AND (mountain_height < 5200);
SELECT MIN(range) AS range, COUNT(*) AS count FROM mountains GROUP BY range HAVING count(*) = (SELECT MAX(count) FROM mountains GROUP BY range);
SELECT range_name FROM ranges WHERE num_mountains = (SELECT MAX(num_mountains) FROM ranges);
SELECT name FROM mountains WHERE height > 5000 OR prominence > 1000;
SELECT name FROM mountains WHERE height > 5000 OR prominence > 1000;
SELECT COUNT(*) FROM bodybuilders;
SELECT SUM(score) FROM bodybuilders ORDER BY score ASC;
SELECT snatch_score, clean_jerk_score FROM body_builders ORDER BY snatch_score ASC;
SELECT AVG(snatch) FROM bodybuilders;
SELECT clean_jerk_score FROM bodybuilder_scores WHERE total_score = (SELECT MAX(total_score) FROM bodybuilder_scores);
SELECT birthdays, height FROM people ORDER BY height ASC;
SELECT name FROM bodybuilders;
SELECT name FROM bodybuilders WHERE total_score > 300;
SELECT name FROM bodybuilders WHERE weight = (SELECT MAX(weight) FROM bodybuilders);
SELECT birth_date, birth_place FROM bodybuilder WHERE total_points = (SELECT MAX(total_points) FROM bodybuilder);
SELECT height FROM bodybuilders WHERE total_score < 315;
SELECT AVG(total_score) FROM bodybuilders WHERE height > 200;
SELECT name, total_score FROM bodybuilders ORDER BY total_score DESC;
SELECT birth_place, COUNT(*) FROM people GROUP BY birth_place;
The most common birth place of people is the United States.;
SELECT birth_place FROM people WHERE birth_place IN (SELECT birth_place FROM people GROUP BY birth_place HAVING COUNT(*) > 1);
SELECT height, weight FROM people ORDER BY height DESC;
SELECT * FROM bodybuilders;
SELECT name, origin FROM people WHERE body_builder = 0;
SELECT COUNT(DISTINCT birth_place) FROM people;
SELECT COUNT(*) FROM persons WHERE body_builder = 0;
SELECT weight FROM bodybuilders WHERE snatch_score > 140 OR height > 200;
SELECT SUM(score) FROM bodybuilders WHERE birthday LIKE '%January%';
SELECT MIN(snatch) FROM athletes;
SELECT COUNT(*) FROM elections;
SELECT * FROM elections ORDER BY votes DESC;
SELECT date, vote_percent FROM elections;
SELECT MIN(vote_percentage) AS min_vote_percentage, MAX(vote_percentage) AS max_vote_percentage FROM elections;
SELECT name, party FROM representatives;
SELECT name FROM representatives WHERE party!= 'Republican';
SELECT life_span FROM representatives WHERE state IN ('New York', 'Indiana');
SELECT name, date FROM representatives;
SELECT name FROM representatives WHERE votes > 10000;
SELECT name FROM representatives ORDER BY votes DESC;
SELECT party, COUNT(*) FROM representatives GROUP BY party ORDER BY COUNT(*) ASC LIMIT 1;
SELECT lifespan, vote_percentage FROM representatives ORDER BY vote_percentage DESC;
SELECT AVG(votes) FROM representatives WHERE party = 'Republican';
SELECT party_name, COUNT(*) FROM representatives GROUP BY party_name;
SELECT party_name, COUNT(*) as num_representatives FROM party_memberships GROUP BY party_name ORDER BY num_representatives DESC LIMIT 1;
SELECT party_name FROM parties WHERE party_members >= 3;
SELECT state FROM states WHERE state_population >= 2;
SELECT name FROM representatives WHERE name NOT IN (SELECT name FROM elections);
SELECT * FROM parties WHERE state = 'New York' AND state = 'Pennsylvania';
SELECT COUNT(DISTINCT party) FROM representatives;
SELECT COUNT(*) FROM Bookings;
SELECT COUNT(*) FROM Bookings;
SELECT start_date, end_date FROM apartment_bookings;
SELECT start_date, end_date FROM bookings;
SELECT DISTINCT building_description FROM buildings;
SELECT DISTINCT building_description FROM buildings;
SELECT short_name FROM buildings WHERE manager = 'Emma';
SELECT building_name FROM buildings WHERE manager_name = 'Emma';
SELECT address, phone FROM buildings WHERE manager = 'Brenden';
SELECT address, phone FROM buildings WHERE manager = 'Brenden';
SELECT first_name, last_name FROM building_full_name WHERE first_name LIKE '%court%' OR last_name LIKE '%court%';
SELECT * FROM buildings WHERE full_name LIKE '%court%';
SELECT MIN(bathrooms), MAX(bathrooms) FROM apartments;
SELECT MIN(bathroom_count) AS min_bathroom, MAX(bathroom_count) AS max_bathroom FROM apartments;
SELECT AVG(bedrooms) FROM apartments;
SELECT AVG(bedrooms) FROM apartments;
SELECT apartment_number, COUNT(*) as num_rooms FROM apartments GROUP BY apartment_number;
SELECT apartment_number, room_count FROM apartments;
SELECT AVG(Rooms) FROM Apartments WHERE TypeCode = 'Studio';
SELECT AVG(room_count) FROM apartments WHERE type_code = 'Studio';
SELECT apartment_number FROM apartments WHERE type_code = 'Flat';
SELECT apartment_number FROM apartments WHERE type_code = 'Flat';
SELECT first_name, last_name FROM guests;
SELECT first_name, last_name FROM guests;
SELECT date_of_birth FROM guests WHERE gender = 'Male';
SELECT DATE_FORMAT(DOB, '%Y-%m-%d') FROM guests WHERE gender = 'Male';
SELECT apartment_number, start_date, end_date FROM apartment_bookings;
SELECT apartment_number, start_date, end_date FROM bookings;
SELECT start_date, end_date FROM apartments WHERE type_code = 'Duplex';
SELECT booking_start_date, booking_end_date FROM apartments WHERE type_code = 'Duplex';
SELECT apartment_id, booking_start_date, booking_end_date FROM apartments WHERE num_bedrooms > 2;
SELECT apartment_id, booking_start_date, booking_end_date FROM apartments WHERE num_bedrooms > 2;
SELECT status_code FROM apartments WHERE apartment_number = 'Suite 634';
SELECT status_code FROM bookings WHERE apartment_number = "Suite 634";
SELECT DISTINCT apartment_number FROM apartments WHERE booking_status = 'Confirmed';
SELECT apartment_number FROM bookings WHERE status_code = 'Confirmed';
SELECT AVG(room_count) FROM apartments WHERE booking_status = 'Provisional';
SELECT AVG(room_count) FROM apartments WHERE booking_status = 'Provisional';
SELECT first_name, start_date, end_date FROM apartment_bookings;
SELECT guest_first_name, start_date, end_date FROM apartment_bookings;
SELECT start_date, end_date FROM apartment_bookings WHERE gender = 'Female';
SELECT start_date, end_date FROM apartment_bookings WHERE gender_code = 'Female';
SELECT first_name, last_name FROM guests WHERE apartment_booking_status = 'Confirmed';
SELECT first_name, last_name FROM guests WHERE apartment_booking_status = 'Confirmed';
SELECT facility_code FROM apartments WHERE bedrooms > 4;
SELECT facility_code FROM apartments WHERE bedrooms > 4;
SELECT COUNT(*) FROM Apartments WHERE FacilityCode = 'Gym';
SELECT COUNT(*) FROM Apartments WHERE FacilityCode = 'Gym';
SELECT COUNT(*) FROM apartments WHERE short_name = 'Columbus Square';
SELECT COUNT(*) FROM apartments WHERE short_name = 'Columbus Square';
SELECT address FROM buildings WHERE apartments > 2;
SELECT building_name, address FROM buildings WHERE apartments > 2;
SELECT apartment_type_code, apartment_number FROM buildings WHERE building_manager = 'Kyle';
SELECT apartment_type_code, apartment_number FROM buildings WHERE building_manager = 'Kyle';
SELECT status_code, COUNT(*) FROM bookings GROUP BY status_code;
SELECT status_code, COUNT(*) FROM bookings GROUP BY status_code;
SELECT apartment_number, room_count FROM apartments ORDER BY room_count ASC;
SELECT apartment_number, room_count FROM apartments ORDER BY room_count ASC;
SELECT apartment_number FROM apartments WHERE bedrooms = (SELECT MAX(bedrooms) FROM apartments);
SELECT apartment_number FROM apartments WHERE beds = (SELECT MAX(beds) FROM apartments);
SELECT apartment_type_code, COUNT(*) as num_apartments FROM apartments GROUP BY apartment_type_code ORDER BY num_apartments ASC;
SELECT apartment_type, COUNT(*) FROM apartments GROUP BY apartment_type ORDER BY COUNT(*) ASC;
SELECT apartment_type_code, AVG(rooms) as avg_rooms FROM apartments GROUP BY apartment_type_code ORDER BY avg_rooms DESC LIMIT 3;
SELECT apartment_type, AVG(room_count) as avg_room_count FROM apartments GROUP BY apartment_type ORDER BY avg_room_count DESC LIMIT 3;
SELECT apartment_type_code, COUNT(*) AS total_rooms, COUNT(*) AS bathrooms, COUNT(*) AS bedrooms FROM apartments GROUP BY apartment_type_code ORDER BY total_rooms DESC LIMIT 1;
SELECT apartment_type, num_bathrooms, num_bedrooms FROM apartments WHERE apartment_type = '1';
SELECT apartment_type_code, COUNT(*) as count FROM apartments GROUP BY apartment_type_code ORDER BY count DESC LIMIT 1;
SELECT apartment_type_code, COUNT(*) as count FROM apartments GROUP BY apartment_type_code ORDER BY count DESC LIMIT 1;
SELECT apartment_type_code FROM apartments WHERE bathrooms > 1 GROUP BY apartment_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT apartment_type_code FROM apartments WHERE num_bathrooms > 1 GROUP BY apartment_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT apartment_type_code, MAX(number_of_rooms) AS max_rooms, MIN(number_of_rooms) AS min_rooms FROM apartments GROUP BY apartment_type_code;
SELECT apartment_type, MAX(number_of_rooms) AS max_rooms, MIN(number_of_rooms) AS min_rooms FROM apartments GROUP BY apartment_type;
SELECT gender_code, COUNT(*) FROM guests GROUP BY gender_code ORDER BY COUNT(*) DESC;
SELECT gender_code, COUNT(*) FROM guests GROUP BY gender_code ORDER BY COUNT(*) DESC;
SELECT COUNT(*) FROM apartments WHERE facility = NULL;
SELECT COUNT(*) FROM apartments WHERE facility = NULL;
SELECT apartment_number FROM bookings WHERE status_code = 'Provisional' AND status_code = 'Confirmed';
SELECT apartment_number FROM bookings WHERE status_code = 'Provisional' AND status_code = 'Confirmed';
SELECT apartment_number FROM apartments WHERE unit_status = '0' OR unit_status = '1';
SELECT apartment_number FROM apartments WHERE unit_status = '0' AND unit_status = '1';
SELECT COUNT(*) FROM games WHERE season > 2007;
SELECT DATE(game_date) FROM home_team_games ORDER BY home_team_name DESC;
SELECT season, home_team, away_team FROM games;
SELECT MAX(home_games), MIN(home_games), AVG(home_games) FROM stadiums;
SELECT AVG(attendance) FROM stadiums WHERE capacity_percentage > 100;
SELECT player_name, matches, information_source FROM player_data WHERE injury_type = 'Knee problem';
SELECT season FROM games WHERE player = 'Walter Samuel' AND injury = 'Injury';
SELECT id, score, date FROM games WHERE injury_accident_count > 1;
SELECT id, name FROM stadium WHERE accidents_count = (SELECT MAX(accidents_count) FROM stadium);
SELECT id, name FROM stadium WHERE accidents_count = (SELECT MAX(accidents_count) FROM stadium);
SELECT season, stadium, injury FROM player_stats WHERE injury = 'Foot injury' OR injury = 'Knee problem';
SELECT COUNT(*) FROM information_sources WHERE type = 'injury_accident';
SELECT COUNT(*) FROM games WHERE injury_accidents = 0;
SELECT COUNT(DISTINCT injury_type) FROM injuries WHERE season >= 2010;
SELECT stadium_name FROM player_injuries WHERE player_name = 'Walter Samuel' OR player_name = 'Thiago Motta';
SELECT name, AVG(attendance) AS avg_attendance, SUM(attendance) AS total_attendance FROM stadiums WHERE accidents_count = 0;
SELECT stadium_name FROM stadiums WHERE stadium_name LIKE '%Bank%';
SELECT stadium_name, COUNT(game_id) FROM games GROUP BY stadium_name;
SELECT game_date, player_name FROM injury_accident ORDER BY game_season DESC;
SELECT country, league FROM countries;
SELECT COUNT(league) FROM leagues WHERE country = 'England';
SELECT AVG(weight) FROM players;
SELECT MAX(height) AS max_height, MIN(height) AS min_height FROM players;
SELECT name FROM players WHERE overall_rating > (SELECT AVG(overall_rating) FROM players);
SELECT name FROM players WHERE dribbling_score = (SELECT MAX(dribbling_score) FROM players);
SELECT name FROM players WHERE crossing_score > 90 AND preferred_foot = 'right';
SELECT name FROM players WHERE foot = 'left' AND overall_rating BETWEEN 85 AND 90;
SELECT AVG(rating) FROM players WHERE foot = 'right' OR foot = 'left';
SELECT COUNT(*) FROM players WHERE overall_rating > 80 AND (left_footed = 'Yes' OR right_footed = 'Yes');
SELECT player_id FROM players WHERE height >= 180 AND overall_rating > 85;
SELECT id FROM players WHERE left_foot = 'left' AND height BETWEEN 180 AND 190;
SELECT player_name, player_rating FROM players ORDER BY player_rating DESC LIMIT 3;
SELECT name, birthday FROM players ORDER BY potential DESC LIMIT 5;
SELECT COUNT(*) FROM performances;
SELECT host, COUNT(*) as attendance FROM performances GROUP BY host ORDER BY attendance ASC;
SELECT date, location FROM performances;
SELECT * FROM Performances WHERE location IN ('TD Garden', 'Bell Centre');
SELECT AVG(attendees) FROM performances;
SELECT date, COUNT(*) FROM performance GROUP BY date ORDER BY COUNT(*) DESC LIMIT 1;
SELECT location, COUNT(performances) FROM performances GROUP BY location;
SELECT location, COUNT(*) as count FROM performances GROUP BY location ORDER BY count DESC LIMIT 1;
SELECT location FROM performances GROUP BY location HAVING COUNT(location) >= 2;
SELECT location FROM performances WHERE attendees > 2000 AND attendees < 1000;
SELECT name, location FROM members;
SELECT name, location FROM members ORDER BY name ASC;
SELECT date FROM performances WHERE role = 'Violin';
SELECT member_name, performance_date FROM performances ORDER BY attendance DESC;
SELECT name FROM members WHERE performance_attended = 0;
SELECT * FROM buildings WHERE rooms > 50;
SELECT DISTINCT building_name FROM buildings WHERE capacity > 50;
SELECT COUNT(*) FROM rooms WHERE building_id!= 'Lamberton';
SELECT COUNT(*) FROM classrooms WHERE Lamberton = 'No';
SELECT department_name, building FROM departments WHERE budget > (SELECT AVG(budget) FROM departments);
SELECT department_name, building FROM departments WHERE budget > (SELECT AVG(budget) FROM departments);
SELECT room_number FROM rooms WHERE (capacity >= 50 AND capacity <= 100) AND building_number = 1;
SELECT room_number, building FROM classrooms WHERE seating_capacity BETWEEN 50 AND 100;
SELECT name, building FROM department WHERE budget = (SELECT MAX(budget) FROM department);
SELECT department_name, building_name FROM departments WHERE budget = (SELECT MAX(budget) FROM departments);
SELECT name FROM student WHERE total_credits = (SELECT MAX(total_credits) FROM student WHERE department = 'History');
SELECT name FROM student WHERE department = 'History' ORDER BY credits DESC LIMIT 1;
SELECT COUNT(*) FROM rooms WHERE building_name = 'Lamberton';
SELECT COUNT(*) FROM classrooms WHERE name = 'Lamberton';
SELECT COUNT(*) FROM students WHERE advisor_id IS NOT NULL;
SELECT COUNT(*) FROM students WHERE advisor IS NOT NULL;
SELECT COUNT(DISTINCT department_name) FROM courses;
SELECT COUNT(DISTINCT department_name) FROM courses;
SELECT COUNT(DISTINCT course_name) FROM courses WHERE department_name = 'Physics';
SELECT COUNT(*) FROM courses WHERE department = 'Physics';
SELECT title FROM courses WHERE num_prerequisites = 2;
SELECT title FROM courses WHERE num_prerequisites = 2;
SELECT title, credit, department_name FROM courses WHERE prerequisites > 1;
SELECT title, credit, department FROM courses WHERE prerequisites > 1;
SELECT COUNT(*) FROM courses WHERE prerequisites IS NULL;
SELECT COUNT(*) FROM courses WHERE prerequisites IS NULL;
SELECT name FROM courses WHERE prerequisites IS NULL;
SELECT title FROM courses WHERE prerequisites = 0;
SELECT COUNT(DISTINCT instructor_id) FROM courses;
SELECT COUNT(DISTINCT instructor_name) FROM courses;
SELECT SUM(budget) FROM departments WHERE department_name IN ('Marketing', 'Finance');
SELECT SUM(budget) FROM departments WHERE department_name IN ('Marketing', 'Finance');
SELECT department_name FROM instructor WHERE name LIKE '%Soisalon%';
SELECT department_name FROM departments WHERE instructure_name LIKE 'Soisalon';
SELECT COUNT(*) FROM rooms WHERE capacity < 50;
SELECT COUNT(*) FROM Lamberton WHERE capacity < 50;
SELECT name, budget FROM departments WHERE budget > (SELECT AVG(budget) FROM departments);
SELECT name, budget FROM departments WHERE budget > (SELECT AVG(budget) FROM departments);
SELECT name FROM instructor WHERE department = 'Statistics' AND salary = (SELECT MIN(salary) FROM instructor);
SELECT name FROM instructors WHERE department = 'Statistics' ORDER BY salary ASC LIMIT 1;
SELECT title FROM courses WHERE department = 'Statistics' AND department = 'Psychology';
SELECT title FROM courses WHERE department = 'Statistics' AND department = 'Psychology';
SELECT title FROM courses WHERE department = 'Statistics' AND department <> 'Psychology';
SELECT title FROM courses WHERE department = 'Statistics' AND department <> 'Psychology';
SELECT id FROM instructors WHERE class_id IN (SELECT class_id FROM classes WHERE semester='Fall 2009') AND class_id NOT IN (SELECT class_id FROM classes WHERE semester='Spring 2010');
SELECT id FROM instructors WHERE fall_2009 = 'Y' AND spring_2010 = 'N';
SELECT name FROM students WHERE class_year IN (2009, 2010);
SELECT name FROM students WHERE year = 2009 OR year = 2010;
SELECT department_name FROM courses ORDER BY total_courses DESC LIMIT 3;
SELECT department_name FROM departments ORDER BY num_courses DESC LIMIT 3;
SELECT department_name FROM courses WHERE total_credits = (SELECT MAX(total_credits) FROM courses) ORDER BY total_credits DESC LIMIT 1;
SELECT department_name FROM departments ORDER BY total_credits DESC LIMIT 1;
SELECT course_name, course_credit FROM courses ORDER BY course_name, course_credit;
SELECT title, credits FROM courses ORDER BY title, credits;
SELECT department FROM departments WHERE budget = (SELECT MIN(budget) FROM departments);
SELECT department_name FROM departments WHERE budget = (SELECT MIN(budget) FROM departments);
SELECT department_name, building_name FROM departments ORDER BY budget DESC;
SELECT department_name, building_name FROM departments ORDER BY budget DESC;
SELECT name, salary FROM instructor ORDER BY salary DESC LIMIT 1;
SELECT name FROM instructors ORDER BY salary DESC LIMIT 1;
SELECT * FROM instructors ORDER BY salary ASC;
SELECT * FROM instructors ORDER BY salary ASC;
SELECT name, department FROM students GROUP BY name, department ORDER BY SUM(credits) ASC;
SELECT name, department FROM students ORDER BY credits ASC;
SELECT course_name, instructor_name FROM courses WHERE year = 2008 ORDER BY course_name ASC;
SELECT title, instructor FROM courses WHERE year = 2008 ORDER BY title ASC;
SELECT name FROM instructors WHERE id IN (SELECT instructor_id FROM students GROUP BY instructor_id HAVING COUNT(*) > 1);
SELECT name FROM instructors WHERE id IN (SELECT instructor_id FROM students GROUP BY instructor_id HAVING COUNT(*) > 1);
SELECT name FROM students WHERE name IN (SELECT name FROM students WHERE advisor_id IN (SELECT advisor_id FROM students GROUP BY advisor_id HAVING COUNT(*) > 1));
SELECT name FROM students WHERE name IN (SELECT name FROM students WHERE advisor_id IN (SELECT advisor_id FROM students GROUP BY advisor_id HAVING COUNT(*) > 1));
SELECT building_name, COUNT(*) FROM rooms WHERE capacity > 50 GROUP BY building_name;
SELECT building_name, COUNT(*) FROM rooms WHERE capacity > 50 GROUP BY building_name;
SELECT building_name, MAX(capacity) AS max_capacity, AVG(capacity) AS avg_capacity FROM rooms GROUP BY building_name;
SELECT building_name, MAX(capacity) AS greatest_capacity, AVG(capacity) AS average_capacity FROM rooms GROUP BY building_name;
SELECT title FROM courses WHERE department_id IN (SELECT department_id FROM departments GROUP BY department_id HAVING COUNT(*) > 1);
SELECT title FROM courses WHERE department_id IN (SELECT department_id FROM departments WHERE name = 'Computer Science') OR department_id IN (SELECT department_id FROM departments WHERE name = 'Mathematics') OR department_id IN (SELECT department_id FROM departments WHERE name = "Physics";
SELECT department, SUM(credits) FROM courses GROUP BY department;
SELECT department, SUM(credits) FROM courses GROUP BY department;
SELECT MIN(salary) FROM departments WHERE AVG(salary) > (SELECT AVG(payment) FROM instructors);
SELECT MIN(salary) FROM departments WHERE AVG(salary) > (SELECT AVG(salary) FROM departments) ORDER BY salary ASC;
SELECT YEAR(semester), COUNT(*) FROM courses GROUP BY YEAR(semester);
SELECT COUNT(*) FROM courses WHERE semester = 'Fall' AND year = '2021';
SELECT YEAR(COUNT(*) FROM courses GROUP BY YEAR(COUNT(*))) AS year_count FROM courses GROUP BY YEAR(COUNT(*));
SELECT YEAR(COUNT(*)), COUNT(*) FROM Courses GROUP BY YEAR(COUNT(*)), COUNT(*) ORDER BY YEAR(COUNT(*)), COUNT(*) DESC LIMIT 1;
SELECT YEAR(offer_date) AS year, SEASON(offer_date) AS semester, COUNT(*) AS num_courses FROM offers GROUP BY YEAR(offer_date), SEASON(offer_date) ORDER BY num_courses DES;
SELECT year, semester, COUNT(*) as num_courses FROM courses GROUP BY year, semester ORDER BY num_courses DESC LIMIT 1;
SELECT department_name FROM students GROUP BY department_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT name FROM department WHERE enrollment = (SELECT MAX(enrollment) FROM department);
SELECT department, COUNT(*) FROM students GROUP BY department;
SELECT department, COUNT(*) FROM students GROUP BY department;
SELECT semester, year, COUNT(*) as num_students FROM enrollments GROUP BY semester, year ORDER BY num_students ASC LIMIT 1;
SELECT semeseter, year FROM students ORDER BY semeseter, year ASC LIMIT 1;
SELECT id FROM instructor WHERE department = 'History';
SELECT id FROM instructors WHERE department = 'History';
SELECT name, salary FROM instructors WHERE department_id IN (SELECT department_id FROM students WHERE department_name = 'History') AND advisor_id IN (SELECT advisor_id FROM students WHERE department_name = 'History');
SELECT name, salary FROM instructors WHERE department = 'History';
SELECT id FROM courses WHERE id NOT IN (SELECT id FROM prerequisites);
SELECT course_id FROM courses WHERE prerequisites = 0;
SELECT name FROM courses WHERE prerequisites IS NULL;
SELECT name FROM courses WHERE prerequisites = NULL;
SELECT title FROM prerequisite_classes WHERE course_title = 'International Finance';
SELECT title FROM prerequisite WHERE course_id = 'International Finance';
SELECT title FROM courses WHERE prerequisite = 'Differential Geometry';
SELECT title FROM courses WHERE prerequisites LIKE '%Differential Geometry%';
SELECT name FROM students WHERE semester = 'fall' AND year = 2003;
SELECT name FROM students WHERE course_name = 'Fall 2003';
SELECT title FROM courses WHERE building = 'Building Chandler' AND semester = 'Fall 2010';
SELECT title FROM courses WHERE location = 'Chandler' AND semester = 'Fall 2010';
SELECT name FROM instructors WHERE course_name = 'C Programming' AND instructor_id <> NULL;
SELECT name FROM instructors WHERE course_name = 'C Programming';
SELECT name, salary FROM instructors WHERE department = 'Math' AND student_advisor = 'True';
SELECT name, salary FROM instructors WHERE department = 'Math';
SELECT name FROM instructors WHERE department = 'Math' AND advisor = (SELECT name FROM students WHERE department = 'Math') ORDER BY total_credit DESC;
SELECT name FROM instructors WHERE department ='math' ORDER BY total_credits;
SELECT course_title FROM courses WHERE course_prerequisite = 'Mobile Computing';
SELECT title FROM courses WHERE prerequisites = 'Mobile Computing';
SELECT name FROM instructor WHERE id = (SELECT id FROM student WHERE name = (SELECT name FROM student WHERE total_credits = (SELECT MAX(total_credits) FROM student)));
SELECT instructor_name FROM student_credits GROUP BY instructor_name ORDER BY total_credits DESC LIMIT 1;
SELECT name FROM instructors WHERE courses = NULL;
SELECT name FROM instructors WHERE name NOT IN (SELECT name FROM courses);
SELECT id FROM instructors WHERE id NOT IN (SELECT instructor_id FROM courses);
SELECT id FROM instructors WHERE name = 'John' OR name = 'Jane' OR name = 'Doe' OR name = 'Smith';
SELECT name FROM instructors WHERE id NOT IN (SELECT instructor_id FROM courses WHERE semester = 'Spring');
SELECT name FROM instructors WHERE course_name NOT IN ('Spring');
SELECT department_name FROM (SELECT department_name, AVG(salary) AS avg_salary FROM professors GROUP BY department_name ORDER BY avg_salary DESC LIMIT 1) AS subquery;
SELECT department, AVG(instructor_salary) as avg_salary FROM instructors GROUP BY department ORDER BY avg_salary DESC LIMIT 1;
SELECT COUNT(*) as num_instructors, AVG(salary) as avg_salary FROM instructors WHERE department_budget = (SELECT MAX(department_budget) FROM departments) GROUP BY department_budget;
SELECT COUNT(*) FROM instructors WHERE department_id = (SELECT department_id FROM departments ORDER BY budget DESC LIMIT 1) AND salary > (SELECT AVG(salary) FROM instructors);
SELECT title, credits FROM courses WHERE classroom_capacity = (SELECT MAX(classroom_capacity) FROM courses);
SELECT title, credits FROM courses WHERE capacity = (SELECT MAX(capacity) FROM classrooms);
SELECT name FROM students WHERE department = 'Biology' AND courses = 0;
SELECT name FROM students WHERE courses_taken = 0 AND courses_taken = 'Biology';
SELECT department, COUNT(*) AS total_students, COUNT(*) AS total_instructors FROM students JOIN instructors ON students.instructor_id = instructors.id GROUP BY department;
SELECT department, COUNT(*) as num_students, COUNT(*) as num_instructors FROM students JOIN instructors ON students.instructor_id = instructors.id GROUP BY department;
SELECT name FROM students WHERE course_title = 'International Finance' AND prerequisite_course_title = 'Prerequisite Course';
SELECT name FROM students WHERE course_id = 'IF' AND prerequisite_id = 'PR';
SELECT name, salary FROM instructors WHERE salary < (SELECT AVG(salary) FROM instructors WHERE department = 'Physics');
SELECT name, salary FROM instructors WHERE department = 'Physics' AND salary < (SELECT AVG(salary) FROM instructors);
SELECT name FROM students WHERE course_name = 'Statistics';
SELECT name FROM students WHERE course = 'Statistics';
SELECT building, room_number, semester, year FROM courses WHERE department = 'Psychology' ORDER BY course_title;
SELECT building, room_number, semester, year, course_title FROM courses WHERE department = 'Psychology' ORDER BY course_title;
SELECT name FROM instructors WHERE department = 'Computer Science';
SELECT name FROM instructors WHERE department = 'Comp. Sci.';
SELECT name FROM instructors WHERE department = 'Comp. Sci.' AND salary > 80000;
SELECT name FROM instructors WHERE department = 'Comp. Sci.' AND salary > 80000;
SELECT instructor_name, course_id FROM instructors WHERE instructor_name IN (SELECT instructor_name FROM courses);
SELECT instructor_name, course_id FROM instructors WHERE course_id IN (SELECT course_id FROM courses);
SELECT name FROM instructors WHERE department = 'Art' AND course_id IS NOT NULL;
SELECT InstructorName, CourseID FROM Instructor WHERE InstructorName IN (SELECT InstructorName FROM Course);
SELECT name FROM instructors WHERE name LIKE '%dar%';
SELECT name FROM instructors WHERE name LIKE '%dar%';
SELECT DISTINCT instructor_name FROM instructors ORDER BY instructor_name ASC;
SELECT DISTINCT name FROM instructors ORDER BY name;
SELECT * FROM courses WHERE semester = 'Fall 2009' OR semester = 'Spring 2010';
SELECT id FROM courses WHERE semester = 'Fall 2009' OR semester = 'Spring 2010';
SELECT * FROM courses WHERE semester = 'Fall 2009' AND semester = 'Spring 2010';
SELECT id FROM courses WHERE course_name = 'Fall 2009' AND course_name = 'Spring 2010';
SELECT * FROM courses WHERE year = '2009' AND year = '2010';
SELECT id FROM courses WHERE semester = 'Fall 2009' AND NOT semester = 'Spring 2010';
SELECT salary FROM instructors WHERE salary < (SELECT MAX(salary) FROM instructors);
SELECT DISTINCT salary FROM instructors WHERE salary < (SELECT MAX(salary) FROM instructors);
SELECT COUNT(*) FROM instructors WHERE course_id = 'INSTRUCTOR_ID' AND semester = '2010-11';
SELECT COUNT(*) FROM instructors WHERE course_id = '101' AND semester = 'Spring 2010';
SELECT department_name, AVG(salary) as avg_salary FROM employees GROUP BY department_name HAVING AVG(salary) > 42000;
SELECT department_name, AVG(salary) FROM employees GROUP BY department_name HAVING AVG(salary) > 42000;
SELECT name FROM instructors WHERE salary > (SELECT salary FROM instructors WHERE department = 'Biology');
SELECT name FROM instructors WHERE department = 'Biology' AND salary > (SELECT salary FROM instructors WHERE department = 'Biology');
SELECT name FROM instructors WHERE salary > (SELECT AVG(salary) FROM instructors WHERE department = 'Biology');
SELECT name FROM instructors WHERE salary > (SELECT MAX(salary) FROM instructors WHERE department = 'Biology');
SELECT COUNT(*) FROM Debates;
SELECT venue FROM debates ORDER BY audience ASC;
SELECT date, venue FROM debates;
SELECT DATE(debate_date) FROM debates WHERE audience > 150;
SELECT name FROM people WHERE age = 35 OR age = 36;
SELECT party FROM people WHERE age = (SELECT MIN(age) FROM people);
SELECT party, COUNT(*) FROM people GROUP BY party;
SELECT party_name, COUNT(*) as num_people FROM party_attendees GROUP BY party_name ORDER BY num_people DESC LIMIT 1;
SELECT DISTINCT venue FROM debates;
SELECT name, date, venue FROM debates WHERE side = 'Affirmative';
SELECT name, date, venue FROM debates WHERE side = 'negative' ORDER BY name ASC;
SELECT name FROM people WHERE side = 'Affirmative' AND audience > 200;
SELECT name, COUNT(*) FROM debates GROUP BY name;
SELECT name FROM debates WHERE side = 'negative' GROUP BY name HAVING COUNT(*) >= 2;
SELECT name FROM people WHERE side = 'negative';
SELECT name FROM customers ORDER BY name ASC;
SELECT name FROM customers ORDER BY name;
SELECT policy_type_code FROM policies WHERE customer_name = 'Dayana Robel';
SELECT type_code FROM policies WHERE customer_name = 'Dayana Robel';
SELECT policy_type FROM policies WHERE frequency = (SELECT MAX(frequency) FROM policies);
SELECT policy_type FROM policies GROUP BY policy_type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT policy_type FROM policies GROUP BY policy_type HAVING COUNT(*) > 2;
SELECT policy_type FROM customers WHERE policy_type IN (SELECT policy_type FROM customers GROUP BY policy_type HAVING COUNT(*) > 2);
SELECT SUM(amount) AS total_amount, AVG(amount) AS average_amount FROM claim_headers;
SELECT SUM(amount) AS total_amount, AVG(amount) AS avg_amount FROM claim_headers;
SELECT SUM(amount) FROM claims WHERE created_at = (SELECT MAX(created_at) FROM claims);
SELECT SUM(amount) FROM claims WHERE created_at = (SELECT MAX(created_at) FROM claims);
SELECT name FROM customer c WHERE claim_amount = (SELECT MAX(claim_amount) FROM claim WHERE customer_id = c.id);
SELECT customer_name, SUM(amount) as total_claim_amount FROM claims GROUP BY customer_name ORDER BY total_claim_amount DESC LIMIT 1;
SELECT name FROM customers WHERE claims_made = (SELECT MIN(claims_made) FROM customers);
SELECT customer_name, SUM(claim_amount) as total_claim_amount FROM claims GROUP BY customer_name ORDER BY total_claim_amount ASC LIMIT 1;
SELECT name FROM customers WHERE policies = NULL;
SELECT name FROM customers WHERE policies = NULL;
There are 5 claim processing stages in total.;
SELECT COUNT(DISTINCT stage) FROM claim_processing;
Claims Processing;
SELECT claim_status_name FROM claim_processing_stage_statistics ORDER BY claim_processing_stage_statistics.claim_processing_stage_statistics_count DESC LIMIT 1;
SELECT name FROM customers WHERE name LIKE '%Diana%';
SELECT * FROM customers WHERE name LIKE '%Diana%';
SELECT name FROM customers WHERE deputy_policy = 'Yes';
SELECT * FROM customers WHERE insurance_policy_type = 'Deputy';
SELECT name FROM customers WHERE policy = 'deputy' OR policy = 'uniformed';
SELECT * FROM customers WHERE insurance_policy_type = 'Deputy' OR insurance_policy_type = 'Uniform';
SELECT name FROM customers, staff;
SELECT name FROM customers, staff;
SELECT policy_type, COUNT(*) FROM policies GROUP BY policy_type;
SELECT policy_type, COUNT(*) FROM policies GROUP BY policy_type;
SELECT customer_name FROM policies GROUP BY customer_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT customer_id, COUNT(*) as num_policies FROM policies GROUP BY customer_id ORDER BY num_policies DESC LIMIT 1;
SELECT * FROM Claims WHERE Status = 'Open';
SELECT claim_description FROM claim_status WHERE status = 'Open';
SELECT COUNT(DISTINCT claim_outcome_code) FROM claims;
SELECT COUNT(DISTINCT claim_outcome_code) FROM claims;
SELECT customer_id FROM policies WHERE policy_date = (SELECT MAX(policy_date) FROM policies);
SELECT customer_name FROM policies WHERE policy_start_date = (SELECT MAX(policy_start_date) FROM policies);
SELECT COUNT(*) FROM accounts;
SELECT COUNT(*) FROM accounts;
SELECT COUNT(*) FROM customers WHERE account_status = 'opened';
SELECT COUNT(*) FROM customers WHERE account_status = 'active';
SELECT id, date_of_account_opened, account_name, other_account_detail FROM accounts;
SELECT id, date_opened, name, other_details FROM accounts;
SELECT id, account_name, other_account_details FROM accounts WHERE first_name = 'Meaghan';
SELECT id, name, date_of_opening, other_details FROM accounts WHERE first_name = 'Meaghan';
SELECT account_name, account_detail FROM accounts WHERE first_name = 'Meaghan' AND last_name = 'Keeling';
SELECT name, address, phone FROM accounts WHERE customer_name = 'Meaghan Keeling';
SELECT first_name, last_name FROM customers WHERE account_name = '900';
SELECT first_name, last_name FROM customers WHERE account_name = '900';
SELECT COUNT(*) FROM customers WHERE account_status = 'No Account';
SELECT COUNT(*) FROM customers WHERE account_status = 'No';
SELECT first_name, last_name, phone_number FROM customers WHERE account_id IS NULL GROUP BY first_name, last_name, phone_number;
SELECT DISTINCT first_name, last_name, phone_number FROM customers WHERE account_status = 'active';
SELECT customer_id FROM customers WHERE account_id IS NULL;
SELECT customer_id FROM customers WHERE account_status = 'Not Active';
SELECT COUNT(*) FROM accounts GROUP BY customer_id;
SELECT COUNT(*) FROM accounts GROUP BY customer_id;
SELECT customer_id, first_name, last_name FROM customers GROUP BY customer_id, first_name, last_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT id, full_name FROM customer WHERE accounts_count = (SELECT MAX(accounts_count) FROM customer);
SELECT id, first_name, last_name, COUNT(*) FROM customers GROUP BY id;
SELECT name, id, COUNT(*) FROM customers GROUP BY name, id;
SELECT first_name, id FROM customers WHERE account_count >= 2;
SELECT first_name, id FROM customers WHERE id IN (SELECT DISTINCT id FROM accounts GROUP BY id HAVING COUNT(*) >= 2);
SELECT COUNT(*) FROM customers;
SELECT COUNT(*) FROM customers;
SELECT gender, COUNT(*) FROM customers GROUP BY gender;
SELECT gender, COUNT(*) FROM customers GROUP BY gender;
SELECT COUNT(*) FROM transactions;
SELECT COUNT(*) FROM transactions;
SELECT account_id, COUNT(transaction_id) FROM transactions GROUP BY account_id;
SELECT COUNT(*) FROM transactions WHERE account_id =?;
SELECT COUNT(*) FROM transactions WHERE account_number = 337;
SELECT COUNT(*) FROM transactions WHERE account_number = 337;
SELECT AVG(amount), MIN(amount), MAX(amount), SUM(amount) FROM transactions;
SELECT AVG(amount) AS avg_amount, MIN(amount) AS min_amount, MAX(amount) AS max_amount, SUM(amount) AS total_amount FROM transactions;
SELECT id FROM transactions WHERE amount > (SELECT AVG(amount) FROM transactions);
SELECT id FROM transactions WHERE amount > (SELECT AVG(amount) FROM transactions);
SELECT transaction_type, SUM(amount) FROM transactions GROUP BY transaction_type;
SELECT transaction_type, SUM(amount) FROM transactions GROUP BY transaction_type;
SELECT account_name, account_id, COUNT(transaction_id) FROM accounts GROUP BY account_name, account_id;
SELECT name, id, COUNT(*) FROM accounts GROUP BY name, id;
SELECT account_id FROM transactions GROUP BY account_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT id FROM accounts ORDER BY transactions DESC LIMIT 1;
SELECT account_id, name FROM accounts WHERE transactions > 3;
SELECT id, name FROM accounts WHERE transactions >= 4;
SELECT * FROM products WHERE size IN ('S', 'M', 'L', 'XL');
SELECT size FROM products;
SELECT color FROM products;
SELECT color FROM products;
SELECT invoice_number, COUNT(transaction_number) FROM invoices GROUP BY invoice_number;
SELECT COUNT(*) FROM transactions WHERE invoice_number =?;
SELECT invoice_number, invoice_date FROM invoices ORDER BY COUNT(transaction_id) DESC LIMIT 1;
SELECT invoice_number, invoice_date FROM invoices ORDER BY COUNT(transaction_id) DESC LIMIT 1;
SELECT COUNT(invoice_id) FROM invoices;
SELECT COUNT(*) FROM invoices;
SELECT invoice_date, order_id, details FROM invoices;
SELECT invoice_date, order_id, order_details FROM invoices;
SELECT order_id, COUNT(invoice_id) FROM orders GROUP BY order_id;
SELECT COUNT(invoice_id) FROM orders GROUP BY order_id;
SELECT order_id, order_details FROM orders WHERE order_id IN (SELECT order_id FROM orders WHERE invoices > 2);
SELECT order_id, order_details FROM orders WHERE order_details > 1;
SELECT customer_last_name, customer_id, customer_phone_number, COUNT(*) as num_orders FROM orders GROUP BY customer_last_name, customer_id, customer_phone_number ORDER BY num_orders DESC;
SELECT last_name, id, phone_number FROM customers WHERE id = (SELECT MAX(id) FROM orders);
SELECT product_name FROM products WHERE order_id IS NULL;
SELECT name FROM products WHERE id NOT IN (SELECT product_id FROM orders);
SELECT product_name, SUM(quantity_ordered) FROM orders GROUP BY product_name;
SELECT product_name, SUM(quantity_ordered) FROM orders GROUP BY product_name;
SELECT order_id, COUNT(item_id) FROM orders GROUP BY order_id;
SELECT COUNT(order_item_id) FROM order_items GROUP BY order_id;
SELECT product_id, COUNT(DISTINCT order_id) FROM orders GROUP BY product_id;
SELECT product_id, COUNT(DISTINCT order_id) FROM orders GROUP BY product_id;
SELECT product_name, COUNT(customer_id) FROM orders GROUP BY product_name;
SELECT product_name, COUNT(customer_id) FROM orders GROUP BY product_name;
SELECT order_id, COUNT(product_id) FROM orders GROUP BY order_id;
SELECT COUNT(DISTINCT product_id) FROM orders;
SELECT order_id, SUM(quantity) FROM orders GROUP BY order_id;
SELECT order_id, SUM(quantity) as total_quantity FROM orders GROUP BY order_id;
SELECT COUNT(*) FROM products WHERE id NOT IN (SELECT product_id FROM orders);
SELECT COUNT(*) FROM Products WHERE OrderID IS NULL;
SELECT COUNT(*) FROM churches WHERE opening_date < '1850-01-01';
SELECT name, open_date, organizer FROM churches;
SELECT church_name, opening_date FROM churches ORDER BY opening_date DESC;
SELECT year FROM churches WHERE opening_year >= 2000 GROUP BY year HAVING COUNT(*) >= 2;
SELECT organizer, name FROM churches WHERE opening_year BETWEEN 1830 AND 1840;
SELECT YEAR(opening_date) AS year, COUNT(*) AS num_churches FROM churches GROUP BY YEAR(opening_date);
SELECT name, opening_year FROM churches ORDER BY opening_year DESC LIMIT 3;
SELECT COUNT(*) FROM people WHERE gender = 'female' AND age > 30;
SELECT country FROM people WHERE age > 30 AND age < 25;
SELECT MIN(age), MAX(age), AVG(age) FROM people;
SELECT name, country FROM people WHERE age < (SELECT AVG(age) FROM people);
SELECT name, gender FROM weddings WHERE year > 2014 GROUP BY gender;
SELECT name, age FROM people WHERE gender ='male' AND wedding = NULL;
SELECT church_name FROM church_events WHERE wedding_year!= 2015;
SELECT church_name FROM church_weddings GROUP BY church_name HAVING COUNT(*) = 2;
SELECT name FROM females WHERE country = 'Canada' AND wedding_year = 2016;
SELECT COUNT(*) FROM weddings WHERE year = 2016;
SELECT church_name FROM weddings WHERE age > 30;
SELECT country, COUNT(*) FROM people GROUP BY country;
SELECT COUNT(*) FROM churches WHERE wedding_year = 2016;
SELECT COUNT(*) FROM artists;
SELECT COUNT(*) FROM artists;
SELECT artist_name, age, country FROM artist_info ORDER BY joined_year ASC;
SELECT name, age, country FROM artists ORDER BY year_joined ASC;
SELECT DISTINCT country FROM artists;
SELECT country FROM artists;
SELECT artist_name, year_joined FROM artist_table WHERE country!= 'United States';
SELECT name, year_of_joining FROM artists WHERE country!= 'United States';
SELECT COUNT(*) FROM artists WHERE age > 46 AND joined_after_1990;
SELECT COUNT(*) FROM artists WHERE age > 46 AND joined_date > '1990-01-01';
SELECT AVG(age) AS average_age, MIN(age) AS min_age FROM artists WHERE country = 'United States';
SELECT AVG(age) AS average_age, MIN(age) AS min_age FROM artists WHERE country = 'United States';
SELECT artist_name FROM latest WHERE artist_name = 'John Doe';
SELECT artist_name FROM artist JOIN join_year ON artist_name = join_year.artist_name ORDER BY join_year.join_year DESC LIMIT 1;
SELECT COUNT(*) FROM exhibitions WHERE year >= 2005;
SELECT COUNT(*) FROM exhibitions WHERE year >= 2005;
SELECT theme, year FROM exhibitions WHERE ticket_price < 15;
SELECT theme, year FROM exhibitions WHERE ticket_price < 15;
SELECT artist_name, COUNT(exhibition_id) FROM exhibitions GROUP BY artist_name;
SELECT artist, COUNT(exhibition) FROM exhibitions GROUP BY artist;
SELECT artist_name, country FROM artist_exhibitions ORDER BY num_exhibitions DESC LIMIT 1;
SELECT name, country FROM artist WHERE num_exhibitions = (SELECT MAX(num_exhibitions) FROM artist);
SELECT name FROM artists WHERE exhibition = NULL;
SELECT name FROM artists WHERE exhibitions = 0;
SELECT theme, artist FROM exhibition WHERE ticket_price > (SELECT AVG(ticket_price) FROM exhibition);
SELECT artist, theme FROM exhibitions WHERE ticket_price > (SELECT AVG(ticket_price) FROM exhibitions);
SELECT AVG(price) AS average_price, MIN(price) AS minimum_price, MAX(price) AS maximum_price FROM exhibitions WHERE year < 2009 GROUP BY year;
SELECT AVG(price) AS average_price, MIN(price) AS minimum_price, MAX(price) AS maximum_price FROM exhibitions WHERE year < 2009;
SELECT theme, year, ticket_price FROM exhibitions ORDER BY ticket_price DESC;
SELECT theme, year, price FROM exhibitions ORDER BY price DESC;
SELECT theme, date, attendance FROM exhibition WHERE year = 2004;
SELECT themes, dates, attendance FROM exhibitions WHERE year = 2004;
SELECT artist_name FROM artist WHERE EXISTS (SELECT 1 FROM exhibition WHERE artist_name = artist_name);
SELECT name FROM artists WHERE year_of_exhibition < 2004;
SELECT theme FROM exhibitions WHERE attendance_count BETWEEN 100 AND 500;
SELECT theme, exhibition, attendance FROM exhibitions WHERE attendance < 100 AND attendance > 500;
SELECT COUNT(*) FROM exhibitions WHERE attendance > 100 OR ticket_price < 10;
SELECT COUNT(*) FROM exhibitions WHERE attendance > 100 OR ticket_price < 10;
SELECT artist_name FROM artists WHERE average_attendance > 200;
SELECT artist_name FROM exhibitions WHERE average_attendance > 200;
SELECT id FROM items WHERE title = 'orange';
SELECT * FROM item;
SELECT COUNT(*) FROM reviews;
SELECT COUNT(*) FROM users;
SELECT AVG(rating) AS average_rating, MAX(rating) AS max_rating FROM reviews;
SELECT MAX(rank) FROM reviews;
SELECT COUNT(DISTINCT user_id) FROM reviews;
SELECT COUNT(DISTINCT item_id) FROM reviews WHERE user_id IN (SELECT user_id FROM users WHERE user_type ='reviewer');
SELECT COUNT(*) FROM items WHERE review_count = 0;
SELECT name FROM users WHERE review_count = 0;
SELECT name FROM goods WHERE rating = 10;
SELECT title FROM items WHERE rating > (SELECT AVG(rating) FROM items);
SELECT title FROM items WHERE rating < 5;
SELECT title FROM items WHERE rating > 8 AND rating < 5;
SELECT name FROM items WHERE rank > 3 AND average_rating > 5;
SELECT item_name FROM items WHERE avg_rating = (SELECT MIN(avg_rating) FROM items);
SELECT title FROM items ORDER BY title ASC;
SELECT name FROM user WHERE reviews = (SELECT MAX(reviews) FROM user);
SELECT name, id FROM items WHERE rating = (SELECT AVG(rating) FROM items GROUP BY id) ORDER BY AVG(rating) DESC LIMIT 1;
SELECT name, id FROM good WHERE (SELECT AVG(rank) FROM good) = (SELECT MAX(AVG(rank)) FROM good);
SELECT name, AVG(rating) FROM reviews GROUP BY name;
SELECT name, COUNT(*) FROM reviews GROUP BY name;
SELECT name FROM users WHERE rating = (SELECT MAX(rating) FROM users);
SELECT source_user_name FROM source_user_trust_scores GROUP BY source_user_name ORDER BY AVG(trust_score) DESC LIMIT 1;
SELECT name, AVG(trust_score) FROM users WHERE target_user_id = user_id GROUP BY name;
SELECT name FROM users WHERE trust_score = (SELECT MIN(trust_score) FROM users);
SELECT name FROM items WHERE review_count = 0;
SELECT name FROM users WHERE review_count = 0;
SELECT COUNT(*) FROM users WHERE reviews IS NULL;
SELECT COUNT(*) FROM items WHERE review_count = 0;
SELECT COUNT(*) FROM players;
SELECT name FROM players ORDER BY votes ASC;
SELECT gender, occupation FROM players;
SELECT name, residence FROM players WHERE occupation!= 'Researcher';
SELECT sponsor FROM players WHERE residence = 'Brandon' OR residence = 'Birtle';
SELECT name FROM players WHERE votes = (SELECT MAX(votes) FROM players);
SELECT occupation, COUNT(*) FROM players GROUP BY occupation;
SELECT occupation, COUNT(*) as count FROM players GROUP BY occupation ORDER BY count DESC LIMIT 1;
SELECT residences.name, residences.address, residences.city, residences.state, residences.zip, residences.players.name, residences.players.address, residences.players.city, residences.players.state, residences.players.zip FROM residences JOIN players ON;
SELECT players.name, coaches.name FROM players INNER JOIN coaches ON players.coach_id = coaches.id;
SELECT name FROM players WHERE coach_rank = 1;
SELECT name, gender FROM players WHERE coach_start_year > 2011;
SELECT player_name, coach_name FROM players_votes ORDER BY player_votes DESC;
SELECT name FROM players WHERE coach IS NULL;
SELECT residences.* FROM residences WHERE gender = 'M' AND gender = 'F';
SELECT club_id, name, COUNT(coach_id) FROM coaches GROUP BY club_id, name;
SELECT COUNT(*) FROM clubs WHERE coaches = (SELECT MAX(coaches) FROM clubs);
SELECT COUNT(*) FROM gymnasts;
SELECT COUNT(*) FROM gymnasts;
SELECT SUM(points) FROM gymnasts ORDER BY SUM(points) DESC;
SELECT SUM(points) as total_points FROM gymnasts ORDER BY total_points DESC;
SELECT gymnast_name, floor_exercise_points FROM gymnasts ORDER BY floor_exercise_points DESC;
SELECT gymnast_name, floor_exercise_points FROM gymnasts ORDER BY floor_exercise_points DESC;
SELECT AVG(horizontal_bar_points) FROM gymnasts;
SELECT AVG(horizontal_bar_points) FROM gymnasts;
SELECT name FROM people ORDER BY name ASC;
SELECT name FROM people ORDER BY name;
SELECT name FROM gymnasts;
SELECT name FROM gymnasts;
SELECT name FROM gymnasts WHERE hometown!= 'Santo Domingo';
SELECT name FROM gymnasts WHERE city!= 'Santo Domingo';
SELECT MAX(age) FROM people WHERE height = 'tallest';
SELECT age FROM person WHERE height = (SELECT MAX(height) FROM person);
SELECT name FROM people ORDER BY age DESC LIMIT 5;
SELECT name FROM people ORDER BY age DESC LIMIT 5;
SELECT SUM(points) FROM gymnasts WHERE age = (SELECT MIN(age) FROM gymnasts);
SELECT SUM(points) FROM gymnast WHERE age = (SELECT MIN(age) FROM gymnast);
SELECT AVG(age) FROM gymnasts;
SELECT AVG(age) FROM gymnasts;
SELECT DISTINCT hometown FROM gymnasts WHERE total_points > 57.5;
SELECT hometown FROM gymnasts WHERE total_score > 57.5;
SELECT gymnast_name, hometown FROM gymnasts GROUP BY hometown;
SELECT hometown, COUNT(*) FROM gymnasts GROUP BY hometown;
The most common hometown of gymnasts is Moscow.;
SELECT hometown FROM gymnasts GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT hometown FROM gymnasts WHERE COUNT(*) > 1;
SELECT hometown FROM gymnasts WHERE gymnasts.hometown IN (SELECT hometown FROM gymnasts GROUP BY hometown HAVING COUNT(*) > 1);
SELECT name FROM gymnasts ORDER BY height ASC;
SELECT name FROM gymnasts ORDER BY height ASC;
SELECT DISTINCT hometown FROM gymnasts WHERE hometown IS NULL;
SELECT hometown FROM gymnasts WHERE hometown IS NULL;
SELECT hometown FROM people WHERE age > 23 AND age < 20;
SELECT hometown FROM people WHERE age > 23 AND age < 20;
SELECT COUNT(DISTINCT hometown) FROM people;
SELECT COUNT(DISTINCT hometown) FROM people;
SELECT age FROM gymnasts ORDER BY total_points DESC;
SELECT age, SUM(points) as total_points FROM gymnasts GROUP BY age ORDER BY total_points DESC;
SELECT SUM(savings_balance) FROM accounts WHERE account_name!= 'Brown';
SELECT SUM(balance) FROM accounts WHERE name NOT LIKE '%Brown%';
SELECT COUNT(*) FROM accounts;
SELECT COUNT(*) FROM accounts;
SELECT SUM(checking_balance) FROM accounts;
SELECT SUM(balance) FROM accounts WHERE account_type = 'checking';
SELECT AVG(checking_balance) FROM accounts;
SELECT AVG(balance) FROM accounts WHERE account_type = 'checking';
SELECT COUNT(*) FROM accounts WHERE savings > (SELECT AVG(savings) FROM accounts);
SELECT COUNT(*) FROM accounts WHERE savings_balance > (SELECT AVG(savings_balance) FROM accounts);
SELECT name, id FROM accounts WHERE checking_balance < (SELECT MAX(checking_balance) FROM accounts);
SELECT customer_id, name FROM accounts WHERE checking_balance < (SELECT MAX(checking_balance) FROM accounts);
SELECT * FROM accounts WHERE owner_name LIKE '%ee%' AND balance > 0;
SELECT balance FROM accounts WHERE owner_name LIKE '%ee%';
SELECT checking_balance, saving_balance FROM browns_account;
SELECT checking_balance, savings_balance FROM accounts WHERE account_name = 'Brown';
SELECT name FROM accounts WHERE checking_balance > (SELECT AVG(checking_balance) FROM accounts) AND savings_balance < (SELECT AVG(savings_balance) FROM accounts);
SELECT name FROM accounts WHERE checking_balance > (SELECT AVG(checking_balance) FROM accounts) AND savings_balance < (SELECT AVG(savings_balance) FROM accounts);
SELECT * FROM accounts WHERE savings_balance > (SELECT AVG(savings_balance) FROM accounts);
SELECT balance FROM checking_accounts WHERE savings_balance > (SELECT AVG(savings_balance) FROM checking_accounts);
SELECT name FROM customers ORDER BY name ASC;
SELECT name FROM customers ORDER BY name ASC;
SELECT name FROM accounts WHERE (total_checking + total_savings) = (SELECT MIN(total_checking + total_savings) FROM accounts);
SELECT name FROM accounts WHERE (checking_balance + savings_balance) = (SELECT MIN(checking_balance + savings_balance) FROM accounts);
SELECT name, checking_balance, savings_balance FROM accounts WHERE savings_balance > (SELECT AVG(savings_balance) FROM accounts);
SELECT name, SUM(balance) FROM accounts WHERE balance > (SELECT AVG(balance) FROM accounts) GROUP BY name;
SELECT name, checking_balance FROM accounts WHERE savings_balance = (SELECT MIN(savings_balance) FROM accounts);
SELECT name, balance FROM checking_accounts WHERE customer_id = (SELECT customer_id FROM savings_accounts ORDER BY savings_balance ASC LIMIT 1);
SELECT COUNT(*) FROM accounts WHERE account_name = 'John Doe';
SELECT name, COUNT(*) FROM customers WHERE account_type = 'checking' GROUP BY name;
SELECT account_name, SUM(saving_balance) FROM accounts GROUP BY account_name;
SELECT name, SUM(savings) FROM customers WHERE account_status = 'active' GROUP BY name;
SELECT name FROM accounts WHERE checking_balance < (SELECT AVG(checking_balance) FROM accounts);
SELECT name FROM customers WHERE checking_balance < (SELECT AVG(checking_balance) FROM customers);
SELECT saving_balance FROM accounts WHERE checking_balance = (SELECT MAX(checking_balance) FROM accounts);
SELECT SUM(savings_balance) FROM accounts WHERE checking_balance = (SELECT MAX(checking_balance) FROM accounts);
SELECT SUM(checking_balance) AS total_checking_balance, SUM(saving_balance) AS total_saving_balance FROM accounts GROUP BY account_number ORDER BY total_checking_balance ASC;
SELECT SUM(checking_balance) + SUM(savings_balance) AS total_balance FROM customers ORDER BY total_balance DESC;
SELECT name, checking_balance FROM accounts WHERE saving_balance = (SELECT MIN(saving_balance) FROM accounts);
SELECT name, checking_balance FROM accounts WHERE savings_balance = (SELECT MIN(savings_balance) FROM accounts);
SELECT name, checking_balance, saving_balance FROM accounts;
SELECT name, checking_balance, savings_balance FROM customers;
SELECT name, checking_balance, savings_balance FROM accounts ORDER BY (checking_balance + savings_balance) DESC;
SELECT name, checking_balance, savings_balance FROM customers ORDER BY (checking_balance + savings_balance) DESC;
SELECT name FROM accounts WHERE checking_balance > saving_balance;
SELECT name FROM customers WHERE checking_balance > savings_balance;
SELECT name, checking_balance, savings_balance FROM accounts WHERE savings_balance < checking_balance;
SELECT name, (checking_balance - savings_balance) AS difference FROM customers WHERE savings_balance < checking_balance;
SELECT name, savings_balance FROM accounts ORDER BY savings_balance DESC LIMIT 3;
SELECT name, savings_balance FROM accounts ORDER BY savings_balance DESC LIMIT 3;
SELECT COUNT(*) FROM main_stream_browsers WHERE market_share >= 5;
SELECT browser_name, market_share FROM browsers ORDER BY market_share DESC;
SELECT id, name, market_share FROM browsers;
SELECT MAX(market_share), MIN(market_share), AVG(market_share) FROM browsers;
SELECT id, market_share FROM browsers WHERE name = 'Safari';
SELECT name, os FROM web_client_accelerators WHERE connection_type = 'Broadband' AND (os = 'Windows' OR os = 'MacOS' OR os = 'Linux');
The browser that became compatible with the accelerator 'CProxy' after year 1998 is 'Firefox'.;
SELECT id, name FROM web_accelerators WHERE compatible_browsers >= 2;
SELECT browser_id, browser_name FROM browser_compatibility WHERE web_accelerator_id IN (SELECT web_accelerator_id FROM web_accelerator_compatibility GROUP BY web_accelerator_id HAVING COUNT(*) = (SELECT MAX(;
The web accelerator 'CACHEbox' and browser 'Internet Explorer' became compatible on June 1, 1999.;
SELECT COUNT(DISTINCT client_name) FROM web_clients_accelerators;
SELECT COUNT(*) FROM accelerators WHERE browser NOT IN ('Chrome', 'Firefox', 'Safari');
SELECT distinct_accelerator_name FROM brow_answer WHERE market_share > 15;
SELECT browser_name FROM browsers WHERE browser_name IN ('CACHEbox', 'Fasterfox');
SELECT name, operating_system FROM accelerator WHERE name NOT IN ('Opera');
SELECT name FROM accelerators WHERE name LIKE '%Opera%';
SELECT Operating_System, COUNT(*) FROM Web_Accelerators GROUP BY Operating_System;
SELECT browser_name, year FROM compatible_browsers ORDER BY year DESC;
SELECT COUNT(*) FROM wrestlers;
SELECT COUNT(*) FROM wrestlers;
SELECT name FROM wrestlers ORDER BY days_held DESC;
SELECT name, days_held FROM wrestlers ORDER BY days_held DESC;
SELECT name FROM wrestlers WHERE days_held = (SELECT MIN(days_held) FROM wrestlers);
SELECT wrestler_name FROM wrestler_stats WHERE days_held = (SELECT MIN(days_held) FROM wrestler_stats);
SELECT DISTINCT name FROM wrestlers WHERE location!= 'Tokyo,Japan';
SELECT * FROM wrestlers WHERE location!= 'Tokyo, Japan';
SELECT name, location FROM wrestlers;
SELECT name, location FROM wrestlers;
SELECT * FROM wrestlers WHERE team = 'Team Orton' ORDER BY elimination_move ASC;
SELECT * FROM elimination_movies WHERE wrestler_name = 'Team Orton';
SELECT wrestler_name, elimination_move FROM wrestlers;
SELECT wrestler_name, elimination_move FROM wrestlers;
SELECT name, team FROM wrestlers ORDER BY days_held DESC;
SELECT name, team FROM wrestlers ORDER BY days_held DESC;
SELECT time_elimination FROM wrestlers WHERE days_held = (SELECT MAX(days_held) FROM wrestlers);
SELECT time_elimination FROM wrestlers WHERE days_held = (SELECT MAX(days_held) FROM wrestlers);
SELECT * FROM wrestlers WHERE days_held > 50;
SELECT time FROM wrestlers WHERE days_held > 50 ORDER BY time ASC;
SELECT team, COUNT(*) FROM eliminations GROUP BY team;
SELECT team, COUNT(elimination) FROM matches GROUP BY team;
SELECT team_name FROM teams WHERE eliminations > 3;
SELECT team_name FROM matches WHERE eliminations > 3;
SELECT reign, days_held FROM wrestlers;
SELECT reigns, days FROM wrestlers;
SELECT name FROM wrestlers WHERE days < 100;
SELECT name FROM wrestlers WHERE days_held < 100;
SELECT * FROM wrestlers WHERE reigns = (SELECT MAX(reigns) FROM wrestlers);
The reign of the most common wrestler is the most common reign. SELECT reign AS most_common_reign FROM wrestlers GROUP BY reign ORDER BY COUNT(*) DESC LIM;
SELECT location FROM wrestlers WHERE location IN (SELECT location FROM wrestlers GROUP BY location HAVING COUNT(location) > 2);
SELECT location FROM wrestlers WHERE location IN (SELECT location FROM wrestlers GROUP BY location HAVING COUNT(location) > 2);
SELECT name FROM wrestlers WHERE eliminated = 'No';
SELECT name FROM wrestlers WHERE eliminated = 0;
SELECT teams.name FROM teams INNER JOIN wrestlers ON teams.team_id = wrestlers.team_id INNER JOIN results ON wrestlers.wrestler_id = results.wrestler_id WHERE results.wrestler_name = 'Or';
SELECT team FROM matches WHERE (wrestler_name = 'Orton' OR wrestler_name = 'Benjamin') AND (wrestler_name = 'Team A' OR wrestler_name = 'Team B');
SELECT COUNT(DISTINCT team) FROM matches WHERE result = 'Elimination';
SELECT COUNT(DISTINCT team_name) FROM matches WHERE match_type = 'elimination';
SELECT * FROM elimination_times WHERE player = 'Punk' OR player = 'Orton';
SELECT time FROM instances WHERE elimination_method = 'Punk' OR elimination_method = 'Orton';
SELECT COUNT(*) FROM schools;
SELECT COUNT(*) FROM schools;
SELECT school_name FROM schools ORDER BY school_name ASC;
SELECT name, location, mascot FROM schools;
SELECT SUM(enrollment) AS total_enrollment, AVG(enrollment) AS average_enrollment FROM schools;
SELECT school_name, mascot FROM schools WHERE enrollment > (SELECT AVG(enrollment) FROM schools);
SELECT school_name FROM schools ORDER BY enrollment ASC LIMIT 1;
SELECT AVG(enrollment), MAX(enrollment), MIN(enrollment) FROM schools;
SELECT county, COUNT(school) AS num_schools, SUM(enrollment) AS total_enrollment FROM schools GROUP BY county;
SELECT COUNT(*) FROM donors WHERE endowment = 'Glenn';
SELECT name, amount FROM donors ORDER BY amount DESC;
SELECT school_name FROM schools WHERE endowment = 0;
SELECT name FROM schools WHERE endowment <= 10;
SELECT DISTINCT donors.name FROM donors INNER JOIN donations ON donors.id = donations.donor_id WHERE donations.school_name = 'Glenn' AND donations.school_name = 'Triton';
SELECT name FROM donors WHERE donation_amount >= 9;
SELECT MAX(amount) as largest_amount, donor_name FROM donations WHERE amount > 500;
SELECT COUNT(*) FROM budgets WHERE year >= 2001 AND budget > 3000;
SELECT COUNT(*) FROM budgets WHERE budgeted_amount > 3000 AND year <= 2001;
SELECT school_name, budgeted_amount, invested_amount FROM schools WHERE year >= 2002;
SELECT donor_name FROM donors;
SELECT COUNT(*) FROM budget WHERE budget_amount < invested_amount;
SELECT SUM(budget) FROM school WHERE name = 'Glenn';
SELECT name FROM schools WHERE total_budget > 100 OR total_endowment > 10;
SELECT school_name FROM schools WHERE donor_name IN (SELECT donor_name FROM donors WHERE donation_amount > 8.5) GROUP BY school_name HAVING COUNT(*) > 1;
SELECT COUNT(DISTINCT school_id) FROM donors WHERE donation_amount < 8.5 GROUP BY school_id HAVING COUNT(DISTINCT school_id) > 1;
SELECT name, IHSAA_Football_Class, Mascot, (budgeted_amount / total_budgeted_amount) * 100 AS percent_invested, (budgeted_amount / total_budgeted_amount) * 100 AS percent_total FROM schools WHERE budgeted_;
SELECT COUNT(*) FROM buildings;
SELECT name, street_address, number_of_floors FROM buildings ORDER BY number_of_floors;
SELECT name FROM buildings WHERE height = (SELECT MAX(height) FROM buildings);
SELECT AVG(floors), MAX(floors), MIN(floors) FROM buildings;
SELECT COUNT(*) FROM buildings WHERE height > (SELECT AVG(height) FROM buildings) OR floors > (SELECT AVG(floors) FROM buildings);
SELECT name FROM buildings WHERE height >= 200 AND floors >= 20;
SELECT name, location FROM institutions WHERE type = 'Private' AND year_founded > 1990;
SELECT institution_type, COUNT(*) AS num_institutions, SUM(enrollment) AS total_enrollment FROM institutions GROUP BY institution_type;
SELECT institution_type, COUNT(*) as num_institutions FROM institutions GROUP BY institution_type ORDER BY num_institutions DESC LIMIT 1;
SELECT institution_type FROM institutions WHERE institution_type IN (SELECT institution_type FROM institutions WHERE institution_founded > '1990') AND institution_enrollment >= 1000;
SELECT name FROM buildings WHERE institution IS NULL;
SELECT name FROM buildings WHERE institution_founded_year < 2003;
SELECT building_name, COUNT(institution_name) FROM building GROUP BY building_name;
SELECT name, height FROM buildings WHERE founded_after_1880 >= 2;
SELECT DISTINCT institution_type FROM institutions;
SELECT institution, COUNT(protein_id) FROM proteins GROUP BY institution;
SELECT COUNT(*) FROM proteins WHERE institution_founded_year > 1880 OR institution_type = 'Private';
SELECT protein_name, institution_name FROM proteins;
SELECT COUNT(*) FROM proteins WHERE institution_name = 'ABC' AND building_name = 'XYZ' AND floor_number >= 20;
SELECT COUNT(*) FROM institutions WHERE protein_id IS NULL;
SELECT location FROM cinemas WHERE capacity <= 800;
SELECT location FROM cinemas WHERE year(opening_date) = 2010 AND year(opening_date) = 2011;
SELECT COUNT(*) FROM cinemas;
SELECT COUNT(*) FROM cinemas;
SELECT name, opening_year, capacity FROM cinemas;
SELECT cinema_name, location FROM cinemas WHERE capacity > (SELECT AVG(capacity) FROM cinemas);
SELECT location_name FROM locations WHERE cinema_type = 'cinema';
SELECT DISTINCT location FROM locations WHERE cinema = 1;
SELECT cinema_name, opening_year FROM cinemas ORDER BY opening_year DESC;
SELECT name, location FROM cinema WHERE capacity = (SELECT MAX(capacity) FROM cinema);
SELECT AVG(capacity) AS avg_capacity, MIN(capacity) AS min_capacity, MAX(capacity) AS max_capacity FROM cinemas WHERE year >= 2011;
SELECT location, COUNT(*) FROM cinemas GROUP BY location;
SELECT location, COUNT(*) FROM cinemas WHERE year >= 2010 GROUP BY location ORDER BY COUNT(*) DESC LIMIT 1;
SELECT location_id, COUNT(*) as num_cinemas FROM locations WHERE num_cinemas >= 2 GROUP BY location_id HAVING num_cinemas > 2;
SELECT location, COUNT(*) FROM cinemas WHERE capacity > 300 GROUP BY location HAVING COUNT(*) >= 2;
SELECT title, director FROM films;
SELECT title, director FROM films;
SELECT * FROM directors;
SELECT director FROM directors;
SELECT director, COUNT(*) as num_films FROM director_films GROUP BY director;
SELECT cinema, SUM(show_time) as total_show_time FROM show_times GROUP BY cinema;
SELECT title, MAX(price) FROM films GROUP BY title;
SELECT title, MAX(price) FROM films GROUP BY title;
SELECT cinema_name, film_title, date, price FROM schedule;
SELECT title, director FROM films WHERE schedule IS NULL;
SELECT director, COUNT(*) as total_shows FROM show_times GROUP BY director ORDER BY total_shows DESC LIMIT 1;
SELECT location_name FROM locations WHERE location_name IN (SELECT location_name FROM theaters WHERE capacity > 300 GROUP BY location_name HAVING COUNT(*) > 1);
SELECT location, COUNT(*) FROM theaters WHERE capacity > 300 GROUP BY location HAVING COUNT(*) > 1;
SELECT COUNT(*) FROM films WHERE title LIKE '%Dummy%';
SELECT COUNT(*) FROM films WHERE title LIKE '%Dummy%';
Yes, the customers holding coupons with amount 500 are bad. SELECT * FROM customers WHERE coupon_amount = 500;
SELECT customer_id, first_name, COUNT(*) FROM bookings GROUP BY customer_id, first_name;
SELECT customer_id, MAX(amount) FROM payments GROUP BY customer_id;
SELECT id, amount FROM Booking WHERE payment_count = (SELECT MAX(payment_count) FROM Booking);
SELECT id FROM products WHERE booking_count = 3;
SELECT product_description FROM bookings WHERE amount = 102.76;
SELECT start_date, end_date FROM booking WHERE product_name = 'Book collection A';
SELECT name FROM products WHERE availability = 1;
SELECT COUNT(DISTINCT product_type) FROM products;
SELECT first_name, last_name, gender FROM customers WHERE good_customer = 1 ORDER BY last_name;
SELECT AVG(amount_due) FROM payments;
SELECT MAX(booked_count), MIN(booked_count), AVG(booked_count) FROM products;
SELECT DISTINCT payment_type FROM payments;
SELECT SUM(daily_hires) FROM products WHERE name LIKE '%Book%';
SELECT COUNT(*) FROM Products WHERE amount <= 200;
SELECT coupon_amount FROM coupons WHERE customer_id IN (SELECT customer_id FROM customers WHERE customer_type = 'good') AND coupon_id IN (SELECT coupon_id FROM coupons WHERE coupon_type = 'bad');
SELECT payment_date FROM payments WHERE amount_paid > 300 OR payment_type = 'Check';
SELECT name, description FROM products WHERE type = 'Cutlery' AND daily_hire_cost < 20;
SELECT COUNT(*) FROM phones;
SELECT name FROM phones ORDER BY price ASC;
SELECT memory, carrier FROM phones;
SELECT DISTINCT carrier FROM phones WHERE memory > 32;
SELECT name FROM phones WHERE carrier IN ('Sprint', 'TMobile');
The most expensive phone is the iPhone 12 Pro Max. SELECT * FROM phones WHERE price = (SELECT MAX(price) FROM phones);
SELECT carrier, COUNT(number) FROM phones GROUP BY carrier;
SELECT carrier, COUNT(*) as frequency FROM phones GROUP BY carrier ORDER BY frequency DESC LIMIT 1;
SELECT * FROM carriers WHERE memory < 32 AND memory > 64;
SELECT phone_name, district FROM phones;
SELECT phone_name, district_name FROM phones_districts ORDER BY market_ranking ASC;
SELECT name FROM phones WHERE number_of_shops > 50;
SELECT phone.name, SUM(stock.quantity) FROM phone JOIN stock ON phone.phone_number = stock.phone_number GROUP BY phone.phone_number;
SELECT name FROM phones WHERE total_stock > 2000 ORDER BY total_stock DESC;
SELECT name FROM phones WHERE market IS NULL;
SELECT COUNT(*) FROM gas_companies;
SELECT COUNT(*) FROM companies;
SELECT company_name, rank FROM companies ORDER BY sales DESC;
SELECT name, rank FROM companies ORDER BY sales DESC;
SELECT company_name, main_industry FROM companies WHERE country!= 'USA';
SELECT company_name, industry FROM companies WHERE country!= 'United States' ORDER BY company_name;
SELECT company_name, headquarters FROM company ORDER BY market_value DESC;
SELECT name, headquarters FROM companies ORDER BY market_value DESC;
SELECT MIN(market_value), MAX(market_value), AVG(market_value) FROM companies;
SELECT MIN(market_value) AS min_value, MAX(market_value) AS max_value, AVG(market_value) AS avg_value FROM company_data;
SELECT industry FROM companies;
SELECT industry FROM companies;
SELECT headquarters, COUNT(*) FROM companies GROUP BY headquarters;
SELECT HQ, COUNT(*) FROM Company GROUP BY HQ;
SELECT industry, SUM(market_value) FROM industry_data GROUP BY industry;
SELECT industry, SUM(market_value) FROM industry_data GROUP BY industry;
SELECT industry, SUM(market_value) as total_value, COUNT(company_id) as num_companies FROM companies GROUP BY industry ORDER BY total_value DESC LIMIT 1;
SELECT industry, SUM(total_market_value) as total_value FROM companies GROUP BY industry ORDER BY total_value DESC LIMIT 1;
SELECT headquarters FROM companies WHERE industry = 'banking' GROUP BY headquarters HAVING COUNT(*) >= 2;
SELECT headquarters.name, headquarters.address FROM headquarters INNER JOIN companies ON headquarters.id = companies.headquarters_id WHERE companies.industry = 'banking' GROUP BY headquarters.id HAVING COUNT(*);
SELECT gas_station_id, location, manager_name FROM gas_stations ORDER BY open_year ASC;
SELECT gas_station_id, location, manager_name FROM gas_stations ORDER BY opening_year;
SELECT COUNT(*) FROM gas_station WHERE year BETWEEN 2000 AND 2005;
SELECT COUNT(*) FROM gas_stations WHERE opening_year BETWEEN 2000 AND 2005;
SELECT location, COUNT(*) FROM locations GROUP BY location ORDER BY COUNT(*) DESC;
SELECT location, COUNT(*) FROM gas_stations GROUP BY location ORDER BY COUNT(*) DESC;
SELECT * FROM headquarters WHERE industry = 'banking' AND industry = 'oil and gas';
SELECT name FROM headquarters WHERE industry = 'banking' AND industry = 'oil and gas';
SELECT * FROM headquarters WHERE company_industry!= 'banking';
SELECT * FROM headquarters WHERE industry = 'banking' AND NOT EXISTS (SELECT * FROM companies WHERE headquarters = headquarters);
SELECT company_name, COUNT(*) FROM gas_station GROUP BY company_name;
SELECT company_id, company_name, COUNT(gas_station_id) FROM company_stations GROUP BY company_id;
SELECT company_name, main_industry FROM companies WHERE main_industry!= 'Gas Station';
SELECT industry, company FROM companies WHERE gas_station = 0;
SELECT gas_station.manager_name FROM gas_station INNER JOIN company ON gas_station.company_id = company.id WHERE company.name = 'ExxonMobil';
SELECT name FROM managers WHERE company = 'ExxonMobil' AND station_type = 'Gas';
SELECT * FROM locations WHERE market_value > 100;
SELECT location FROM locations WHERE company_value > 100 AND has_gas_station = true;
SELECT manager_name, COUNT(*) as num_gas_stations FROM gas_station WHERE year_opened > 2000 GROUP BY manager_name ORDER BY num_gas_stations DESC LIMIT 1;
SELECT name FROM manager WHERE gas_stations > (SELECT MAX(gas_stations) FROM manager WHERE year_opened > 2000);
SELECT * FROM gas_stations ORDER BY opening_year;
SELECT location, opening_year FROM gas_stations ORDER BY opening_year;
SELECT rank, company_name, market_value FROM companies WHERE industry = 'banking' ORDER BY sales, profits;
SELECT rank, company, market_value FROM companies WHERE industry = 'banking' ORDER BY sales, profits;
SELECT location, RepresentativeName FROM GasStations WHERE CompanyName IN (SELECT CompanyName FROM Companies ORDER BY AssetAmount DESC LIMIT 3);
SELECT location, representative_name FROM gas_stations WHERE assets > (SELECT MAX(assets) FROM gas_stations GROUP BY company_name HAVING company_name = (SELECT company_name FROM gas_stations ORDER BY assets DESC LIMIT 3));
SELECT COUNT(*) FROM regions;
SELECT COUNT(*) FROM regions;
SELECT DISTINCT region_name FROM regions ORDER BY region_name;
SELECT region_name FROM regions ORDER BY region_name;
SELECT COUNT(*) FROM parties;
SELECT COUNT(DISTINCT party) FROM election_results;
SELECT MIN(minister_name), MIN(minister_time_taken), MAX(minister_time_left) FROM ministers GROUP BY MIN(minister_name), MIN(minister_time_taken) ORDER BY MIN(min;
SELECT MIN(minister_id), MIN(minister_name), MIN(minister_date_taken_office), MIN(minister_date_left_office) FROM ministers WHERE MIN(minister_date_left_office) IS NULL;
SELECT MIN(minister_id) FROM ministers WHERE year_of_office > 1961 OR year_of_office < 1959;
SELECT name FROM ministers WHERE year_of_office > 1961 OR year_of_office < 1959;
SELECT * FROM ministers WHERE party_id!= 1;
SELECT * FROM ministers WHERE party_name = 'Progress Party';
SELECT MINISTER_ID, MINISTER_NAME, PARTY_ID, TIME_TAKEN_OFFICE FROM ministers WHERE PARTY_ID IN (SELECT PARTY_ID FROM parties) ORDER BY TIME_TAKEN_OFFICE DESC;
SELECT MIN(minister_id) as minister_id, MIN(minister_party_id) as minister_party_id, MIN(minister_office_date) as min_office_date FROM ministers ORDER BY MIN(minister_office_;
SELECT MIN(minister_id) FROM ministers WHERE minister_id = (SELECT MIN(minister_id) FROM ministers WHERE minister_id = (SELECT MIN(minister_id) FROM ministers WHERE minister_id = (SELECT MIN(minister_id) FROM ministers WHERE minister_;
SELECT MIN(date_of_departure) FROM ministers WHERE date_of_departure IS NOT NULL ORDER BY date_of_departure DESC LIMIT 1;
SELECT member_name, party_name FROM members;
SELECT name, party FROM members;
SELECT party_name, COUNT(*) FROM party GROUP BY party_name;
SELECT party, COUNT(*) FROM members GROUP BY party;
SELECT party_name FROM party_members GROUP BY party_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT party_name FROM party_members GROUP BY party_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT party_name, region_name FROM party_region;
SELECT party_name, region FROM parties;
SELECT name FROM parties WHERE members = 0;
SELECT name FROM parties WHERE members = 0;
SELECT name FROM party WHERE id IN (3,1);
SELECT name FROM members WHERE party_id IN (3,1) AND name IN (SELECT name FROM members WHERE party_id = 1);
SELECT name FROM members WHERE party_id = 'Progress Party';
SELECT member_name FROM members WHERE party_name!= 'Progress Party';
SELECT COUNT(*) FROM party_events;
SELECT COUNT(*) FROM party_events;
SELECT party_name, COUNT(event_name) FROM party_events GROUP BY party_name;
SELECT party, COUNT(event) FROM events GROUP BY party;
SELECT name FROM members WHERE in_charge = NULL;
SELECT name FROM members WHERE charge_event IS NULL;
SELECT name FROM parties WHERE events >= 2;
SELECT name FROM parties WHERE events >= 2;
SELECT name FROM members ORDER BY events DESC LIMIT 1;
SELECT name FROM members WHERE events_in_charge = (SELECT MAX(events_in_charge) FROM members);
SELECT event_name FROM event_records GROUP BY event_name HAVING COUNT(*) > 2;
SELECT event_name FROM party_events GROUP BY event_name HAVING COUNT(*) > 2;
SELECT COUNT(*) FROM AnnualMeeting WHERE Region = 'United Kingdom';
SELECT COUNT(*) FROM AnnualMeeting WHERE Region = 'United Kingdom';
SELECT COUNT(*) FROM pilots;
SELECT name FROM pilots ORDER BY rank ASC;
SELECT position, team FROM pilots;
SELECT DISTINCT position FROM pilots WHERE age > 30;
SELECT name FROM pilots WHERE team = 'Bradley' OR team = 'Fordham';
SELECT year FROM pilots WHERE rank = 'highest' ORDER BY year DESC LIMIT 1;
SELECT nationality, COUNT(*) FROM pilots GROUP BY nationality;
SELECT nationality, COUNT(*) as count FROM pilots GROUP BY nationality ORDER BY count DESC LIMIT 1;
SELECT * FROM pilot_positions WHERE (joining_year > 2005 AND joining_year < 2000);
SELECT pilots.name, aircrafts.model FROM pilots INNER JOIN aircrafts ON pilots.aircraft_id = aircrafts.id;
SELECT p.name, f.series_name FROM pilots p INNER JOIN aircrafts f ON p.aircraft_id = f.aircraft_id ORDER BY p.rank ASC;
SELECT * FROM aircrafts WHERE age < 34;
SELECT name, COUNT(*) FROM pilots GROUP BY name;
SELECT name FROM pilots WHERE record_count > 1;
SELECT name FROM pilots WHERE record = NULL;
SELECT status_code FROM documents;
SELECT description FROM document_status WHERE code = 'working';
SELECT DISTINCT document_type_code FROM documents;
SELECT * FROM documents WHERE type = 'Paper';
SELECT shipping_agent_name FROM shipping_agents;
SELECT shipping_agent_code FROM shipping_agents WHERE shipping_agent_name = 'UPS';
SELECT role_code FROM roles;
SELECT role_description FROM roles WHERE role_code = 'ED';
SELECT COUNT(*) FROM employees;
SELECT * FROM employees WHERE name = 'Koby';
SELECT id, receipt_date FROM documents;
SELECT role_description, id, COUNT(*) FROM employees GROUP BY role_description, id;
SELECT role_name, COUNT(*) FROM roles GROUP BY role_name HAVING COUNT(*) > 1;
SELECT document_status_description FROM documents WHERE id = 1;
SELECT COUNT(*) FROM documents WHERE status = 'done';
SELECT document_type_code FROM documents WHERE id = 2;
SELECT document_id FROM documents WHERE status_code = 'done' AND type_code = 'paper';
SELECT name FROM shipping_agents WHERE id = 2;
SELECT COUNT(*) FROM shipments WHERE carrier = 'USPS';
SELECT shipping_agent_name, COUNT(document_id) FROM documents GROUP BY shipping_agent_name ORDER BY COUNT(document_id) DESC LIMIT 1;
SELECT receipt_date FROM documents WHERE id = 3;
SELECT address FROM documents WHERE id = 4;
SELECT mail_date FROM documents WHERE id = 7;
SELECT document_id FROM documents WHERE status = 'done' AND type = 'Paper' AND shipping_agent = 'USPS';
SELECT document_id FROM documents WHERE status = 'done' AND document_type = 'Paper' AND shipping_agent = 'USPS';
SELECT * FROM documents WHERE id = 7;
SELECT COUNT(*) FROM documents WHERE id = 2;
SELECT document_id, COUNT(*) FROM drafts GROUP BY document_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT id, COUNT(*) FROM documents WHERE draft_copies > 1;
SELECT name FROM circulation_history WHERE id = 1;
SELECT name FROM employees WHERE id NOT IN (SELECT employee_id FROM circulation_history);
SELECT name, COUNT(*) FROM circulation_history GROUP BY name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT document_id, COUNT(employee_id) FROM circulation_history GROUP BY document_id;
SELECT department_name FROM departments ORDER BY starting_date;
SELECT DISTINCT dependent_name FROM employee_relations WHERE spouse_name IS NOT NULL;
SELECT COUNT(*) FROM Dependents WHERE Gender = 'Female';
SELECT department_name FROM departments WHERE location = 'Houston';
SELECT first_name, last_name FROM employees WHERE salary > 30000;
SELECT gender, COUNT(*) FROM employees WHERE salary < 50000 GROUP BY gender;
SELECT first_name, last_name, address FROM employees ORDER BY birth_date ASC;
SELECT * FROM services WHERE type_code = 'Marriage';
SELECT id, name, date, location, participants FROM events WHERE participants > 1;
SELECT participant_id, event_type, COUNT(*) FROM events GROUP BY participant_id, event_type;
SELECT participant_id, type_code, details FROM participants;
SELECT COUNT(*) FROM Participants WHERE Type = 'Organizer';
SELECT type FROM services ORDER BY type;
SELECT service_id, details FROM events;
SELECT COUNT(*) FROM events WHERE participant_details LIKE '%Dr.%';
SELECT participant_type, COUNT(*) FROM participants GROUP BY participant_type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT service_id, service_type, COUNT(*) as num_participants FROM services WHERE service_type ='service_type' GROUP BY service_id, service_type ORDER BY num_participants ASC LIMIT;
SELECT id FROM events ORDER BY participants DESC LIMIT 1;
SELECT id FROM events WHERE id NOT IN (SELECT event_id FROM participants WHERE detail = 'Kenyatta Kuhn');
SELECT service_type, COUNT(*) FROM event_details WHERE status ='success' OR status = 'failure' GROUP BY service_type HAVING COUNT(*) > 0;
SELECT COUNT(*) FROM events WHERE participants = 0;
SELECT DISTINCT participant_id FROM events;
SELECT name FROM races WHERE date = (SELECT MAX(date) FROM races);
SELECT name FROM races ORDER BY date DESC LIMIT 1;
SELECT name, date FROM races ORDER BY date DESC LIMIT 1;
SELECT name, date FROM races ORDER BY date DESC LIMIT 1;
SELECT race_name FROM races WHERE year = 2017;
SELECT race_name FROM races WHERE year = 2017;
SELECT DISTINCT race_name FROM races WHERE race_date BETWEEN '2014-01-01' AND '2017-12-31';
SELECT DISTINCT name FROM races WHERE year BETWEEN 2014 AND 2017;
SELECT DISTINCT driver_name, driver_surname FROM drivers WHERE laptime < 93000;
SELECT first_name, last_name FROM drivers WHERE lap_time < 93000;
SELECT DISTINCT id, nationality FROM drivers WHERE laptime > 100000;
SELECT driver_id, nationality FROM drivers WHERE laptime > 100000;
SELECT driver_name, first_name, last_name FROM drivers WHERE laptime = (SELECT MIN(laptime) FROM drivers);
SELECT driver_name, first_name, last_name FROM drivers WHERE laptime = (SELECT MIN(laptime) FROM drivers);
SELECT id, family_name FROM drivers WHERE laptime = (SELECT MAX(laptime) FROM drivers);
SELECT id, last_name FROM drivers WHERE laptime = (SELECT MAX(laptime) FROM drivers);
SELECT id, forname, surname FROM drivers WHERE laptime > (SELECT MIN(laptime) FROM drivers) AND COUNT(*) > 1;
SELECT id, first_name, last_name FROM drivers WHERE laptime > 0 AND position = 1;
SELECT COUNT(*) FROM drivers WHERE race_name = 'Australian Grand Prix' AND year = 2009;
SELECT COUNT(*) FROM drivers WHERE race_year = 2009;
SELECT COUNT(*) FROM drivers WHERE year = 2009 AND did_not_participate = TRUE;
SELECT COUNT(*) FROM drivers WHERE year = 2009;
SELECT name, year FROM races WHERE driver_forename = 'Lewis';
SELECT name, year FROM races WHERE driver_last_name = 'Lewis';
SELECT forename, surname FROM drivers WHERE nationality = 'German';
SELECT first_name, last_name FROM drivers WHERE country = 'Germany';
SELECT id, forename FROM drivers WHERE name = 'Australian Grand Prix' AND name = 'Chinese Grand Prix';
SELECT id, first_name FROM drivers WHERE race = 'Australian Grand Prix' OR race = 'Chinese Grand Prix';
SELECT first_name, last_name FROM drivers WHERE race_name = 'Australian Grand Prix' AND race_name!= 'Chinese Grand Prix';
SELECT first_name, last_name FROM drivers WHERE race_name = 'Australian Grand Prix' AND race_name!= 'Chinese Grand Prix';
SELECT DISTINCT driver_name FROM drivers WHERE position = 1 AND standing = 1 AND won = 1;
SELECT first_name FROM drivers WHERE position ='standing' AND won = TRUE;
SELECT DISTINCT driver_name FROM race_results WHERE position = 1 AND driver_name IN (SELECT driver_name FROM driver_points WHERE points > 20) AND driver_name IN (SELECT driver_name FROM driver_standing WHERE driver_name IN (SELECT driver_name FROM driver;
SELECT first_name FROM drivers WHERE position = 1 AND points > 20;
SELECT nationality, COUNT(*) FROM constructors GROUP BY nationality;
SELECT nationality, COUNT(DISTINCT constructor) FROM cars GROUP BY nationality;
SELECT id, COUNT(*) FROM races GROUP BY id;
SELECT constructor_id, COUNT(race_id) FROM races GROUP BY constructor_id;
SELECT name FROM races WHERE year > 2017 AND country = 'Spain';
SELECT race_name FROM races WHERE year > 2017;
SELECT DISTINCT name FROM races WHERE year > 2000 AND circuit = 'Spain';
SELECT race_name FROM races WHERE year > 2000;
SELECT DISTINCT driver_id, stop_number FROM drivers WHERE pit_stop_duration < (SELECT MIN(pit_stop_duration) FROM drivers WHERE race_id = 841);
SELECT id, stop_number FROM driver WHERE stop_number < (SELECT MIN(stop_number) FROM driver WHERE id = 841);
SELECT DISTINCT driver_id FROM drivers WHERE stop_duration > (SELECT stop_duration FROM drivers WHERE driver_id = 841);
SELECT id, stop_duration FROM drivers WHERE stop_duration > (SELECT stop_duration FROM drivers WHERE id = 841);
SELECT DISTINCT forename FROM drivers ORDER BY forename ASC;
SELECT first_name FROM drivers ORDER BY first_name ASC;
SELECT DISTINCT race_name FROM races ORDER BY race_name DESC;
SELECT name FROM races ORDER BY name DESC;
SELECT race_name FROM races WHERE race_date BETWEEN '2009-01-01' AND '2011-12-31';
SELECT race_name FROM races WHERE race_date BETWEEN '2009-01-01' AND '2011-12-31';
SELECT race_name FROM races WHERE race_time >= '12:00:00' OR race_time <= '09:00:00';
SELECT race_name FROM races WHERE race_time >= '12:00:00' OR race_time <= '09:00:00';
SELECT first_name, last_name, id FROM drivers WHERE (pit_stops > 8 OR race_results > 5);
SELECT first_name, last_name, id FROM drivers WHERE stops > 8 OR races > 5;
SELECT last_name, id FROM drivers WHERE pit_stops = 11 AND race_results > 5;
SELECT last_name, id FROM drivers WHERE pit_stops = 11 AND races > 5;
SELECT id, last_name FROM driver WHERE year > 2010 GROUP BY id HAVING COUNT(*) = (SELECT MAX(count) FROM driver WHERE year > 2010 GROUP BY id);
SELECT id, last_name FROM driver WHERE year > 2010 GROUP BY id HAVING COUNT(*) = (SELECT MAX(count) FROM driver WHERE year > 2010 GROUP BY id);
SELECT name FROM circuits WHERE country IN ('UK', 'Malaysia');
SELECT name FROM circuits WHERE country IN ('UK', 'Malaysia');
SELECT id, location FROM circuits WHERE country IN ('France', 'Belgium');
SELECT id, location FROM circuits WHERE country IN ('France', 'Belgium');
SELECT name FROM constructors WHERE points > 5;
SELECT name FROM constructors WHERE points > 5;
SELECT AVG(fastest_lap_speed) FROM race WHERE name = 'Monaco Grand Prix' AND year = 2008;
SELECT AVG(fastest_lap_speed) FROM race_results WHERE race_name = 'Monaco Grand Prix' AND year = 2008;
SELECT MAX(speed) FROM race WHERE name = 'Monaco Grand Prix' AND year = 2008;
SELECT MAX(speed) FROM laps WHERE race_name = 'Monaco Grand Prix' AND year = 2008;
SELECT race_name, MAX(fastest_lap_speed) as max_fastest_lap_speed FROM races WHERE year > 2004 GROUP BY race_name ORDER BY year;
SELECT race_name, MAX(fastest_lap_speed) FROM races WHERE race_year > 2004 GROUP BY race_name ORDER BY race_year;
SELECT race_name, AVG(fastest_lap_speed) as avg_fastest_lap_speed FROM races WHERE race_year > 2004 GROUP BY race_name ORDER BY race_name;
SELECT race_name, AVG(fastest_lap_speed) as avg_speed FROM races WHERE race_date > '2004-01-01' GROUP BY race_name ORDER BY race_date;
SELECT id, forename, COUNT(*) FROM drivers WHERE id IN (SELECT DISTINCT id FROM races) GROUP BY id HAVING COUNT(*) >= 2;
SELECT id, forename, COUNT(*) FROM drivers WHERE races >= 2;
SELECT driver_id, COUNT(race_id) FROM driver_races GROUP BY driver_id HAVING COUNT(race_id) <= 30;
SELECT id, COUNT(*) FROM driver_races GROUP BY id HAVING COUNT(*) <= 30;
SELECT driver_id, surname FROM driver_races GROUP BY driver_id HAVING COUNT(*) = (SELECT COUNT(*) FROM driver_races GROUP BY driver_id) ORDER BY COUNT(*) DESC LIMIT 1;
SELECT id, last_name FROM drivers WHERE num_races = (SELECT MAX(num_races) FROM drivers);
SELECT COUNT(*) FROM technicians;
SELECT COUNT(*) FROM technicians;
SELECT name FROM technicians ORDER BY age ASC;
SELECT name FROM technicians ORDER BY age ASC;
SELECT team, starting_year FROM technicians;
SELECT team, starting_year FROM technicians;
SELECT name FROM technicians WHERE team!= 'NYY';
SELECT name FROM technicians WHERE team = 'NYY';
SELECT name FROM technicians WHERE age = 36 OR age = 37;
SELECT name FROM technicians WHERE age = 36 OR age = 37;
SELECT MIN(year) FROM technicians WHERE age > 0;
SELECT MIN(year) FROM technicians WHERE age > 0;
SELECT team_name, COUNT(*) FROM technicians GROUP BY team_name;
SELECT team, COUNT(technician) FROM team GROUP BY team;
SELECT team_name, COUNT(*) as num_technicians FROM employees WHERE job_title = 'Technician' GROUP BY team_name ORDER BY num_technicians DESC LIMIT 1;
SELECT team_name, COUNT(*) as num_technicians FROM technicians GROUP BY team_name ORDER BY num_technicians DESC LIMIT 1;
SELECT team_name FROM team WHERE technician_count >= 2;
SELECT team_name FROM teams WHERE num_technicians >= 2;
SELECT technician_name, machine_series FROM technicians;
SELECT technician_name, machine_series FROM technicians;
SELECT name FROM technicians ORDER BY quality_rank ASC;
SELECT name, quality_rank FROM technicians WHERE machine_id = 'T123' ORDER BY quality_rank ASC;
SELECT name FROM technicians WHERE value_point > 70;
SELECT name FROM technicians WHERE point_value > 70;
SELECT name, COUNT(machine_number) as assigned_machines FROM technicians GROUP BY name;
SELECT name, COUNT(*) FROM technicians GROUP BY name;
SELECT name FROM technicians WHERE assigned_to IS NULL;
SELECT name FROM technicians WHERE assigned = FALSE;
SELECT YEAR(START_DATE) FROM technicians WHERE TEAM = 'CLE' OR TEAM = 'CWS';
SELECT * FROM technicians WHERE team = 'CLE' OR team = 'CWS' AND start_year >= '2010';
SELECT COUNT(*) FROM entrepreneurs;
SELECT COUNT(*) FROM entrepreneurs;
SELECT company_name, money_requested FROM entrepreneurs ORDER BY money_requested DESC;
SELECT company FROM entrepreneurs ORDER BY amount_requested DESC;
SELECT companies.name, investors.name FROM companies INNER JOIN investors ON companies.id = investors.company_id;
SELECT companies.name, investors.name FROM companies INNER JOIN investors ON companies.id = investors.company_id;
SELECT AVG(money_requested) FROM entrepreneurs;
SELECT AVG(money_requested) FROM entrepreneurs;
SELECT name FROM people ORDER BY weight ASC;
SELECT name FROM people ORDER BY weight ASC;
SELECT name FROM entrepreneurs;
SELECT name FROM entrepreneurs;
SELECT name FROM entrepreneurs WHERE investor!= 'Rachel Elnaugh';
SELECT name FROM entrepreneurs WHERE investor!= 'Rachel Elnaugh';
SELECT MIN(weight) FROM people WHERE height < 6ft;
SELECT MIN(weight) FROM people;
SELECT name FROM entrepreneurs WHERE weight = (SELECT MAX(weight) FROM entrepreneurs);
SELECT name FROM entrepreneurs WHERE weight > (SELECT MAX(weight) FROM entrepreneurs);
SELECT SUM(money_requested) FROM entrepreneurs WHERE height > 1.85;
SELECT SUM(money_requested) FROM entrepreneurs WHERE height > 1.85;
SELECT DATE_FORMAT(date_of_birth, '%Y-%m-%d') as date_of_birth FROM entrepreneurs WHERE investor = 'Simon Woodroffe' OR investor = 'Peter Jones';
SELECT DATE_FORMAT(DOB, '%m/%d/%Y') FROM entrepreneurs WHERE investor = 'Simon Woodroffe' OR investor = 'Peter Jones';
SELECT weight, money_requested FROM entrepreneurs ORDER BY money_requested DESC;
SELECT weight FROM entrepreneurs ORDER BY weight DESC;
SELECT investors.name, COUNT(entrepreneurs.name) as num_entrepreneurs FROM investors INNER JOIN entrepreneurs ON investors.id = entrepreneurs.investor_id GROUP BY investors.name;
SELECT investor_id, COUNT(*) FROM entrepreneurs GROUP BY investor_id;
SELECT investor, COUNT(*) as num_entrepreneurs FROM investments GROUP BY investor ORDER BY num_entrepreneurs DESC LIMIT 1;
SELECT investor_name, COUNT(investor_name) as num_investments FROM investors WHERE investor_name IN ( SELECT investor_name FROM investments GROUP BY investor_name ORDER BY COUNT(investor_name;
SELECT investors.name FROM investors INNER JOIN investments ON investors.id = investments.investor_id GROUP BY investors.name HAVING COUNT(investments.id) >= 2;
SELECT investors.name FROM investors INNER JOIN investments ON investors.id = investments.investor_id GROUP BY investors.name HAVING COUNT(investments.id) > 1;
SELECT name, company FROM entrepreneurs ORDER BY money_requested DESC;
SELECT name, investor FROM entrepreneurs ORDER BY amount_requested DESC;
SELECT name FROM people WHERE occupation!= 'entrepreneur';
SELECT name FROM people WHERE occupation!= 'entrepreneur';
SELECT investors.name, entrepreneurs.name FROM investors INNER JOIN entrepreneurs ON investors.id = entrepreneurs.investor_id WHERE investors.investor_id IN (SELECT investor_id FROM entrepreneurs WHERE requested_invest;
SELECT investors.name FROM investors INNER JOIN entrepreneurs ON investors.id = entrepreneurs.investor_id WHERE entrepreneurs.requested_amount > 140000 AND entrepreneurs.requested_amount < 120000;
SELECT COUNT(DISTINCT company_name) FROM companies;
SELECT COUNT(DISTINCT company_name) FROM companies;
SELECT company FROM entrepreneurs WHERE height = (SELECT MAX(height) FROM entrepreneurs);
SELECT company_name FROM entrepreneurs WHERE height = (SELECT MAX(height) FROM entrepreneurs);
SELECT COUNT(*) FROM perpetrators;
SELECT date, COUNT(*) FROM perpetrators GROUP BY date ORDER BY COUNT(*) DESC;
SELECT COUNT(*) FROM incidents WHERE perpetrator_id = 'perpetrator_id' ORDER BY COUNT(*) ASC;
SELECT AVG(injured) FROM perpetrators GROUP BY perpetrator_id;
SELECT location, MAX(kills) FROM perpetrator WHERE kills = (SELECT MAX(kills) FROM perpetrator);
SELECT name FROM people ORDER BY height ASC;
SELECT name FROM perpetrators;
SELECT name FROM perpetrators WHERE country!= 'China';
SELECT name FROM perpetrator WHERE weight = (SELECT MAX(weight) FROM perpetrator);
SELECT SUM(Kills) FROM Perpetrators WHERE Height > 1.84;
SELECT name FROM perpetrators WHERE country = 'China' OR country = 'Japan';
SELECT height, COUNT(*) as num_injured FROM perpetrators GROUP BY height ORDER BY num_injured DESC;
SELECT country, COUNT(perpetrator_id) FROM perpetrators GROUP BY country;
SELECT country, COUNT(perpetrator_id) as count FROM crime_perpetrators GROUP BY country ORDER BY count DESC LIMIT 1;
SELECT country FROM perpetrators GROUP BY country HAVING COUNT(*) >= 2;
SELECT name FROM perpetrators ORDER BY year DESC;
SELECT name FROM people WHERE role!= 'perpetrator';
SELECT * FROM countries WHERE (perpetrators_injures > 50) AND (perpetrators_injures < 20);
SELECT COUNT(DISTINCT location) FROM perpetrators;
SELECT DATE(perpetrator_height) FROM perpetrators WHERE perpetrator_height = (SELECT MAX(perpetrator_height) FROM perpetrators);
SELECT YEAR(CASE WHEN crime_type = 'Murder' THEN crime_date END) FROM crime_data ORDER BY YEAR(crime_date) DESC LIMIT 1;
SELECT campus_name FROM campuses WHERE county = 'Los Angeles';
SELECT campus_name FROM campuses WHERE county = 'Los Angeles';
SELECT name FROM campuses WHERE location = 'Chico';
SELECT campus_name FROM campuses WHERE city = 'Chico';
SELECT * FROM campuses WHERE year_opened = 1958;
SELECT campus_name FROM campuses WHERE opening_year = 1958;
SELECT name FROM campuses WHERE year_opened < 1800;
SELECT * FROM campuses WHERE year_opened < 1800;
Campus I;
SELECT * FROM campuses WHERE year_opened BETWEEN 1935 AND 1939;
SELECT name FROM campuses WHERE city IN ('Northridge', 'Los Angeles', 'San Francisco', 'San Francisco');
SELECT * FROM campuses WHERE location IN ('Northridge, Los Angeles', 'San Francisco, San Francisco');
SELECT campus_fee FROM universities WHERE university_name = 'San Jose State University' AND year = 1996;
SELECT campus_fee FROM university WHERE name = 'San Jose State University' AND year = 1996;
SELECT campus_fee FROM universities WHERE university_name = 'San Francisco State University' AND year = 1996;
SELECT campus_fee FROM universities WHERE name = 'San Francisco State University' AND year = 1996;
SELECT COUNT(*) FROM universities WHERE campus_fee > (SELECT AVG(campus_fee) FROM universities);
SELECT COUNT(*) FROM universities WHERE campus_fee > (SELECT AVG(campus_fee) FROM universities);
SELECT COUNT(*) FROM universities WHERE campus_fee > (SELECT AVG(campus_fee) FROM universities);
SELECT COUNT(*) FROM universities WHERE campus_fee > (SELECT AVG(campus_fee) FROM universities);
UCLA;
SELECT campus_name FROM campuses WHERE county = 'Los Angeles' AND opened_after_1950;
SELECT year, COUNT(*) as num_degrees FROM degrees GROUP BY year ORDER BY num_degrees DESC LIMIT 1;
SELECT year FROM degrees WHERE degrees_conferred = (SELECT MAX(degrees_conferred) FROM degrees);
SELECT campus_name, SUM(num_degrees) FROM degrees GROUP BY campus_name ORDER BY SUM(num_degrees) DESC LIMIT 1;
The campus with the most degrees conferred over its entire existence is the University of California, Los Angeles (UCLA). SELECT campus_name FROM degrees ORDER BY total_degrees DESC LIMIT 1;
SELECT campus_name FROM faculties WHERE year = 2003 ORDER BY COUNT(*) DESC LIMIT 1;
SELECT campus, COUNT(*) as num_faculty FROM faculties WHERE year = 2003 GROUP BY campus ORDER BY num_faculty DESC LIMIT 1;
SELECT AVG(fee) FROM CSU WHERE year = 1996;
SELECT AVG(fee) FROM CSU WHERE year = 1996;
SELECT AVG(fee) FROM CSU_FEE WHERE year = 2005;
SELECT AVG(fee) FROM campuses WHERE year = 2005;
SELECT COUNT(DISTINCT year) FROM degrees WHERE year >= 1998 AND year <= 2002;
SELECT COUNT(*) FROM degrees WHERE year BETWEEN 1998 AND 2002;
SELECT COUNT(DISTINCT degree_grant_year) FROM Orange_County_Campus WHERE degree_grant_year > 2000;
SELECT COUNT(DISTINCT campus_name) FROM degrees WHERE year > 2000 GROUP BY campus_name;
SELECT campus_name FROM campus WHERE (faculty_count(2002) > faculty_count(Orange_count)) GROUP BY campus_name;
SELECT name FROM campus WHERE (number_of_faculties_in_2002 > (SELECT MAX(number_of_faculties_in_2002) FROM Orange_county) AND number_of_faculties_in_2002 > 0);
Campus A had more than 400 total enrollment but more than 200 full time enrollment in year 1956.;
SELECT campus_name FROM campuses WHERE start_year = 1956 AND full_time_students > 200 AND total_students > 400;
There are 10 campuses in Los Angeles county. SELECT COUNT(*) FROM campuses WHERE county = 'Los Angeles';
SELECT COUNT(*) FROM campuses WHERE county = 'LA';
SELECT * FROM campuses WHERE county = 'Los Angeles';
SELECT campus_name FROM campuses WHERE county = 'Los Angeles';
SELECT COUNT(DISTINCT degree_name) FROM degrees WHERE university_name = 'San Jose State University' AND year = 2000;
SELECT COUNT(*) FROM degrees WHERE university = 'San Jose State University' AND year = 2000;
SELECT * FROM degrees WHERE university = 'San Francisco State University' AND year = 2001;
SELECT * FROM degrees WHERE university = 'San Francisco State University' AND year = 2001;
SELECT COUNT(*) FROM faculty WHERE year = 2002;
SELECT COUNT(*) FROM faculty WHERE year = 2002;
SELECT COUNT(*) FROM faculty WHERE campus = 'Long Beach State University' AND year = 2002;
SELECT COUNT(*) FROM faculty WHERE university_id = 'LBSU' AND year = 2002;
SELECT COUNT(*) FROM Faculty WHERE University = 'San Francisco State University' AND Year = 2004;
SELECT COUNT(*) FROM faculty WHERE university = 'San Francisco State University' AND year = 2004;
SELECT campus_name FROM campuses WHERE faculty_lines BETWEEN 600 AND 1000 AND year = 2004;
SELECT campus_name FROM campuses WHERE faculty_count BETWEEN 600 AND 1000 AND year = 2004;
SELECT COUNT(*) FROM faculty WHERE degrees_conferred_in_2002 = (SELECT MAX(degrees_conferred_in_2002) FROM faculty);
SELECT COUNT(*) FROM faculty WHERE year = 2002;
SELECT COUNT(*) FROM faculty WHERE year = 2001 AND degrees_conferred = (SELECT MIN(degrees_conferred) FROM faculty);
SELECT COUNT(*) FROM faculty WHERE university_id = (SELECT MIN(university_id) FROM faculty) AND year = 2001;
SELECT COUNT(*) FROM students WHERE school_name = 'San Jose State University' AND year = 2004;
SELECT COUNT(*) FROM students WHERE major = 'Undergraduate' AND school = 'San Jose State';
SELECT COUNT(*) FROM graduates WHERE university = 'San Francisco State University' AND year = 2004;
SELECT COUNT(*) FROM Graduates WHERE University = 'San Francisco State University' AND Year = 2004;
SELECT campus_fee FROM universities WHERE university_name = 'San Francisco State University' AND year = 2000;
SELECT campus_fee FROM university WHERE year = 2000 AND name = 'San Francisco State University';
SELECT campus_fee FROM universities WHERE university_name = 'San Jose State University' AND year = 2000;
SELECT campus_fee FROM university WHERE name = 'San Jose State University' AND year = 2000;
There are 10 CSU campuses. SELECT COUNT(*) FROM CSU_Campuses;
There are 10 CSU campuses.;
SELECT COUNT(*) FROM campuses;
SELECT COUNT(*) FROM candidates;
SELECT COUNT(*) FROM candidates;
The poll resource with the most number of candidate information is the one with the highest count.;
SELECT * FROM poll WHERE poll_id = (SELECT poll_id FROM poll WHERE num_candidates = (SELECT MAX(num_candidates) FROM poll));
SELECT * FROM support_rates ORDER BY support_rate DESC LIMIT 3;
SELECT TOP 3 support_rate FROM support_rates ORDER BY support_rate DESC;
SELECT id FROM candidate WHERE oppose_rate = (SELECT MIN(oppose_rate) FROM candidate);
SELECT id FROM candidates WHERE oppose_rate = (SELECT MIN(oppose_rate) FROM candidates);
SELECT candidate, support, consider, oppose FROM rates ORDER BY unsure_rate ASC;
SELECT candidate, support, consider, oppose FROM rates ORDER BY unsure ASC;
SELECT source FROM poll_data WHERE oppose_rate = (SELECT MAX(oppose_rate) FROM poll_data);
SELECT source FROM poll WHERE candidate_id = (SELECT candidate_id FROM poll WHERE oppose_rate > 0);
SELECT name FROM people ORDER BY date_of_birth ASC;
SELECT name FROM people ORDER BY date_of_birth;
SELECT AVG(height) AS avg_height, AVG(weight) AS avg_weight FROM table WHERE sex = 'M';
SELECT AVG(height) as avg_height, AVG(weight) as avg_weight FROM table_name WHERE sex = 'M';
SELECT name FROM people WHERE height > 200 OR height < 190;
SELECT name FROM people WHERE height > 200 OR height < 190;
SELECT gender, AVG(weight) AS avg_weight, MIN(weight) AS min_weight FROM patients GROUP BY gender;
SELECT sex, AVG(weight) AS average_weight, MIN(weight) AS min_weight FROM people GROUP BY sex;
SELECT name, gender FROM candidate WHERE support_rate = (SELECT MAX(support_rate) FROM candidate);
SELECT name, sex FROM candidate WHERE support_rate = (SELECT MAX(support_rate) FROM candidate);
SELECT name FROM candidates WHERE oppose_percentage = (SELECT MIN(oppose_percentage) FROM candidates WHERE sex = 'Male' OR sex = 'Female');
SELECT name, sex FROM candidates WHERE (oppose_rate = 1) AND (sex ='male' OR sex = 'female') ORDER BY name ASC;
SELECT gender, AVG(uncertainty_ratio) as avg_ratio FROM data WHERE gender IS NOT NULL GROUP BY gender ORDER BY avg_ratio DESC LIMIT 1;
SELECT sex, COUNT(*) FROM candidate_data WHERE unsure_rate = (SELECT MAX(unsure_rate) FROM candidate_data) GROUP BY sex;
SELECT name FROM people WHERE did_participate = 'no';
SELECT name FROM people WHERE did_not_participate = 1;
SELECT name FROM candidates WHERE support_percentage < oppose_rate;
SELECT name FROM candidates WHERE support_rate < oppose_rate;
SELECT COUNT(*) FROM table_name WHERE gender ='male' AND weight > 85;
SELECT COUNT(*) FROM people WHERE sex ='male' AND weight > 85;
SELECT MAX(support_percentage), MIN(consider_rate), MIN(oppose_rate) FROM candidates;
SELECT MAX(support_rate), MIN(consider_rate), MIN(oppose_rate) FROM candidates;
SELECT name FROM candidates WHERE sex = 'F' ORDER BY name ASC;
SELECT name FROM candidates WHERE sex = 'F' ORDER BY name ASC;
SELECT name FROM people WHERE height < (SELECT AVG(height) FROM people);
SELECT name FROM people WHERE height < AVG(height);
SELECT * FROM people;
SELECT * FROM people;
SELECT title FROM movies WHERE director ='steven spielberg';
SELECT name FROM movies WHERE director = 'Steven Spielberg';
SELECT name FROM movies WHERE year > 2000 AND director = 'James Cameron';
SELECT title FROM movies WHERE director = 'James Cameron' AND release_year > 2000;
SELECT COUNT(*) FROM movies WHERE year < 2000;
SELECT COUNT(*) FROM movies WHERE year < 2000;
James Cameron;
James Cameron;
SELECT COUNT(*) FROM reviews;
SELECT COUNT(*) FROM reviewers;
SELECT id FROM reviewers WHERE name LIKE '%Mike%';
SELECT id FROM reviewers WHERE name LIKE '%Mike%';
SELECT reviewer_id FROM reviews WHERE name = 'Daniel Lewis';
SELECT id FROM reviewers WHERE name = 'Daniel Lewis';
SELECT COUNT(*) FROM ratings WHERE rating > 3;
SELECT COUNT(*) FROM ratings WHERE rating > 3;
SELECT MIN(rating) AS lowest_rating, MAX(rating) AS highest_rating FROM stars;
SELECT MAX(rating) AS max_rating, MIN(rating) AS min_rating FROM ratings;
SELECT year FROM movies WHERE rating >= 4 ORDER BY year ASC;
SELECT YEAR(rating) AS year, rating FROM movies WHERE rating >= 4 AND rating <= 5 ORDER BY YEAR(rating) ASC;
SELECT director_name, movie_title FROM movies WHERE rating = 5;
SELECT director_name, movie_name FROM movies WHERE rating = 5;
SELECT reviewer, AVG(rating) as avg_rating FROM reviews GROUP BY reviewer;
SELECT AVG(stars) FROM reviews WHERE movie_id = '12345';
SELECT title FROM movies WHERE rating IS NULL;
SELECT title FROM movies WHERE rating IS NULL;
SELECT name FROM reviewers WHERE rating IS NULL AND date IS NULL;
SELECT name FROM reviewers WHERE rating_date IS NULL;
SELECT AVG(rating) as avg_rating, title FROM movies WHERE year = (SELECT MAX(year) FROM movies) ORDER BY year DESC, rating DESC;
SELECT AVG(rating) as average_rating, title FROM movies WHERE year = (SELECT MIN(year) FROM movies) ORDER BY year ASC;
SELECT name FROM movies ORDER BY release_date DESC LIMIT 1;
SELECT title FROM movies WHERE release_date = CURRENT_DATE ORDER BY release_date DESC LIMIT 1;
SELECT MAX(stars) AS max_stars, year FROM movies WHERE year = (SELECT MAX(year) FROM movies) ORDER BY year DESC LIMIT 1;
SELECT MAX(rating) FROM movies WHERE release_date = (SELECT MAX(release_date) FROM movies);
SELECT name FROM movies WHERE created_year > (SELECT created_year FROM movies WHERE director = 'Steven Spielberg');
SELECT name FROM movies WHERE release_date > '2021-01-01';
SELECT title, director FROM movies WHERE star > (SELECT AVG(star) FROM movies WHERE director = 'James Cameron');
SELECT title, director FROM movies WHERE rating > (SELECT AVG(rating) FROM movies WHERE director = 'James Cameron');
SELECT reviewer_name, movie_title, stars, rating_date FROM movie_reviews ORDER BY reviewer_name, movie_title, stars DESC;
SELECT reviewer_name, film_title, movie_rating, rating_date FROM movies ORDER BY reviewer_name, film_title, movie_rating;
SELECT name FROM reviewers WHERE rating_count >= 3;
SELECT name FROM reviewers WHERE rating >= 3;
SELECT name FROM reviewers WHERE movie_name = 'Gone with the Wind';
SELECT reviewer_name FROM reviews WHERE book_name = 'Gone with the Wind';
SELECT director.name FROM director INNER JOIN movie ON director.id = movie.director_id WHERE movie.reviewer_id = 'Sarah Martinez';
SELECT director_name FROM directors WHERE director_name IN (SELECT director_name FROM movies WHERE reviewer_name = 'Sarah Martinez');
SELECT reviewer_name, movie_title, rating FROM reviews WHERE reviewer_name = director_name;
SELECT DISTINCT r.reviewer_name, m.movie_title, s.star_rating FROM reviews r JOIN movies m ON r.movie_id = m.movie_id JOIN stars s ON r.star_id = s;
SELECT reviewer_name, movie_name FROM reviews;
SELECT reviewer_name, movie_name FROM reviews;
SELECT title FROM movies WHERE reviewer_id!= 'Chris Jackson';
SELECT title FROM movies WHERE reviewer_id = 'Chris Jackson' AND NOT reviewed;
SELECT DISTINCT director_name, movie_title FROM movies WHERE director_name IN (SELECT director_name FROM directors GROUP BY director_name HAVING COUNT(*) > 1) ORDER BY director_name, movie_title;
SELECT director_name, movie_title FROM director_movies GROUP BY director_name HAVING COUNT(movie_title) > 1;
SELECT title, produced_year FROM director_movies WHERE director_id IN (SELECT director_id FROM director_movies GROUP BY director_id HAVING COUNT(*) > 1);
SELECT director, title, release_date FROM movies WHERE director_id IN (SELECT director_id FROM directors GROUP BY director_id HAVING COUNT(*) > 1);
SELECT DISTINCT director FROM movies WHERE num_movies = 1;
SELECT DISTINCT director FROM movies WHERE movies.director_id = 1;
SELECT DISTINCT director FROM movies WHERE director IS NULL;
SELECT DISTINCT director FROM movies WHERE director!= NULL;
SELECT director, COUNT(review_id) FROM reviews GROUP BY director;
SELECT director, COUNT(review) FROM reviews GROUP BY director;
SELECT movie_title, AVG(rating) AS average_rating FROM movies GROUP BY movie_title ORDER BY average_rating DESC LIMIT 1;
SELECT title, AVG(rating) as avg_rating FROM movies GROUP BY title ORDER BY avg_rating DESC LIMIT 1;
SELECT title, AVG(rating) as avg_rating FROM movies WHERE rating < (SELECT AVG(rating) from movies) GROUP BY title ORDER BY avg_rating ASC LIMIT 1;
SELECT title, AVG(rating) as avg_rating FROM movies WHERE rating = (SELECT MIN(rating) FROM movies) GROUP BY title;
SELECT name, year FROM movies WHERE rating >= 3 ORDER BY rating DESC LIMIT 3;
SELECT name, year FROM movies ORDER BY rating DESC LIMIT 3;
SELECT director, title, MAX(rating) FROM movies WHERE director IS NOT NULL GROUP BY director, title ORDER BY MAX(rating) DESC LIMIT 1;
SELECT director, title, rating FROM movies WHERE director IN (SELECT director FROM reviews);
SELECT title, star_rating FROM movies WHERE star_rating = (SELECT MIN(star_rating) FROM movies GROUP BY reviewer);
SELECT reviewer_id, title, rating FROM movies WHERE rating = (SELECT MIN(rating) FROM movies);
SELECT title, score FROM movies WHERE rating IS MIN(movies.rating) GROUP BY director;
SELECT director, title, score FROM movies WHERE rating < 3 ORDER BY rating ASC LIMIT 1;
SELECT movie_name FROM movies WHERE rating = (SELECT MAX(rating) FROM movies);
SELECT movie_name, COUNT(*) as num_reviews FROM reviews GROUP BY movie_name ORDER BY num_reviews DESC LIMIT 1;
SELECT title FROM movies WHERE rating >= 3 AND rating <= 5;
SELECT title FROM movies WHERE rating BETWEEN 3 AND 5;
SELECT name FROM reviewers WHERE rating > 3;
SELECT name FROM reviewers WHERE rating > 3;
SELECT AVG(rating) FROM movies WHERE reviewer_name!= 'Brittany Harris';
SELECT movie_title, AVG(rating) FROM movies WHERE review_id IS NULL AND reviewer_name = 'Brittany Harris' GROUP BY movie_title;
SELECT id FROM movies WHERE reviewed_by IS NULL;
SELECT id FROM movies WHERE hat_id NOT IN (SELECT hat_id FROM reviews WHERE reviewer_id = 'Britanny Harris');
SELECT movie_title, AVG(rating_star) FROM movies WHERE rating_star >= 2 GROUP BY movie_title;
SELECT AVG(rating) FROM movies WHERE reviews > 3;
SELECT id FROM reviewers WHERE rating < 4;
SELECT id FROM reviewers WHERE rating < 4;
SELECT id FROM reviewers WHERE rating < 4;
SELECT id FROM reviewers WHERE id NOT IN (SELECT id FROM reviews WHERE rating = 4);
SELECT name FROM movies WHERE year > 2000 OR review_by = 'Brittany Harris';
SELECT name FROM movies WHERE year > 2000 OR review_by = 'Brittany Harris';
SELECT name FROM movies WHERE year < 1980 OR director = 'James Cameron';
SELECT name FROM movies WHERE release_year < 1980 OR director = 'James Cameron';
SELECT name FROM reviewers WHERE rating = 3 OR rating = 4;
SELECT name FROM reviewers WHERE stars >= 3;
SELECT name FROM movies WHERE rating = 3 AND rating = 4;
SELECT name FROM movies WHERE rating >= 3;
SELECT COUNT(*) FROM counties;
SELECT COUNT(*) FROM countries;
SELECT name FROM counties ORDER BY population DESC;
SELECT name FROM counties WHERE type = 'public safety' ORDER BY population DESC;
SELECT DISTINCT police_force FROM counties WHERE location <> 'east';
SELECT name, location FROM police_forces WHERE location NOT IN ('East', 'West', 'North', 'South');
SELECT MIN(crime_rate) AS min_crime_rate, MAX(crime_rate) AS max_crime_rate FROM counties;
SELECT MIN(crime_rate) AS min_crime_rate, MAX(crime_rate) AS max_crime_rate FROM counties;
SELECT county, crime_rate FROM counties ORDER BY police_officers ASC;
SELECT county, crime_rate FROM counties ORDER BY number_of_offices ASC;
SELECT name FROM cities ORDER BY name ASC;
SELECT city_name FROM cities ORDER BY city_name;
SELECT COUNT(*) FROM cities WHERE black_percentage > 10 AND hispanic_percentage > 0.1;
SELECT city, hispanic_percentage FROM cities WHERE black_percentage > 10;
SELECT name FROM counties WHERE population = (SELECT MAX(population) FROM counties);
SELECT name FROM counties WHERE population = (SELECT MAX(population) FROM counties);
SELECT city_name FROM cities WHERE white_percentage >= 5 ORDER BY white_percentage DESC LIMIT 5;
SELECT city, (population/total_population) * 100 AS percentage FROM census WHERE race = 'white' ORDER BY percentage DESC LIMIT 5;
SELECT city, county FROM cities;
SELECT city, county FROM cities;
SELECT city, (crime_rate / 100) AS white_percentage FROM cities JOIN counties ON city.county_id = counties.county_id WHERE crime_rate > 0;
SELECT city, white_percentage, county_crime_rate FROM cities WHERE county_crime_rate > 0;
SELECT name FROM city WHERE county = (SELECT county FROM police_officers ORDER BY COUNT(*) DESC LIMIT 1);
SELECT name FROM city WHERE county = (SELECT county FROM police_officers GROUP BY county ORDER BY COUNT(*) DESC LIMIT 1);
SELECT COUNT(*) FROM cities WHERE population > 20000;
SELECT COUNT(*) FROM cities WHERE county_population > 20000;
SELECT * FROM counties WHERE city_white_percentage > 90;
SELECT crime_rate FROM counties WHERE city_white_percentage > 90;
SELECT police_force, COUNT(county) FROM police_counties GROUP BY police_force;
SELECT police_force, COUNT(county) FROM counties GROUP BY police_force;
The location shared by most counties is the United States.;
SELECT location, COUNT(*) as num_counties FROM counties WHERE location = 'Location' GROUP BY location ORDER BY num_counties DESC LIMIT 1;
SELECT name FROM counties WHERE name NOT IN (SELECT city_name FROM cities);
SELECT name FROM counties WHERE name NOT IN (SELECT name FROM cities);
SELECT police_force FROM counties WHERE location = 'east' AND location = 'west';
SELECT * FROM police_forces WHERE county IN ('East', 'West') AND operation_type = 'Police';
SELECT city FROM counties WHERE crime_rate < 100;
SELECT city FROM cities WHERE county_name IN (SELECT county_name FROM counties WHERE crime_rate < 100);
SELECT COUNT(*) as case_burden, county_name FROM counties WHERE population > 1000000 ORDER BY case_burden DESC;
SELECT county, COUNT(case when case_burden > 0 then 1 else 0 end) as case_burden FROM county_data GROUP BY county ORDER BY case_burden DESC;
SELECT name FROM rooms WHERE base_price < 160 AND beds = 2;
SELECT name FROM rooms WHERE base_price < 160 AND num_beds = 2;
SELECT room_name, room_id FROM rooms WHERE price > 160 AND capacity > 2;
SELECT room_name, room_id FROM rooms WHERE cost > 160 AND capacity > 2;
SELECT room_name, COUNT(*) as reservation_count FROM reservations GROUP BY room_name ORDER BY reservation_count DESC LIMIT 1;
SELECT room_name, COUNT(*) FROM reservations GROUP BY room_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM rooms WHERE reserved_by = 'ROY SWEAZY';
SELECT COUNT(*) FROM rooms WHERE person_name = 'ROY SWEAZ';
SELECT COUNT(*) FROM reservations WHERE room_name = 'ROY SWEAZY';
SELECT COUNT(*) FROM reservations WHERE room_name = 'ROY SWEAZY';
SELECT room_name, rate, check_in_date, check_out_date FROM rooms WHERE rate = (SELECT MAX(rate) FROM rooms);
SELECT name, rate, check_in_date, check_out_date FROM rooms WHERE rate = (SELECT MAX(rate) FROM rooms);
SELECT COUNT(*) FROM guests WHERE age >= 18;
SELECT COUNT(*) FROM reservations WHERE room_number = 'R123' AND check_in_date = '2010-10-23' AND age >= 18;
SELECT COUNT(*) FROM guests WHERE guest_id = 'DAMIEN TRACHSEL' AND check_in_date = '2010-09-21';
SELECT COUNT(*) FROM reservations WHERE room_number = 'R101' AND check_in_date = '2010-09-21' AND name = 'DAMIEN TRACHSEL';
SELECT COUNT(*) FROM beds WHERE type = 'king';
SELECT COUNT(*) FROM beds WHERE type = 'King';
SELECT name, decor FROM rooms WHERE bed_type = 'king' ORDER BY price ASC;
SELECT name, decor FROM rooms WHERE type = 'king' ORDER BY price ASC;
SELECT room_name, base_price FROM rooms WHERE base_price = (SELECT MIN(base_price) FROM rooms);
SELECT room_name, base_price FROM rooms ORDER BY base_price ASC LIMIT 1;
SELECT decor FROM room WHERE name = 'Recluse' AND defiance = 'Defiance';
SELECT decor FROM room WHERE name = 'Recluse and defiance';
SELECT bed_type, AVG(base_price) FROM bed_prices GROUP BY bed_type;
SELECT bed_type, AVG(base_price) FROM beds GROUP BY bed_type;
SELECT COUNT(*) FROM rooms WHERE type ='modern';
SELECT COUNT(*) FROM rooms WHERE type ='modern';
SELECT name, COUNT(*) FROM reservations GROUP BY name ORDER BY COUNT(*) ASC LIMIT 1;
The least popular kind of decor is the one that is not used at all. A: SELECT * FROM decor WHERE popularity = (SELECT MIN(popularity) FROM decor);
SELECT COUNT(*) FROM Room WHERE Occupancy = MAX(Occupancy);
SELECT COUNT(*) FROM Room WHERE adults + kids = MAX(adults + kids);
SELECT first_name, last_name FROM people WHERE paid > rooms.base_price;
SELECT first_name, last_name FROM people WHERE paid > rooms.base_price;
SELECT COUNT(*) FROM rooms;
SELECT COUNT(*) FROM rooms WHERE inn_name = 'The Inn';
SELECT COUNT(*) FROM rooms WHERE bed_type = 'King';
SELECT COUNT(*) FROM rooms WHERE bed_type = 'King';
SELECT BED_TYPE, COUNT(*) FROM Rooms GROUP BY BED_TYPE;
SELECT BED_TYPE, COUNT(*) FROM rooms GROUP BY BED_TYPE;
SELECT name FROM rooms WHERE occupancy = (SELECT MAX(occupancy) FROM rooms);
SELECT name FROM rooms WHERE capacity = (SELECT MAX(capacity) FROM rooms);
SELECT id, name FROM base_price_room ORDER BY price DESC LIMIT 1;
SELECT room_id, MAX(base_price) FROM rooms WHERE base_price > 0 ORDER BY MAX(base_price) DESC LIMIT 1;
SELECT type_of_bed, name FROM traditional_rooms;
SELECT bed_type, name FROM rooms WHERE decor = 'traditional';
SELECT decor_type, COUNT(*) FROM rooms WHERE bed_type = 'King' GROUP BY decor_type;
SELECT decor_type, COUNT(*) FROM rooms WHERE bed_type = 'king' GROUP BY decor_type;
SELECT AVG(price) AS average_price, MIN(price) AS minimum_price FROM rooms WHERE decor ='modern' OR decor = 'rustic' OR decor = 'vintage';
SELECT decor, AVG(MIN(price)) AS avg_min_price, AVG(price) AS avg_price FROM rooms GROUP BY decor;
SELECT name FROM rooms ORDER BY price ASC;
SELECT room_name FROM rooms ORDER BY price ASC;
SELECT COUNT(*) FROM rooms WHERE price > 120;
SELECT decor, COUNT(*) FROM rooms WHERE cost > 120 GROUP BY decor;
SELECT bed_type, AVG(room_price) FROM rooms GROUP BY bed_type;
SELECT AVG(base_price) FROM rooms WHERE bed_type ='single';
SELECT name FROM rooms WHERE bed_type = 'king' OR bed_type = 'queen';
SELECT room_name FROM rooms WHERE bed_type = 'king' OR bed_type = 'queen';
SELECT COUNT(DISTINCT bed_type) FROM beds;
SELECT COUNT(DISTINCT bed_type) FROM inn_beds;
SELECT name, id FROM rooms WHERE price > (SELECT AVG(price) FROM rooms) ORDER BY price DESC LIMIT 3;
SELECT name, id FROM rooms ORDER BY price DESC LIMIT 3;
SELECT name FROM rooms WHERE price > (SELECT AVG(price) FROM rooms);
SELECT name FROM rooms WHERE cost > (SELECT AVG(cost) FROM rooms);
SELECT COUNT(*) FROM rooms WHERE reservation = NULL;
SELECT COUNT(*) FROM rooms WHERE reservation_status = 'Not Reservation';
SELECT room_name, COUNT(*) FROM reservations GROUP BY room_name;
SELECT room_name, COUNT(reservation_id) FROM reservations GROUP BY room_name;
SELECT name FROM rooms WHERE reservation_count > 60;
SELECT name FROM rooms WHERE reservation_frequency > 60;
SELECT name FROM rooms WHERE base_price BETWEEN 120 AND 150;
SELECT room_name FROM rooms WHERE price BETWEEN 120 AND 150;
SELECT name FROM rooms WHERE first_name LIKE '%ROY%';
SELECT room_name FROM rooms WHERE customer_name LIKE '%ROY%';
SELECT * FROM cmi_masters WHERE cross_reference_code = 'Tax';
SELECT cmi_cross_reference_id, source_system_code FROM cmi_cross_reference WHERE council_tax_entry_id IN (SELECT council_tax_entry_id FROM council_tax_entries);
SELECT COUNT(*) FROM business_rates WHERE master_customer_id = n;
SELECT code, benifit_id FROM tax_source_system_code_benefits_overpayments ORDER BY benifit_id;
SELECT tax_source_system_code, master_customer_id FROM taxes WHERE fine_id =?;
SELECT arrears_tax_id FROM renting_arrears WHERE customer_master_id IN (SELECT customer_master_id FROM customer_master WHERE detail NOT LIKE 'Schmidt, Kertzmann and Lubowitz');
SELECT register_id FROM electoral_registries WHERE source_system_code IN ('Electoral', 'Tax');
SELECT COUNT(DISTINCT source_system_code) FROM cmi_cross_references;
SELECT * FROM customer_master_index ORDER BY details DESC;
SELECT council_tax_id, cmi_cross_reference FROM parking_fines;
SELECT COUNT(*) FROM council_taxes WHERE arrears ='renting';
SELECT DISTINCT source_system_code FROM master_customer_details WHERE name = 'Gottlieb, Becker and Wyman';
SELECT id FROM cmi WHERE id NOT IN (SELECT id FROM parking_taxes);
SELECT DISTINCT source_system_code FROM source_system_code WHERE source_system_code LIKE '%en%';
SELECT COUNT(*) FROM parties;
SELECT COUNT(*) FROM parties;
SELECT theme, COUNT(*) as num_hosts FROM parties GROUP BY theme ORDER BY num_hosts ASC;
SELECT theme, COUNT(*) as num_hosts FROM parties GROUP BY theme ORDER BY num_hosts ASC;
SELECT theme, location FROM parties;
SELECT theme, location FROM parties;
SELECT MIN(year) as first_year, MAX(year) as last_year FROM parties WHERE theme IN ('Spring', 'Teqnology');
SELECT year FROM parties WHERE theme IN ('Spring', 'Teqnology') ORDER BY year ASC LIMIT 1, 1;
SELECT AVG(hosts) FROM parties;
SELECT AVG(hosts) FROM parties;
SELECT location, COUNT(*) as num_hosts FROM party GROUP BY location ORDER BY num_hosts DESC LIMIT 1;
SELECT party, COUNT(*) as num_hosts, location FROM party_hosts GROUP BY party, location ORDER BY num_hosts DESC LIMIT 1;
SELECT nationality, COUNT(*) FROM hosts GROUP BY nationality;
SELECT nationality, COUNT(*) FROM hosts GROUP BY nationality;
SELECT nationality, COUNT(*) as count FROM hosts GROUP BY nationality ORDER BY count DESC LIMIT 1;
SELECT nationality, COUNT(*) as num_hosts FROM hosts GROUP BY nationality ORDER BY num_hosts DESC LIMIT 1;
SELECT nations.name FROM nations INNER JOIN hosts ON nations.id = hosts.nation_id WHERE hosts.age > 45 AND hosts.age < 35;
SELECT * FROM nations WHERE age > 45 AND age < 35;
SELECT theme, host FROM parties;
SELECT theme, host FROM parties;
SELECT location, host_name FROM parties ORDER BY age_of_host ASC;
SELECT party_name, location, host_name, age_host FROM party_info ORDER BY age_host ASC;
SELECT location FROM parties WHERE host_age > 50;
SELECT party_name, location FROM parties WHERE host_age > 50;
SELECT hostname FROM parties WHERE num_hosts > 20;
SELECT party_name FROM hosts WHERE hosts_count > 20;
SELECT name, nationality FROM hosts ORDER BY age DESC LIMIT 1;
SELECT name, nationality FROM host WHERE age = (SELECT MAX(age) FROM host);
SELECT name FROM hosts WHERE NOT EXISTS (SELECT 1 FROM parties WHERE hosts = hosts);
SELECT host_name FROM hosts WHERE party_host = NULL;
SELECT COUNT(*) FROM regions;
SELECT COUNT(*) FROM regions;
SELECT region_code, region_name FROM regions ORDER BY region_code;
SELECT code, name FROM regions ORDER BY code;
SELECT region_name FROM regions ORDER BY region_name ASC;
SELECT region_name FROM regions ORDER BY region_name;
SELECT name FROM regions WHERE region!= 'Denmark';
SELECT region_name FROM regions WHERE region_name NOT IN ('Denmark');
SELECT COUNT(*) FROM storm_deaths;
SELECT COUNT(*) FROM storms WHERE deaths > 0;
SELECT name, dates_active, num_deaths FROM storms WHERE num_deaths > 0;
SELECT name, date_active, COUNT(deaths) FROM storms WHERE deaths >= 1;
SELECT AVG(damage) AS avg_damage, MAX(damage) AS max_damage FROM storms WHERE max_speed > 1000;
SELECT AVG(damage) AS avg_damage, MAX(damage) AS max_damage FROM storms WHERE max_speed > 1000;
SELECT SUM(deaths) AS total_deaths, SUM(damage) AS total_damage FROM storms WHERE max_speed > (SELECT AVG(max_speed) FROM storms);
SELECT SUM(deaths) AS total_deaths, SUM(damages) AS total_damages FROM storms WHERE max_speed > AVG(max_speed);
SELECT name, damage FROM storms ORDER BY max_speed DESC;
SELECT name, damage_millions FROM storms ORDER BY max_speed DESC;
SELECT COUNT(*) FROM regions WHERE affected = 'Yes';
SELECT COUNT(DISTINCT region) FROM affected_regions;
SELECT name FROM regions WHERE affected = 0;
SELECT region_name FROM regions WHERE affected = 0;
SELECT region, COUNT(*) FROM storms GROUP BY region;
SELECT region, COUNT(*) FROM storms GROUP BY region;
SELECT name, COUNT(affected_regions) FROM storms GROUP BY name;
SELECT region, COUNT(*) FROM storms GROUP BY region;
SELECT name, MAX(speed) FROM storms WHERE affected_regions = (SELECT COUNT(*) FROM storms WHERE affected_regions = (SELECT COUNT(*) FROM storms WHERE affected_regions = (SELECT COUNT(*) FROM storms WHERE affected_regions = (SELECT COUNT;
SELECT name, MAX(speed) FROM storms WHERE affected_regions > (SELECT COUNT(*) FROM storms) ORDER BY affected_regions DESC LIMIT 1;
SELECT name FROM storms WHERE affected_region IS NULL;
SELECT name FROM storms WHERE affected_regions = 0;
SELECT storm_name FROM storm_data WHERE regions >= 2 AND cities >= 10;
SELECT name FROM storms WHERE affected_regions >= 2 AND affected_cities >= 10;
SELECT storm_name FROM storm_data WHERE affected_regions < 2;
SELECT name FROM storms WHERE affected_regions < 2;
SELECT region_name FROM regions WHERE storm_number = 1 AND deaths < 10;
SELECT region_name FROM storms WHERE death_count >= 10;
SELECT storm_name FROM storms WHERE region = 'Denmark';
SELECT storm_name FROM storms WHERE country = 'Denmark';
SELECT region_name FROM storms GROUP BY region_name HAVING COUNT(*) >= 2;
SELECT region_name FROM storms GROUP BY region_name HAVING COUNT(*) >= 2;
SELECT region_name FROM regions WHERE storm_deaths = (SELECT MAX(storm_deaths) FROM regions);
SELECT region_name FROM regions WHERE storm_name = 'Storm X' ORDER BY death_count DESC LIMIT 1;
SELECT name FROM storms WHERE region = 'Afghanistan' AND region = 'Albania';
SELECT name FROM storms WHERE region = 'Afghanistan' AND region = 'Albania';
SELECT COUNT(*) FROM counties;
SELECT COUNT(*) FROM counties;
SELECT county_name, population FROM counties;
SELECT county_name, population FROM counties;
SELECT AVG(population) FROM counties;
SELECT AVG(population) FROM counties;
SELECT MAX(population) AS max_population, MIN(population) AS min_population FROM counties;
SELECT MAX(population) AS max_population, MIN(population) AS min_population FROM counties;
SELECT DISTINCT district FROM elections;
SELECT DISTINCT district FROM elections;
SELECT zip_code FROM counties WHERE name = 'Howard';
SELECT zip_code FROM counties WHERE county_name = 'Howard';
SELECT delegate_name FROM election WHERE district_number = 1;
SELECT name FROM delegates WHERE district = 1;
SELECT delegate, committee FROM elections;
SELECT delegate_id, committee_id, election_id, delegate_name, committee_name, election_date, delegate_email, committee_email, delegate_phone, committee_phone, delegate_address, committee_address, delegate_phone_number, committee_phone_number,;
SELECT COUNT(DISTINCT governor) FROM states;
SELECT COUNT(DISTINCT governor) FROM governors;
SELECT * FROM lieutenant_governor WHERE party = 'Democratic';
SELECT name FROM politicians WHERE party = 'democratic' AND position = 'lieutenant governor' OR position = 'comptroller';
SELECT YEAR(DATE_TRUNC('year', date)) as year FROM governor WHERE governor_name = 'Eliot Spitzer' GROUP BY year ORDER BY year;
SELECT DISTINCT YEAR(date) FROM governor WHERE name = 'Eliot Spitzer';
SELECT * FROM election;
SELECT * FROM election_records;
SELECT delegates, name FROM delegates WHERE county = 'name';
SELECT county_name, delegate_name FROM county WHERE delegate_name IS NOT NULL;
SELECT * FROM delegates WHERE county_population < 100000;
SELECT * FROM delegates WHERE county_population < 100000;
SELECT COUNT(DISTINCT delegate_id) FROM delegates WHERE county_population > 50000;
SELECT COUNT(DISTINCT delegate_id) FROM delegates WHERE county_population > 50000;
SELECT name FROM delegates WHERE committee = 'Appropriations';
SELECT county_name FROM delegates WHERE committee_name = 'Appropriations';
SELECT delegates.name, party_name FROM delegates INNER JOIN party_membership ON delegates.party_id = party_membership.party_id;
SELECT party_name FROM delegates WHERE delegate_name = 'John';
SELECT party, governor FROM delegates WHERE district = 1;
SELECT party_name, governor_name FROM delegates WHERE district_number = 1;
SELECT comptrollers FROM parties WHERE district IN (1,2);
SELECT party_name, comptrollers FROM delegates WHERE district_number IN (1,2);
SELECT * FROM committees WHERE party = 'Democratic';
SELECT committee_name FROM committees WHERE party_id = 1;
SELECT county_name, delegate_count FROM county_delegates;
SELECT county_name, COUNT(delegate_id) FROM delegates GROUP BY county_name;
SELECT party_name, delegates FROM party_delegates;
SELECT party_name, COUNT(delegate_id) FROM party_delegates GROUP BY party_name;
SELECT county_name FROM counties ORDER BY population ASC;
SELECT name FROM counties ORDER BY population ASC;
SELECT county_name FROM counties ORDER BY county_name DESC;
SELECT name FROM counties ORDER BY name DESC;
SELECT name FROM counties WHERE population = (SELECT MAX(population) FROM counties);
SELECT name FROM counties WHERE population = (SELECT MAX(population) FROM counties);
SELECT county, population FROM counties ORDER BY population ASC LIMIT 3;
SELECT county_name FROM counties WHERE population = (SELECT MIN(population) FROM counties);
SELECT county_name FROM delegates WHERE delegates >= 2;
SELECT county FROM delegates WHERE delegates > 2;
SELECT name FROM party WHERE COUNT(*) >= 2;
SELECT party_name FROM party_records GROUP BY party_name HAVING COUNT(*) >= 2;
SELECT party_name FROM delegates GROUP BY party_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT party_name FROM delegates ORDER BY delegates DESC LIMIT 1;
SELECT name, COUNT(*) as num_governors FROM governor GROUP BY name ORDER BY num_governors DESC LIMIT 1;
SELECT name, COUNT(*) as num_governors FROM people WHERE governor_id IN (SELECT governor_id FROM governors GROUP BY governor_id ORDER BY COUNT(*) DESC LIMIT;
SELECT comptroller, COUNT(*) as times_comptroller FROM people GROUP BY comptroller ORDER BY times_comptroller DESC LIMIT 1;
SELECT name, COUNT(*) FROM people GROUP BY name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT name FROM parties WHERE delegates = 0;
SELECT * FROM parties WHERE delegates = 0;
SELECT name FROM parties WHERE committee = 'Appropriations' AND delegates = 'Yes';
SELECT * FROM parties WHERE party_id IN (SELECT party_id FROM committees WHERE committee_name = 'Appropriations') AND party_id IN (SELECT party_id FROM committees WHERE committee_name = 'Economic Matters');
SELECT committee_name FROM committees WHERE party_name IN ('democratic', 'liberal');
SELECT committee_name FROM committees WHERE party_name = 'democratic' AND party_name = 'liberal';
SELECT COUNT(*) FROM journalists;
SELECT name FROM journalists ORDER BY years_working ASC;
SELECT nationality, age FROM journalists;
SELECT name FROM journalists WHERE country = 'England' OR country = 'Wales';
SELECT AVG(years_worked) FROM journalists;
SELECT nationality FROM journalist WHERE years_working = (SELECT MAX(years_working) FROM journalist);
SELECT nationality, COUNT(*) FROM journalists GROUP BY nationality;
SELECT nationality, COUNT(*) as count FROM journalists GROUP BY nationality ORDER BY count DESC LIMIT 1;
SELECT nations.name FROM nations INNER JOIN journalists ON nations.id = journalists.nation_id WHERE journalists.years_of_working > 10 AND journalists.years_of_working < 3;
SELECT date, place, name FROM events ORDER BY attendance DESC;
SELECT journalist_name, event_date FROM journalists_events;
SELECT journalist_name, event_name FROM journalists_events ORDER BY journalist_name ASC;
SELECT journalist_name, COUNT(event_name) FROM journalist_events GROUP BY journalist_name;
SELECT name FROM journalists WHERE event_count > 1;
SELECT name FROM journalists WHERE event_reported = NULL;
SELECT AVG(attendance) AS avg_attendance, MAX(attendance) AS max_attendance FROM events;
SELECT AVG(age) as avg_age, AVG(experience) as avg_experience, role_type FROM journalists GROUP BY role_type;
SELECT venue, name FROM events ORDER BY total_attendees DESC LIMIT 2;
SELECT * FROM restaurants;
SELECT address FROM restaurants WHERE name = 'Subway';
SELECT rating FROM restaurants WHERE name = 'Subway';
SELECT type FROM restaurants;
SELECT description FROM restaurants WHERE type = 'Sandwich';
SELECT restaurant_name, rating FROM restaurants WHERE rating = (SELECT MAX(rating) FROM restaurants);
SELECT age FROM students WHERE name = 'Linda Smith';
SELECT gender FROM students WHERE name = 'Linda Smith';
SELECT first_name, last_name FROM students WHERE major = 600;
SELECT city FROM students WHERE name = 'Linda Smith';
SELECT COUNT(*) FROM students WHERE advisor_id = 1121;
SELECT Advisor, COUNT(Student) FROM Students GROUP BY Advisor ORDER BY COUNT(Student) DESC LIMIT 1;
SELECT major, COUNT(*) as num_students FROM students GROUP BY major ORDER BY num_students ASC LIMIT 1;
SELECT major, COUNT(*) FROM students GROUP BY major HAVING COUNT(*) BETWEEN 2 AND 30;
SELECT first_name, last_name FROM students WHERE age > 18 AND major = 600;
SELECT first_name, last_name FROM students WHERE gender = 'female' AND age > 18 AND major = '600';
SELECT COUNT(*) FROM restaurants WHERE type = 'Sandwich';
SELECT SUM(time_spent) FROM student_restaurant WHERE student_name = 'Linda Smith';
SELECT COUNT(*) FROM student WHERE name = 'Linda Smith' AND restaurant = 'Subway';
SELECT date FROM visits WHERE name = 'Linda Smith' AND restaurant = 'Subway';
SELECT restaurant, SUM(time) as total_time FROM student_data GROUP BY restaurant ORDER BY total_time ASC LIMIT 1;
SELECT first_name, last_name FROM student_visits GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT id FROM orders WHERE status = 'Success';
SELECT name, price FROM products WHERE order_count = (SELECT MAX(order_count) FROM orders);
SELECT COUNT(*) FROM customers;
SELECT COUNT(DISTINCT payment_method) FROM payments;
SELECT * FROM trucks ORDER BY license_number;
SELECT name FROM products ORDER BY price DESC LIMIT 1;
SELECT name FROM customers WHERE state <> 'California';
SELECT name, email FROM customers WHERE payment_method = 'Visa';
SELECT name, phone FROM customers WHERE state = 'California';
SELECT state FROM employee WHERE state IS NULL;
SELECT name, phone, email FROM customers ORDER BY date_of_joining;
SELECT name FROM customers LIMIT 5;
SELECT payment_method, COUNT(*) as frequency FROM transactions GROUP BY payment_method ORDER BY frequency DESC LIMIT 1;
SELECT route_name FROM routes ORDER BY route_name ASC;
SELECT route_name FROM deliveries GROUP BY route_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT state, COUNT(customer_id) FROM customers GROUP BY state;
SELECT COUNT(*) FROM authors;
SELECT COUNT(*) FROM authors;
SELECT COUNT(*) FROM institutions;
SELECT COUNT(*) FROM institutions;
SELECT COUNT(*) FROM papers;
SELECT COUNT(*) FROM papers;
SELECT title FROM papers WHERE author = 'Jeremy Gibbons';
SELECT title FROM papers WHERE author = 'Jeremy Gibbons';
SELECT * FROM papers WHERE author = 'Aaron Turon';
SELECT title FROM papers WHERE author = 'Aaron Turon';
SELECT COUNT(*) FROM papers WHERE author = 'Atsushi Ohori';
SELECT COUNT(*) FROM papers WHERE author = 'Atsushi Ohori';
SELECT Institution FROM Students WHERE Name = 'Matthias Blume';
SELECT Institution FROM Authors WHERE Name = 'Matthias Blume';
"Katsuhiro Ueno" belongs to the "University of Tokyo".;
SELECT name FROM author WHERE name = 'Katsuhiro Ueno';
SELECT first_name, last_name FROM students WHERE institution = 'University of Oxford';
SELECT first_name, last_name FROM authors WHERE institution_affiliation = 'University of Oxford';
SELECT first_name, last_name FROM authors WHERE institution = 'Google';
SELECT first_name, last_name FROM authors WHERE institution_affiliation = 'Google';
SELECT last_name FROM authors WHERE paper_title = 'Binders Unbound';
SELECT author_name FROM papers WHERE paper_title = 'Binders Unbound';
SELECT first_name, last_name FROM authors WHERE paper_title = 'Nameless, Painless';
SELECT first_name, last_name FROM authors WHERE paper_title = 'Nameless, Painless';
SELECT * FROM papers WHERE institution = 'Indiana University';
SELECT title FROM papers WHERE author_institution = 'Indiana University';
SELECT * FROM papers WHERE institution = 'Google';
SELECT * FROM papers WHERE author_institution = 'Google';
SELECT COUNT(*) FROM papers WHERE institution = 'Tokohu University';
SELECT COUNT(*) FROM papers WHERE author_institution = 'Tokohu University';
SELECT COUNT(*) FROM papers WHERE institution = 'University of Pennsylvania';
SELECT COUNT(*) FROM papers WHERE author_institution = 'University of Pennsylvania';
SELECT * FROM papers WHERE author = 'Olin Shivers';
SELECT paper_title FROM papers WHERE author = 'Olin Shivers';
SELECT * FROM papers WHERE author = 'Stephanie Weirich';
SELECT title FROM papers WHERE author = 'Stephanie Weirich';
SELECT * FROM papers WHERE institution = 'USA' AND second_author = 'Turon';
SELECT * FROM papers WHERE second_author_last_name = 'Turon' AND country = 'USA';
SELECT title FROM papers WHERE first_author_institution = 'Japan' AND last_name = 'Ohori';
SELECT title FROM papers WHERE first_author = 'Ohori' AND country = 'Japan';
SELECT author_last_name, COUNT(*) as num_papers FROM papers GROUP BY author_last_name ORDER BY num_papers DESC LIMIT 1;
SELECT author_name FROM papers GROUP BY author_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country, COUNT(*) as num_papers FROM papers GROUP BY country ORDER BY num_papers DESC LIMIT 1;
SELECT country FROM papers GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1;
SELECT name FROM organization WHERE papers_published = (SELECT MAX(papers_published) FROM organization);
SELECT name FROM institution ORDER BY COUNT(*) DESC LIMIT 1;
SELECT title FROM papers WHERE title LIKE '%ML%';
SELECT title FROM papers WHERE title LIKE '%ML%';
SELECT * FROM papers WHERE title LIKE '%Database%';
SELECT title FROM papers WHERE title LIKE '%Database%';
SELECT first_name FROM authors WHERE paper_title LIKE '%Functional%';
SELECT first_name FROM authors WHERE paper_title LIKE '%Functional%';
SELECT last_name FROM authors WHERE title LIKE '%Monadic%';
SELECT authors.last_name FROM authors, papers WHERE authors.id = papers.author_id AND papers.title LIKE '%Monadic%';
SELECT title FROM papers WHERE num_authors = (SELECT MAX(num_authors) FROM papers);
SELECT paper_title FROM papers WHERE num_authors = (SELECT MAX(num_authors) FROM papers);
SELECT first_name FROM authors WHERE last_name = 'Ueno';
SELECT first_name FROM authors WHERE last_name = 'Ueno';
SELECT last_name FROM authors WHERE first_name = 'Amal';
SELECT last_name FROM authors WHERE first_name = 'Amal';
SELECT first_name FROM authors ORDER BY first_name ASC;
SELECT first_name FROM authors ORDER BY first_name ASC;
SELECT last_name FROM authors ORDER BY last_name ASC;
SELECT last_name FROM authors ORDER BY last_name ASC;
SELECT first_name, last_name FROM authors ORDER BY last_name ASC;
SELECT first_name, last_name FROM authors ORDER BY last_name ASC;
SELECT COUNT(DISTINCT last_name) FROM actors_actresses;
SELECT COUNT(DISTINCT last_name) FROM actors;
SELECT name FROM actors WHERE first_name = 'John';
SELECT name, COUNT(*) as count FROM actors GROUP BY name ORDER BY count DESC LIMIT 1;
SELECT name FROM actors WHERE popularity ='most popular' ORDER BY name ASC;
SELECT name, COUNT(*) as count FROM actors GROUP BY name ORDER BY count DESC LIMIT 1;
SELECT DISTNAME FROM Addresses GROUP BY DISTNAME HAVING COUNT(*) >= 2;
SELECT DISTINCT district_name FROM addresses GROUP BY district_name HAVING COUNT(*) >= 2;
SELECT phone_number, postal_code FROM address WHERE address_name = '1031 Daugavpils Parkway';
SELECT phone, postal_code FROM addresses WHERE address = '1031 Daugavpils Parkway';
SELECT city_name, COUNT(*) as num_addresses, city_id FROM addresses GROUP BY city_id ORDER BY num_addresses DESC LIMIT 1;
SELECT city_name, id, COUNT(*) as num_addresses FROM addresses GROUP BY city_name ORDER BY num_addresses DESC LIMIT 1;
SELECT COUNT(*) FROM addresses WHERE district = 'California';
SELECT COUNT(*) FROM Addresses WHERE district = 'California';
SELECT title, id FROM films WHERE rented = 0.99 AND inventory < 3;
SELECT title, id FROM films WHERE rental_rate = 0.99 AND inventory < 3;
SELECT COUNT(*) FROM cities WHERE country = 'Australia';
SELECT COUNT(*) FROM cities WHERE country = 'Australia';
SELECT country, COUNT(city) as num_cities FROM countries WHERE num_cities >= 3 GROUP BY country;
SELECT country FROM countries WHERE COUNT(city) >= 3;
SELECT payment_date FROM payments WHERE amount > 10 AND staff_name = 'Elsa';
SELECT payment_date FROM payments WHERE amount > 10 OR staff_member_first_name = 'Elsa';
SELECT COUNT(*) FROM customers WHERE active = 1;
SELECT COUNT(*) FROM customers WHERE active = true;
SELECT film_name, rental_rate FROM rentals ORDER BY rental_rate DESC LIMIT 1;
SELECT title, rental_rate FROM films WHERE rental_rate = (SELECT MAX(rental_rate) FROM films);
SELECT film_name, film_id, description FROM films WHERE (actor_count > 0 OR actress_count > 0) ORDER BY actor_count DESC LIMIT 1;
SELECT title, id, description FROM movies WHERE num_actors = (SELECT MAX(num_actors) FROM movies);
SELECT first_name, last_name, actor_id FROM actor_film_counts ORDER BY actor_film_counts.actor_id DESC LIMIT 1;
SELECT actor_name, id FROM actor_id JOIN film_id ON actor_id.actor_id = film_id.actor_id GROUP BY actor_name HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) FROM film_id;
SELECT first_name, last_name FROM actors WHERE num_films > 30;
SELECT actor_name, COUNT(*) as num_films FROM actors WHERE num_films > 30 GROUP BY actor_name ORDER BY num_films DESC;
SELECT store_name, COUNT(item_id) as num_items FROM items GROUP BY store_name ORDER BY num_items DESC LIMIT 1;
SELECT id FROM store WHERE items_in_inventory = (SELECT MAX(items_in_inventory) FROM store);
SELECT SUM(amount) FROM payments;
SELECT SUM(payment_amount) FROM payments;
SELECT first_name, last_name, id FROM customers WHERE id IN (SELECT customer_id FROM payments WHERE amount < (SELECT MIN(amount) FROM payments)) ORDER BY amount ASC;
SELECT customer_name, customer_id FROM customers WHERE total_payment = (SELECT MIN(total_payment) FROM customers);
SELECT genre_name FROM films WHERE title = 'HUNGER ROOF';
SELECT name FROM category WHERE name = 'HUNGER ROOF';
SELECT genre_name, genre_id, COUNT(*) FROM films GROUP BY genre_name, genre_id;
SELECT category_name, COUNT(*) FROM films GROUP BY category_name;
SELECT title, id FROM films WHERE copies > (SELECT MAX(copies) FROM films);
SELECT title, id FROM films WHERE copies_in_inventory = (SELECT MAX(copies_in_inventory) FROM films);
SELECT title, id FROM rentals WHERE frequency = (SELECT MAX(frequency) FROM rentals);
SELECT title, inventory_id FROM rentals GROUP BY title ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(language) FROM films;
SELECT COUNT(DISTINCT language) FROM films;
SELECT title FROM movies WHERE rating = 'R';
SELECT title FROM movies WHERE rating = 'R';
SELECT * FROM stores WHERE name ='store 1';
SELECT address FROM stores WHERE store_id = 1;
SELECT staff_name, staff_id FROM staff WHERE payments_handled = (SELECT MIN(payments_handled) FROM staff);
SELECT full_name, staff_id FROM staff WHERE num_payments = (SELECT MIN(num_payments) FROM staff);
SELECT language FROM films WHERE title = 'AIRPORT POLLOCK';
SELECT language FROM films WHERE title = 'AIRPORT POLLOCK';
SELECT COUNT(*) FROM stores;
SELECT COUNT(*) FROM stores;
SELECT COUNT(DISTINCT rating) FROM ratings;
SELECT COUNT(DISTINCT rating) FROM films;
SELECT * FROM movies WHERE special_feature LIKE '%Deleted Scenes%';
SELECT title FROM films WHERE special_feature LIKE '%Deleted Scenes%';
SELECT COUNT(*) FROM inventory WHERE store_id = 1;
SELECT COUNT(*) FROM store_items WHERE store_id = 1;
SELECT date FROM payments WHERE payment_id = 1;
SELECT date FROM payments ORDER BY date ASC LIMIT 1;
SELECT * FROM customers WHERE first_name = 'Linda';
SELECT address, email FROM customers WHERE first_name = 'Linda';
SELECT title FROM films WHERE length > 100 OR rating = 'PG' AND cost < 200;
SELECT title FROM films WHERE length > 100 OR rating = 'PG' AND price < 200;
SELECT first_name, last_name FROM customers WHERE rental_date = (SELECT MIN(rental_date) FROM rentals);
SELECT first_name, last_name FROM customers WHERE rental_date = (SELECT MIN(rental_date) FROM rentals);
SELECT first_name, last_name, full_name FROM staff_members WHERE first_name = 'April' AND last_name = 'Burns';
SELECT first_name, last_name FROM staff WHERE first_name = 'April' AND last_name = 'Burns';
SELECT store_name, COUNT(customer_id) as num_customers FROM customers GROUP BY store_name ORDER BY num_customers DESC LIMIT 1;
SELECT id FROM store WHERE customers = (SELECT MAX(customers) FROM store);
